using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using WebApp.Models;
using WebApp.Persistence.BusinessLogicEnums;
using WebApp.Reports;
using WebApp.Workflows;

namespace WebApp.Helpers.Tests
{
    [TestClass()]
    public class DataLayerTests
    {
        // Test Account 
        private readonly int _userId = 7;

        private readonly DistilDBContext _db;
        private readonly DataLayer _dl;
        private readonly DictionaryWorkflow _dictionary;
        private readonly PurchaseWorkflow _purchase;
        private readonly ProductionWorkflow _production;
        private readonly ProductionReport _productionReport;
        private readonly ProcessingReport _processingReport;
        private readonly StorageReport _storageReport;

        private List<Tuple<int, Table>> _cleanup;

        private ReportHeader _header;
        private Dictionary<string, SpiritObject> _spirits;
        private Dictionary<string, VendorObject> _vendors;
        private Dictionary<string, StorageObject> _storages;
        private Dictionary<string, RawMaterialObject> _rawMaterials;

        private Dictionary<string, PurchaseObject> _purchases;
        private Dictionary<string, ProductionObject> _productions;

        public DataLayerTests()
        {
            _db = new DistilDBContext();
            _dl = new DataLayer(_db);
            _dictionary = new DictionaryWorkflow(_db, _dl);
            _purchase = new PurchaseWorkflow(_db, _dl);
            _production = new ProductionWorkflow(_db, _dl);
            _productionReport = new ProductionReport(_db, _dl);
            _processingReport = new ProcessingReport(_db, _dl);
            _storageReport = new StorageReport(_db, _dl);
        }

        /// <summary>
        /// Table enum contains dictionary tables identifiers for easy mapping during
        /// the table cleanup stage of test pass
        /// </summary>
        private enum Table
        {
            None = 0,
            Spirit,
            Vendor,
            Storage,
            MaterialDict,
            Purchase,
            Production,
            TaxWithdrawn
        }

        /// <summary>
        /// Runs once before each TestMethod is called.
        /// </summary>
        [TestInitialize()]
        public void Initialize()
        {
            _cleanup = new List<Tuple<int, Table>>();

            _spirits = new Dictionary<string, SpiritObject>();
            _vendors = new Dictionary<string, VendorObject>();
            _storages = new Dictionary<string, StorageObject>();
            _rawMaterials = new Dictionary<string, RawMaterialObject>();

            _purchases = new Dictionary<string, PurchaseObject>();
            _productions = new Dictionary<string, ProductionObject>();

            _header = new ReportHeader
            {
                ProprietorName = "Test Distillery",
                EIN = "12-3456789",
                PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059",
                DSP = "DSP-WA-21086"
            };

            CreateSpirit("Gin", (int)Persistence.BusinessLogicEnums.ProcessingReportType.Gin);
            CreateSpirit("BrandyUnder170", (int)Persistence.BusinessLogicEnums.ProcessingReportType.BrandyDistilledAt170AndUnder);
            CreateVendor("Vendor");
            CreateStorage("Storage");
            DefineRawMaterialFermentable("Grapes", (int)Persistence.BusinessLogicEnums.UnitOfMeasurement.lb, (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);
            DefineRawMaterialFermented("Pomace", (int)Persistence.BusinessLogicEnums.UnitOfMeasurement.lb, (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);
            DefineRawMaterialFermented("Wine", (int)Persistence.BusinessLogicEnums.UnitOfMeasurement.gal, (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);
            DefineRawMaterialDistilled("Gns", (int)Persistence.BusinessLogicEnums.UnitOfMeasurement.gal);
            DefineRawMaterialAdditive("DistilledWater", (int)Persistence.BusinessLogicEnums.UnitOfMeasurement.gal);
            DefineRawMaterialSupply("Sticker", (int)Persistence.BusinessLogicEnums.UnitOfMeasurement.pc);
        }

        /// <summary>
        /// Runs once after each method is called, even if exception is thrown.
        /// </summary>
        [TestCleanup()]
        public void Cleanup()
        {
            foreach (var i in _cleanup)
            {
                TestRecordCleanup(i.Item1, i.Item2);
            }
        }

        [TestMethod()]
        public void TestTemplate()
        {
            // Arrange
            PurchaseFermentable(name: "GrapesPurchase",
                date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 0f,
                weight: 1000f,
                alcoholContent: 0f,
                proof: 0f,
                materialDictId: _rawMaterials["Grapes"].RawMaterialId,
                price: 500f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            PurchaseFermented(name: "PomacePurchase",
                date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 0f,
                weight: 100f,
                alcoholContent: 10f,
                proof: 20f,
                materialDictId: _rawMaterials["Pomace"].RawMaterialId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Other,
                price: 777f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            PurchaseFermented(name: "WinePurchase",
                date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 10f,
                proof: 20f,
                materialDictId: _rawMaterials["Wine"].RawMaterialId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Other,
                price: 123f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            PurchaseDistilled(name: "GnsPurchase",
                date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 50f,
                proof: 100f,
                materialDictId: _rawMaterials["Gns"].RawMaterialId,
                spiritTypeReportingId: (int)ReportSpiritTypes.AlcoholUnder190,
                price: 432f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            PurchaseAdditive(name: "DistilledWaterPurchase",
                date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 1000f,
                weight: 0f,
                alcoholContent: 0f,
                proof: 0f,
                materialDictId: _rawMaterials["DistilledWater"].RawMaterialId,
                price: 0.1f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            PurchaseSupply(name: "Stickers",
                date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                materialDictId: _rawMaterials["Sticker"].RawMaterialId,
                price: 15f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            ProduceFerment(name: "Wine",
                start: new DateTimeOffset(2018, 6, 2, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 6, 3, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 10f,
                proof: 20f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Other,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _purchases["GrapesPurchase"].PurchaseId,
                        OldVal = 0f,
                        NewVal = 1000f,
                        DistillableOrigin = "pur",
                        BurningDownMethod = "weight"
                    }
                });

            ProduceDistill(name: "Brandy",
                start: new DateTimeOffset(2018, 6, 4, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 6, 5, 0, 0, 0, TimeSpan.Zero),
                volume: 25f,
                weight: 0f,
                alcoholContent: 50f,
                proof: 25f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.BrandyUnder170,
                spiritCut: "Heart",
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _productions["Wine"].ProductionId,
                        OldVal = 0f,
                        NewVal = 20f,
                        DistillableOrigin = "prod",
                        BurningDownMethod = "volume"
                    }
                });

            ProduceBlend(name: "NotWateredDownBrandy",
                start: new DateTimeOffset(2018, 6, 6, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 6, 7, 0, 0, 0, TimeSpan.Zero),
                volume: 25f,
                weight: 0f,
                alcoholContent: 50f,
                proof: 25f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.BrandyUnder170,
                spiritId: _spirits["BrandyUnder170"].SpiritId,
                gainLoss: 0f,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _productions["Brandy"].ProductionId,
                        OldVal = 0f,
                        NewVal = 25f,
                        DistillableOrigin = "prod",
                        BurningDownMethod = "volume"
                    }
                },
                blendingAdditives: new List<BlendingAdditive>
                {
                    new BlendingAdditive
                    {
                        RawMaterialId = _rawMaterials["DistilledWater"].RawMaterialId,
                        RawMaterialQuantity = 0f,
                        RawMaterialName = "DistilledWater",
                        UnitOfMeasurement = "gal"
                    }
                });

            ProduceBottle(name: "BrandedBrandy",
                start: new DateTimeOffset(2018, 6, 8, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 6, 9, 0, 0, 0, TimeSpan.Zero),
                volume: 23.78f, // Use bottling UI workflow to calculate desired volume for given number of cases/bottles
                weight: 0f,
                alcoholContent: 50f,
                proof: 23.78f, // Use bottling UI workflow to calculate desired proof for given number of cases/bottles
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.BrandyUnder170,
                spiritId: _spirits["BrandyUnder170"].SpiritId,
                gainLoss: 0f,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _productions["NotWateredDownBrandy"].ProductionId,
                        OldVal = 0f,
                        NewVal = 23.78f,
                        DistillableOrigin = "prod",
                        BurningDownMethod = "volume"
                    }
                },
                bottlingInfo: new BottlingObject
                {
                    CaseCapacity = 12,
                    CaseQuantity = 10f,
                    BottleQuantity = 120,
                    BottleCapacity = 750f,
                });

            // Act
            var storageReport = GetStorageReport(2018, 6);
            var productionReport = GetProductionReport(new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2018, 6, 30, 0, 0, 0, TimeSpan.Zero));
            var processingReport = GetProcessingReport(new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2018, 6, 30, 0, 0, 0, TimeSpan.Zero));

            // Assert
            AssertStorage(storageReport,
                new ReportHeader
                {
                    ReportDate = "June 2018"
                },
                new List<StorageReportCategory>
                {
                    new StorageReportCategory
                    {
                        SpiritTypeReportingID = (int)ReportSpiritTypes.AlcoholUnder190,
                        r2_DepositedInBulkStorage =  100f,
                        r6_TotalLines1Through5 = 100f,
                        r23_OnHandEndOfMonth = 100f,
                        r24_Lines7Through23 = 100f
                    },
                    new StorageReportCategory
                    {
                        SpiritTypeReportingID = (int)ReportSpiritTypes.Other,
                        r2_DepositedInBulkStorage = 40f,
                        r6_TotalLines1Through5 = 40f,
                        r18_TransferredToProductionAccount = 20f,
                        r23_OnHandEndOfMonth = 20f,
                        r24_Lines7Through23 = 40f
                    },
                    new StorageReportCategory
                    {
                        SpiritTypeReportingID = (int)ReportSpiritTypes.Total,
                        r2_DepositedInBulkStorage = 140f,
                        r6_TotalLines1Through5 = 140f,
                        r18_TransferredToProductionAccount = 20f,
                        r23_OnHandEndOfMonth = 120f,
                        r24_Lines7Through23 = 140f
                    }
                });

            AssertProduction(productionReport,
                new ReportHeader
                {
                    ReportDate = "June 2018"
                },
                new List<ProdReportPart1> {
                    new ProdReportPart1
                    {
                        ProducedTotal = 25f,
                        SpiritCatName = "BrandyUnder170",
                        SpiritTypeReportingID = (int)ReportSpiritTypes.BrandyUnder170,
                        StorageAcct = 25f,
                    },
                    new ProdReportPart1
                    {
                        Recd4RedistilaltionL15 = 20f,
                        SpiritCatName = "Other",
                        SpiritTypeReportingID = (int)ReportSpiritTypes.Other,
                    },
                    new ProdReportPart1
                    {
                        ProccessingAcct = 0f,
                        ProducedTotal = 25f,
                        Recd4RedistilaltionL15 = 20f,
                        SpiritCatName = "Total",
                        SpiritTypeReportingID = (int)ReportSpiritTypes.Total,
                        StorageAcct = 25f,
                    }
                },
                new List<ProdReportParts2Through4> { },
                new List<ProdReportPart5> {
                    new ProdReportPart5
                    {
                        KindofSpirits = "Other",
                        Proof = 20f
                    }
                },
                new List<ProdReportPart6> {
                    new ProdReportPart6
                    {
                        KindOfMaterial = "Grapes",
                        ProdReportMaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit,
                        Weight = 200
                    }
                });

            AssertProcessing(processingReport,
                new ReportHeader
                {
                    ReportDate = "June 2018"
                },
                new ProcessReportingPart1
                {
                    OnHandFirstofMonth = 0f, // line 1
                    Recd4Process = 25f, // line 2
                    Gains = 0f, // line 7
                    TotalLine8 = 0f/*OnHandFirstofMonth*/ + 25f/*Recd4Process*/ + 0/*Gains*/,
                    AmtBottledPackaged = 0f, // line 9
                    BulkIngredients = "spirit", // column (b) or (c)
                    Losses = 0f, // line 24
                    OnHandEndofMonth = 25f/*TotalLine8*/ - 0f/*TotalLine26*/, // line 25
                    TotalLine26 = 0f
                },
                new ProcessReportingPart2
                {
                    AmtBottledPackaged = 0f,
                    FinishedProduct = "bottled",
                    TaxWithdrawn = 0f,
                    OnHandEndofMonth = 0f,
                    TotalLine31 = 0f,
                    RecordedLosses = 0f,
                    TotalLine47 = 0f/*Line 44 Losses*/ + 0f/*Tax withdrawn */
                },
                new List<ProcessReportingPart4>
                {
                    new ProcessReportingPart4
                    {
                        Brandy170Under = 25f,
                        ProcessingSpirits = "bulkSpiritDumped",
                        ProcessingTypeID = (int)Persistence.BusinessLogicEnums.ProcessingReportType.BrandyDistilledAt170AndUnder,
                        StateID = 4
                    },
                    new ProcessReportingPart4
                    {
                        Brandy170Under = 23.78f,
                        ProcessingSpirits = "bottled",
                        ProcessingTypeID = (int)Persistence.BusinessLogicEnums.ProcessingReportType.BrandyDistilledAt170AndUnder,
                        StateID = 5
                    }
                });
        }

        private void CreateSpirit(string name, int processingReportTypeId)
        {
            SpiritObject spirit = new SpiritObject
            {
                SpiritName = name,
                ProcessingReportTypeID = processingReportTypeId
            };

            int id = _dictionary.CreateSpirit(_userId, spirit);

            // id will be 0 if CreateSpirit failed
            if (id == 0)
            {
                throw new Exception();
            }

            // Update dummy object with an actual record id
            spirit.SpiritId = id;

            // Add to dictionary for use in test method
            _spirits.Add(spirit.SpiritName, spirit);

            // Add record id to cleanup list
            _cleanup.Add(Tuple.Create(id, Table.Spirit));
        }

        private void CreateVendor(string name)
        {
            VendorObject vendor = new VendorObject
            {
                VendorName = name
            };

            int id = _dictionary.CreateVendor(_userId, vendor);

            // id will be 0 if CreateVendor failed
            if (id == 0)
            {
                throw new Exception();
            }

            // Update dummy object with an actual record id
            vendor.VendorId = id;

            // Add to dictionary for use in test method
            _vendors.Add(vendor.VendorName, vendor);

            // Add record id to cleanup list
            _cleanup.Add(Tuple.Create(id, Table.Vendor));
        }

        private void CreateStorage(string name)
        {
            StorageObject storage = new StorageObject
            {
                StorageName = name,
                SerialNumber = Guid.NewGuid().ToString()
            };

            int id = _dictionary.CreateStorage(_userId, storage);

            // id will be 0 if CreateStorage failed
            if (id == 0)
            {
                throw new Exception();
            }

            // Update dummy object with an actual record id
            storage.StorageId = id;

            // Add to dictionary for use in test method
            _storages.Add(storage.StorageName, storage);

            // Add record id to cleanup list
            _cleanup.Add(Tuple.Create(id, Table.Storage));
        }

        private void DefineRawMaterialFermentable(string name, int unit, int category)
        {
            PurchaseMaterialBooleanTypes types = new PurchaseMaterialBooleanTypes { Fermentable = true };
            DefineRawMaterial(name, unit, types, category);
        }

        private void DefineRawMaterialFermented(string name, int unit, int category)
        {
            PurchaseMaterialBooleanTypes types = new PurchaseMaterialBooleanTypes { Fermented = true };
            DefineRawMaterial(name, unit, types, category);
        }

        private void DefineRawMaterialDistilled(string name, int unit)
        {
            PurchaseMaterialBooleanTypes types = new PurchaseMaterialBooleanTypes { Distilled = true };
            DefineRawMaterial(name, unit, types);
        }

        private void DefineRawMaterialSupply(string name, int unit)
        {
            PurchaseMaterialBooleanTypes types = new PurchaseMaterialBooleanTypes { Supply = true };
            DefineRawMaterial(name, unit, types);
        }

        private void DefineRawMaterialAdditive(string name, int unit)
        {
            PurchaseMaterialBooleanTypes types = new PurchaseMaterialBooleanTypes { Additive = true };
            DefineRawMaterial(name, unit, types);
        }

        private void DefineRawMaterial(string name, int unit, PurchaseMaterialBooleanTypes types, int category = 0)
        {
            RawMaterialObject material = new RawMaterialObject
            {
                RawMaterialName = name,
                PurchaseMaterialTypes = types,
                UnitTypeId = unit,
                MaterialCategoryID = category
            };

            int id = _dictionary.CreateRawMaterial(_userId, material);

            // id will be 0 if CreateRawMaterial failed
            if (id == 0)
            {
                throw new Exception();
            }

            // Update dummy object with an actual record id
            material.RawMaterialId = id;

            // Add to dictionary for use in test method
            _rawMaterials.Add(material.RawMaterialName, material);

            // Add record id to cleanup list
            _cleanup.Add(Tuple.Create(id, Table.MaterialDict));
        }

        private void PurchaseFermentable(
            string name,
            DateTimeOffset date,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int materialDictId,
            float price,
            int vendorId,
            int storageId)
        {
            Purchase(name, "Fermentable", date, materialDictId, price, vendorId, storageId, volume, weight, alcoholContent, proof);
        }

        private void PurchaseFermented(
            string name,
            DateTimeOffset date,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int materialDictId,
            int spiritTypeReportingId,
            float price,
            int vendorId,
            int storageId)
        {
            Purchase(name, "Fermented", date, materialDictId, price, vendorId, storageId, volume, weight, alcoholContent, proof, spiritTypeReportingId);
        }

        private void PurchaseDistilled(
            string name,
            DateTimeOffset date,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int materialDictId,
            int spiritTypeReportingId,
            float price,
            int vendorId,
            int storageId)
        {
            Purchase(name, "Distilled", date, materialDictId, price, vendorId, storageId, volume, weight, alcoholContent, proof, spiritTypeReportingId);
        }

        private void PurchaseAdditive(
            string name,
            DateTimeOffset date,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int materialDictId,
            float price,
            int vendorId,
            int storageId)
        {
            Purchase(name, "Additive", date, materialDictId, price, vendorId, storageId, volume, weight, alcoholContent, proof);
        }

        private void PurchaseSupply(
            string name,
            DateTimeOffset date,
            float volume,
            int materialDictId,
            float price,
            int vendorId,
            int storageId)
        {
            Purchase(name, "Supply", date, materialDictId, price, vendorId, storageId, volume);
        }

        private void Purchase(
            string name,
            string type,
            DateTimeOffset date,
            int materialDictId,
            float price,
            int vendorId,
            int storageId,
            float volume = 0f, // optional
            float weight = 0f, // optional
            float alcoholContent = 0f, // optional
            float proof = 0f, // optional
            int spiritTypeReportingId = 0) // optional)
        {
            PurchaseObject purchase = new PurchaseObject
            {
                PurBatchName = name,
                PurchaseType = type,
                PurchaseDate = date,
                Quantity = volume,
                VolumeByWeight = weight,
                AlcoholContent = alcoholContent,
                ProofGallon = proof,
                RecordId = materialDictId,
                Price = price,
                VendorId = vendorId,
                SpiritTypeReportingID = spiritTypeReportingId,
                Gauged = true,
                Storage = new List<StorageObject>
                    {
                        new StorageObject
                        {
                            StorageId = storageId
                        }
                    }
            };

            int id = _purchase.CreatePurchase(purchase, _userId);

            // id will be 0 if CreateRawMaterial failed
            if (id == 0)
            {
                throw new Exception();
            }

            // Update dummy object with an actual record id
            purchase.RawMaterialId = id;

            // Add to dictionary for use in test method
            _purchases.Add(purchase.PurBatchName, purchase);

            // Add record id to cleanup list
            _cleanup.Add(Tuple.Create(id, Table.Purchase));
        }

        private void ProduceFerment(
            string name,
            DateTimeOffset start,
            DateTimeOffset end,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int storageId,
            int spiritTypeReportingId,
            bool gauged,
            List<ObjInfo4Burndwn> materialsUsed)
        {
            Produce(name, "Fermentation", start, end, volume, weight, alcoholContent, proof, storageId, spiritTypeReportingId, gauged, materialsUsed);
        }

        private void ProduceDistill(
            string name,
            DateTimeOffset start,
            DateTimeOffset end,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int storageId,
            int spiritTypeReportingId,
            string spiritCut,
            bool gauged,
            List<ObjInfo4Burndwn> materialsUsed)
        {
            // Requires spiritType and materialKindReporting
            Produce(name, "Distillation", start, end, volume, weight, alcoholContent, proof, storageId, spiritTypeReportingId, gauged, materialsUsed, spiritCut: spiritCut);
        }

        private void ProduceBlend(
            string name,
            DateTimeOffset start,
            DateTimeOffset end,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int storageId,
            int spiritTypeReportingId,
            int spiritId,
            float gainLoss,
            bool gauged,
            List<ObjInfo4Burndwn> materialsUsed,
            List<BlendingAdditive> blendingAdditives)
        {
            Produce(name, "Blending", start, end, volume, weight, alcoholContent, proof, storageId, spiritTypeReportingId, gauged, materialsUsed, spiritId: spiritId, gainLoss: gainLoss, blendingAdditives: blendingAdditives);
        }

        private void ProduceBottle(
            string name,
            DateTimeOffset start,
            DateTimeOffset end,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int storageId,
            int spiritTypeReportingId,
            int spiritId,
            float gainLoss,
            bool gauged,
            List<ObjInfo4Burndwn> materialsUsed,
            BottlingObject bottlingInfo = null,
            List<FillTestObject> fillTestList = null)
        {
            Produce(name, "Bottling", start, end, volume, weight, alcoholContent, proof, storageId, spiritTypeReportingId, gauged, materialsUsed, spiritId: spiritId, gainLoss: gainLoss, bottlingInfo: bottlingInfo, filltestList: fillTestList);
        }

        private int GetSpiritCutId(string spiritCut)
        {
            return (from rec in _db.SpiritCut
                      where rec.Name == spiritCut
                      select rec.SpiritCutID).Single();
        }

        private void Produce(
            string name,
            string type,
            DateTimeOffset start,
            DateTimeOffset end,
            float volume,
            float weight,
            float alcoholContent,
            float proof,
            int storageId,
            int spiritTypeReportingId,
            bool gauged,
            List<ObjInfo4Burndwn> materialsUsed,
            string spiritCut = "",
            float gainLoss = 0f,
            int spiritId = 0,
            List<BlendingAdditive> blendingAdditives = null,
            BottlingObject bottlingInfo = null,
            List<FillTestObject>filltestList = null)
        {
            int spiritCutId = 0;

            if (spiritCut != string.Empty)
            {
                // Get spirit cut id
                spiritCutId = GetSpiritCutId(spiritCut);
            }

            ProductionObject production = new ProductionObject
            {
                BatchName = name,
                ProductionType = type,
                ProductionDate = start,
                ProductionStart = start,
                ProductionEnd = end,
                Gauged = gauged,
                GainLoss = gainLoss,
                SpiritCutId = spiritCutId,
                SpiritId = spiritId,
                SpiritTypeReportingID = spiritTypeReportingId,
                Quantity = volume,
                VolumeByWeight = weight,
                AlcoholContent = alcoholContent,
                ProofGallon = proof,
                FillTestList = filltestList,
                Storage = new List<StorageObject>
                {
                    new StorageObject
                    {
                        StorageId = storageId
                    }
                },
                UsedMats = materialsUsed,
                BlendingAdditives = blendingAdditives
            };

            int id = _production.CreateProduction(production, _userId);

            // id will be 0 if CreateProduction failed
            if (id == 0)
            {
                throw new Exception();
            }

            // Update dummy object with an actual record id
            production.ProductionId = id;

            // Add to dictionary for use in test method
            _productions.Add(production.BatchName, production);

            // Add record id to cleanup list
            _cleanup.Add(Tuple.Create(id, Table.Production));
        }

        private StorageReportObject GetStorageReport(int year, int month)
        {
            var start = GetReportStart(year, month);
            var end = GetReportEnd(year, month);

            return _storageReport.GetStorageReportData(
                GetReportStart(year, month),
                GetReportEnd(year, month),
                _userId);
        }

        private DateTimeOffset GetReportStart(int year, int month)
        {
            return new DateTimeOffset(year, month, 1, 0, 0, 0, TimeSpan.Zero);
        }

        private DateTimeOffset GetReportEnd(int year, int month)
        {
            int lastDayOfMonth = DateTime.DaysInMonth(year, month);
            return new DateTimeOffset(year, month, lastDayOfMonth, 0, 0, 0, TimeSpan.Zero);
        }

        private ProductionReportingObject GetProductionReport(DateTimeOffset start, DateTimeOffset end)
        {
            return _productionReport.GetProductionReportData(start, end, _userId);
        }

        private ProcessingReportingObject GetProcessingReport(DateTimeOffset start, DateTimeOffset end)
        {
            return _processingReport.GetProcessingReportData(start, end, _userId);
        }

        private void AssertReportHeader(ReportHeader header)
        {
            Assert.AreEqual(_header.DSP, header.DSP);
            Assert.AreEqual(_header.EIN, header.EIN);
            Assert.AreEqual(_header.PlantAddress, header.PlantAddress);
            Assert.AreEqual(_header.ProprietorName, header.ProprietorName);
            Assert.AreEqual(_header.ReportDate, header.ReportDate);
        }

        private void AssertStorage(
            StorageReportObject report,
            ReportHeader header,
            List<StorageReportCategory> categories)
        {
            _header.ReportDate = header.ReportDate;
            AssertReportHeader(report.Header);
            Assert.AreEqual(categories.Count, report.ReportBody.Count);

            foreach (var cat in categories)
            {
                Assert.AreEqual(cat.r1_OnHandFirstOfMonth, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r1_OnHandFirstOfMonth)
                    .Single());
                Assert.AreEqual(cat.r2_DepositedInBulkStorage, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r2_DepositedInBulkStorage)
                    .Single());
                Assert.AreEqual(cat.r4_ReturnedToBulkStorage, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r4_ReturnedToBulkStorage)
                    .Single());
                Assert.AreEqual(cat.r6_TotalLines1Through5, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r6_TotalLines1Through5)
                    .Single());
                Assert.AreEqual(cat.r7_TaxPaid, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r7_TaxPaid)
                    .Single());
                Assert.AreEqual(cat.r17_TransferredToProcessingAccount, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r17_TransferredToProcessingAccount)
                    .Single());
                Assert.AreEqual(cat.r18_TransferredToProductionAccount, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r18_TransferredToProductionAccount)
                    .Single());
                Assert.AreEqual(cat.r19_TransferredToOtherBondedPremises, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r19_TransferredToOtherBondedPremises)
                    .Single());
                Assert.AreEqual(cat.r20_Destroyed, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r20_Destroyed)
                    .Single());
                Assert.AreEqual(cat.r22_OtherLosses, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r22_OtherLosses)
                    .Single());
                Assert.AreEqual(cat.r23_OnHandEndOfMonth, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r23_OnHandEndOfMonth)
                    .Single());
                Assert.AreEqual(cat.r24_Lines7Through23, report.ReportBody
                    .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                    .Select(x => x.r24_Lines7Through23)
                    .Single());
            }
        }

        private void AssertProduction(
            ProductionReportingObject report,
            ReportHeader header,
            List<ProdReportPart1> part1 = null,
            List<ProdReportParts2Through4> part2to4 = null,
            List<ProdReportPart5> part5 = null,
            List<ProdReportPart6> part6 = null)
        {
            _header.ReportDate = header.ReportDate;
            AssertReportHeader(report.Header);

            if (part1 != null)
            {
                Assert.AreEqual(part1.Count, report.Part1List.Count);

                foreach (var cat in part1)
                {
                    Assert.AreEqual(cat.ProccessingAcct, report.Part1List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.ProccessingAcct)
                        .Single());
                    Assert.AreEqual(cat.StorageAcct, report.Part1List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.StorageAcct)
                        .Single());
                    Assert.AreEqual(cat.ProducedTotal, report.Part1List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.ProducedTotal)
                        .Single());
                    Assert.AreEqual(cat.Recd4RedistilaltionL15, report.Part1List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.Recd4RedistilaltionL15)
                        .Single());
                    Assert.AreEqual(cat.Recd4RedistilL17, report.Part1List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.Recd4RedistilL17)
                        .Single());
                    Assert.AreEqual(cat.UnfinishedSpiritsEndOfQuarterL17, report.Part1List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.UnfinishedSpiritsEndOfQuarterL17)
                        .Single());
                }
            }

            if (part2to4 != null)
            {
                foreach (var cat in part2to4)
                {
                    Assert.AreEqual(cat.KindOfMaterial, report.Part2Through4List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.KindOfMaterial)
                        .Single());
                    Assert.AreEqual(cat.ProofGallons, report.Part2Through4List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.ProofGallons)
                        .Single());
                    Assert.AreEqual(cat.MaterialKindReportingID, report.Part2Through4List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.MaterialKindReportingID)
                        .Single());
                    Assert.AreEqual(cat.NewCoop, report.Part2Through4List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.NewCoop)
                        .Single());
                    Assert.AreEqual(cat.UsedCoop, report.Part2Through4List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.UsedCoop)
                        .Single());
                    Assert.AreEqual(cat.Tanks, report.Part2Through4List
                        .Where(x => x.SpiritTypeReportingID == cat.SpiritTypeReportingID)
                        .Select(x => x.Tanks)
                        .Single());
                }
            }

            if (part5 != null)
            {
                foreach (var cat in part5)
                {
                    Assert.AreEqual(cat.Proof, part5.Where(x => x.KindofSpirits == cat.KindofSpirits).Select(x => x.Proof).Single());
                }
            }

            if (part6 != null)
            {
                foreach (var cat in part6)
                {
                    Assert.AreEqual(cat.Volume, report.ProdReportPart6List
                        .Where(x => x.KindOfMaterial == cat.KindOfMaterial)
                        .Where(x => x.ProdReportMaterialCategoryID == cat.ProdReportMaterialCategoryID)
                        .Select(x => x.Volume)
                        .Single());
                    Assert.AreEqual(cat.Weight, report.ProdReportPart6List
                        .Where(x => x.KindOfMaterial == cat.KindOfMaterial)
                        .Where(x => x.ProdReportMaterialCategoryID == cat.ProdReportMaterialCategoryID)
                        .Select(x => x.Weight)
                        .Single());
                }
            }
        }

        private void AssertProcessing(
            ProcessingReportingObject report,
            ReportHeader header,
            ProcessReportingPart1 part1 = null,
            ProcessReportingPart2 part2 = null,
            List<ProcessReportingPart4> part4 = null)
        {
            _header.ReportDate = header.ReportDate;
            AssertReportHeader(report.Header);

            if (part1 != null)
            {
                Assert.AreEqual(part1.BulkIngredients, report.Part1.BulkIngredients);
                Assert.AreEqual(part1.OnHandFirstofMonth, report.Part1.OnHandFirstofMonth);
                Assert.AreEqual(part1.Recd4Process, report.Part1.Recd4Process);
                Assert.AreEqual(part1.WineMixedWithSpirit, report.Part1.WineMixedWithSpirit);
                Assert.AreEqual(part1.Dumped4Processing, report.Part1.Dumped4Processing);
                Assert.AreEqual(part1.Gains, report.Part1.Gains);
                Assert.AreEqual(part1.AmtBottledPackaged, report.Part1.AmtBottledPackaged);
                Assert.AreEqual(part1.Transf2Prod4Redistil, report.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(part1.Destroyed, report.Part1.Destroyed);
                Assert.AreEqual(part1.Used4Redistil, report.Part1.Used4Redistil);
                Assert.AreEqual(part1.Losses, report.Part1.Losses);
                Assert.AreEqual(part1.OnHandEndofMonth, report.Part1.OnHandEndofMonth);
                Assert.AreEqual(part1.TotalLine8, report.Part1.TotalLine8);
                Assert.AreEqual(part1.TotalLine26, report.Part1.TotalLine26);
            }

            if(part2 != null)
            {
                Assert.AreEqual(part2.FinishedProduct, report.Part2.FinishedProduct);
                Assert.AreEqual(part2.OnHandFirstofMonth, report.Part2.OnHandFirstofMonth);
                Assert.AreEqual(part2.AmtBottledPackaged, report.Part2.AmtBottledPackaged);
                Assert.AreEqual(part2.Recd4Process, report.Part2.Recd4Process);
                Assert.AreEqual(part2.InventoryOverage, report.Part2.InventoryOverage);
                Assert.AreEqual(part2.Transf2Prod4Redistil, report.Part2.Transf2Prod4Redistil);
                Assert.AreEqual(part2.Destroyed, report.Part2.Destroyed);
                Assert.AreEqual(part2.Dumped4Processing, report.Part2.Dumped4Processing);
                Assert.AreEqual(part2.RecordedLosses, report.Part2.RecordedLosses);
                Assert.AreEqual(part2.InventoryOverage, report.Part2.InventoryOverage);
                Assert.AreEqual(part2.OnHandEndofMonth, report.Part2.OnHandEndofMonth);
                Assert.AreEqual(part2.TaxWithdrawn, report.Part2.TaxWithdrawn);
                Assert.AreEqual(part2.TotalLine31, report.Part2.TotalLine31);
                Assert.AreEqual(part2.TotalLine47, report.Part2.TotalLine47, "Processing Report Line 47 values do not match");
            }

            if(part4 != null)
            {
                foreach (var cat in part4)
                {
                    Assert.AreEqual(cat.AlcoholNeutral, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.AlcoholNeutral)
                        .Single());
                    Assert.AreEqual(cat.BlendedStraightWhiskey, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.BlendedStraightWhiskey)
                        .Single());
                    Assert.AreEqual(cat.BlendedWhiskeyWithNeutral, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.BlendedWhiskeyWithNeutral)
                        .Single());
                    Assert.AreEqual(cat.BlendedWhiskeyWithLight, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.BlendedWhiskeyWithLight)
                        .Single());
                    Assert.AreEqual(cat.BlendedLightWhiskey, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.BlendedLightWhiskey)
                        .Single());
                    Assert.AreEqual(cat.BlendedOtherWhiskey, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.BlendedOtherWhiskey)
                        .Single());
                    Assert.AreEqual(cat.ImportedWhiskeyScotch, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.ImportedWhiskeyScotch)
                        .Single());
                    Assert.AreEqual(cat.ImportedWhiskeyCanadian, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.ImportedWhiskeyCanadian)
                        .Single());
                    Assert.AreEqual(cat.ImportedWhiskeyIrish, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.ImportedWhiskeyIrish)
                        .Single());
                    Assert.AreEqual(cat.DomesticWhiskey160Under, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.DomesticWhiskey160Under)
                        .Single());
                    Assert.AreEqual(cat.DomesticWhiskeyOver160, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.DomesticWhiskeyOver160)
                        .Single());
                    Assert.AreEqual(cat.Brandy170Under, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.Brandy170Under)
                        .Single());
                    Assert.AreEqual(cat.BrandyOver170, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.BrandyOver170)
                        .Single());
                    Assert.AreEqual(cat.RumPuertoRican, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.RumPuertoRican)
                        .Single());
                    Assert.AreEqual(cat.RumVirginIslands, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.RumVirginIslands)
                        .Single());
                    Assert.AreEqual(cat.RumDomestic, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.RumDomestic)
                        .Single());
                    Assert.AreEqual(cat.RumOtherImported, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.RumOtherImported)
                        .Single());
                    Assert.AreEqual(cat.Gin, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.Gin)
                        .Single());
                    Assert.AreEqual(cat.Vodka, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.Vodka)
                        .Single());
                    Assert.AreEqual(cat.Liqueur, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.Liqueur)
                        .Single());
                    Assert.AreEqual(cat.Cocktail, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.Cocktail)
                        .Single());
                    Assert.AreEqual(cat.Tequila, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.Tequila)
                        .Single());
                    Assert.AreEqual(cat.ProcessingTypeID, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.ProcessingTypeID)
                        .Single());
                    Assert.AreEqual(cat.StateID, report.Part4List
                        .Where(x => x.ProcessingSpirits == cat.ProcessingSpirits)
                        .Select(x => x.StateID)
                        .Single());
                }
            }
        }

        /// <summary>
        /// Test backend validation which prevent user from creating purchase/production record that contains both weight and volume.
        /// 1) Create two puchase fermentable records, one with only volume and the other with only weight.
        /// 2) Create two produce fermentation recoreds, one with burning down volume purchase, the other with buring down weight purchase.
        /// 3) Assert that both purchase and both production records have been created.
        /// 4) Attempt to create a purchase record with both volume and weight and assert that System.Exception is thrown.
        /// 5) Attempt to create a production record with both volume and weight and asser that System.Exception is thrown.
        /// </summary>
        [TestMethod()]
        [ExpectedException(typeof(System.Exception), AllowDerivedTypes = true)]
        public void Purchase_and_Production_Weight_Volume_Validation()
        {
            // Arrange
            PurchaseFermentable(name: "GrapesByVolume",
                    date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                    volume: 1000f,
                    weight: 0f,
                    alcoholContent: 0f,
                    proof: 0f,
                    materialDictId: _rawMaterials["Grapes"].RawMaterialId,
                    price: 1f,
                    vendorId: _vendors["Vendor"].VendorId,
                    storageId: _storages["Storage"].StorageId);

            PurchaseFermentable(name: "GrapesByWeight",
                    date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                    volume: 0f,
                    weight: 1000f,
                    alcoholContent: 0f,
                    proof: 0f,
                    materialDictId: _rawMaterials["Grapes"].RawMaterialId,
                    price: 1f,
                    vendorId: _vendors["Vendor"].VendorId,
                    storageId: _storages["Storage"].StorageId);

            ProduceFerment(name: "WineByVolume",
                start: new DateTimeOffset(2018, 6, 2, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 6, 3, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 10f,
                proof: 20f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Other,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _purchases["GrapesByVolume"].PurchaseId,
                        OldVal = 500f,
                        NewVal = 0f,
                        DistillableOrigin = "pur",
                        BurningDownMethod = "volume"
                    }
                });

            ProduceFerment(name: "WineByWeight",
                start: new DateTimeOffset(2018, 6, 2, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 6, 3, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 10f,
                proof: 20f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Other,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _purchases["GrapesByWeight"].PurchaseId,
                        OldVal = 500f,
                        NewVal = 0f,
                        DistillableOrigin = "pur",
                        BurningDownMethod = "weight"
                    }
                });

            // Assert
            Assert.IsNotNull(_purchases["GrapesByVolume"].PurchaseId);
            Assert.IsNotNull(_purchases["GrapesByWeight"].PurchaseId);
            Assert.IsNotNull(_productions["WineByVolume"].ProductionId);
            Assert.IsNotNull(_productions["WineByWeight"].ProductionId);

            // Assert Exception is thrown when there's an attempt to create recrds with both weight and volume. 
            PurchaseFermentable(name: "GrapesByVolumeWeight",
                date: new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 1000f,
                weight: 1000f,
                alcoholContent: 0f,
                proof: 0f,
                materialDictId: _rawMaterials["Grapes"].RawMaterialId,
                price: 1f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            ProduceFerment(name: "WineByVolumeWeight",
                start: new DateTimeOffset(2018, 6, 2, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 6, 3, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 100f,
                alcoholContent: 10f,
                proof: 20f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Other,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                new ObjInfo4Burndwn {
                    ID = _purchases["GrapesByVolume"].PurchaseId,
                    OldVal = 100f,
                    NewVal = 0f,
                    DistillableOrigin = "pur",
                    BurningDownMethod = "volume"
                },
                new ObjInfo4Burndwn
                {
                    ID = _purchases["GrapesByWeight"].PurchaseId,
                    OldVal = 100f,
                    NewVal = 0f,
                    DistillableOrigin = "pur",
                    BurningDownMethod = "weight"
                }
                });
        }

        /// <summary>
        /// 1) Purchase(Fermentable): 4,753 lb on 11/2/2016
        /// 2) Production(Fermented): 640@11.5%147.2 on 11/5/2016
        /// 3) Production(Distilled): 350/640 of fermented batch for a total of 41.27@55%45.39 on 11/6/2016 to 11/29/2016
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_FermentIntoWine_DistillIntoBrandy()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Dictionary Arrange

                //  spirit
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // vendor
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "TheVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // storage
                StorageObject storage = new StorageObject();
                storage.StorageName = "TheStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // grapes
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Grapes";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "lb";
                    wineMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase Arrange
                // Grape purchase
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Grapes";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2016, 11, 2, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0;
                purchO.VolumeByWeight = 4753f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production Arrange
                // Fermentation
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Fermentation";
                prodO.ProductionDate = new DateTimeOffset(2016, 11, 5, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2016, 11, 5, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2016, 11, 5, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionType = "Fermentation";
                prodO.Gauged = true;
                prodO.Quantity = 640f;
                prodO.VolumeByWeight = 0;
                prodO.AlcoholContent = 11.5f;
                prodO.ProofGallon = 147.2f;
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 10; // other
                prodO.ProductionTypeId = 1;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = 4753f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // Distillation
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "Distillation";
                prodO2.ProductionDate = new DateTimeOffset(2016, 11, 6, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2016, 11, 6, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2016, 11, 29, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 11; // mixed
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.Quantity = 41.27f;
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 55f;
                prodO2.ProofGallon = 45.39f;
                prodO2.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 3; // BrandyUnder170
                prodO2.MaterialKindReportingID = 94;
                prodO2.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats4Gauge = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Gauged = new ObjInfo4Burndwn();
                uMat4Gauged.ID = productionId;
                uMat4Gauged.OldVal = 290f;
                uMat4Gauged.NewVal = 350f;
                uMat4Gauged.Proof = 66.7f;
                uMat4Gauged.DistillableOrigin = "prod";
                uMat4Gauged.BurningDownMethod = "volume";

                usedMats4Gauge.Add(uMat4Gauged);
                prodO2.UsedMats = usedMats4Gauge;

                productionId = _production.CreateProduction(prodO2, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act
                int octDays = DateTime.DaysInMonth(2016, 10);
                int novDays = DateTime.DaysInMonth(2016, 11);
                int decDays = DateTime.DaysInMonth(2016, 12);

                DateTimeOffset octStart = new DateTimeOffset(2016, 10, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset octEnd = new DateTimeOffset(2016, 10, octDays, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset novStart = new DateTimeOffset(2016, 11, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset novEnd = new DateTimeOffset(2016, 11, novDays, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset decStart = new DateTimeOffset(2016, 12, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset decEnd = new DateTimeOffset(2016, 12, decDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject octStorageReport = _storageReport.GetStorageReportData(octStart, octEnd, _userId);
                StorageReportObject novStorageReport = _storageReport.GetStorageReportData(novStart, novEnd, _userId);
                StorageReportObject decStorageReport = _storageReport.GetStorageReportData(decStart, decEnd, _userId);

                #endregion

                #region Assert

                // October
                Assert.AreEqual(0, octStorageReport.ReportBody.Count);

                // November
                Assert.AreEqual(3, novStorageReport.ReportBody.Count);
                Assert.IsTrue(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.IsTrue(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3)); // Category is Brandy170Under

                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(147.2f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(147.2f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(80.5f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(66.7f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(147.2f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(45.39f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(45.39f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(45.39f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(45.39f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r24_Lines7Through23).Single());

                // June
                Assert.AreEqual(3, decStorageReport.ReportBody.Count); // Totals plus two categories
                Assert.IsTrue(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.IsTrue(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3)); // Category is Other

                Assert.AreEqual(66.7f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(66.7f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(66.7f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(66.7f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                Assert.AreEqual(45.39f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(45.39f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(45.39f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(45.39f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r24_Lines7Through23).Single());

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1) Purchase Red Wine, 100@10%20 on 4/6/2016
        /// 2) Distill 30/100 of wine as other 15@50%15 on 7/8/2016
        /// 3) Distill 70/100 of wine as other 35@50%35 on 8/13/2016
        /// </summary>
        [TestMethod()]
        public void Buy_Wine_Partial_Distill_Plus_Three_Month_Partial_Distill_Plus_One_Month()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Dictionary Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "SpecialDistill";
                spirit.ProcessingReportTypeID = 20;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase Arrange
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Red Wine";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2016, 4, 6, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f;
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 10f;
                purchO.ProofGallon = 20f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 10;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production Arrange
                // create 1st Production Distillation Record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Distillation 1";
                prodO.ProductionDate = new DateTimeOffset(2016, 7, 8, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2016, 7, 8, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2016, 7, 8, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 15f;
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 50f;
                prodO.ProofGallon = 15f;
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 10; // other
                prodO.MaterialKindReportingID = 20; // CORDIALS, LIQUEURS, AND SPECIALTIES
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 70f;
                uMat.NewVal = 30f;
                uMat.Proof = 14f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "Distillation 2";
                prodO2.ProductionDate = new DateTimeOffset(2016, 8, 13, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2016, 8, 13, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2016, 8, 13, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 11; // mixed
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.Quantity = 35f;
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 50f;
                prodO2.ProofGallon = 35f;
                prodO2.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 10; // other
                prodO2.MaterialKindReportingID = 20; // CORDIALS, LIQUEURS, AND SPECIALTIES
                prodO2.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats4Gauge = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Gauged = new ObjInfo4Burndwn();
                uMat4Gauged.ID = purchaseId;
                uMat4Gauged.OldVal = 0f;
                uMat4Gauged.NewVal = 70f;
                uMat4Gauged.Proof = 0f;
                uMat4Gauged.DistillableOrigin = "pur";
                uMat4Gauged.BurningDownMethod = "volume";

                usedMats4Gauge.Add(uMat4Gauged);
                prodO2.UsedMats = usedMats4Gauge;

                productionId = _production.CreateProduction(prodO2, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act
                int aprDays = DateTime.DaysInMonth(2016, 4);
                int mayDays = DateTime.DaysInMonth(2016, 5);
                int juneDays = DateTime.DaysInMonth(2016, 6);
                int julyDays = DateTime.DaysInMonth(2016, 7);
                int augDays = DateTime.DaysInMonth(2016, 8);
                int sepDays = DateTime.DaysInMonth(2016, 9);

                DateTimeOffset aprStart = new DateTimeOffset(2016, 4, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset aprEnd = new DateTimeOffset(2016, 4, aprDays, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset mayStart = new DateTimeOffset(2016, 5, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset mayEnd = new DateTimeOffset(2016, 5, mayDays, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset juneStart = new DateTimeOffset(2016, 6, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset juneEnd = new DateTimeOffset(2016, 6, juneDays, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset julyStart = new DateTimeOffset(2016, 7, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset julyEnd = new DateTimeOffset(2016, 7, julyDays, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset augStart = new DateTimeOffset(2016, 8, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset augEnd = new DateTimeOffset(2016, 8, augDays, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset sepStart = new DateTimeOffset(2016, 9, 1, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset sepEnd = new DateTimeOffset(2016, 9, sepDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject aprStorageReport = _storageReport.GetStorageReportData(aprStart, aprEnd, _userId);
                StorageReportObject mayStorageReport = _storageReport.GetStorageReportData(mayStart, mayEnd, _userId);
                StorageReportObject juneStorageReport = _storageReport.GetStorageReportData(juneStart, juneEnd, _userId);
                StorageReportObject julyStorageReport = _storageReport.GetStorageReportData(julyStart, julyEnd, _userId);
                StorageReportObject augStorageReport = _storageReport.GetStorageReportData(augStart, augEnd, _userId);
                StorageReportObject sepStorageReport = _storageReport.GetStorageReportData(sepStart, sepEnd, _userId);

                #endregion

                #region Assert

                // April
                Assert.AreEqual(2, aprStorageReport.ReportBody.Count); // Totals plus one category
                Assert.IsTrue(aprStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(20f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(20f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(20f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(20f, aprStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // May
                Assert.AreEqual(2, mayStorageReport.ReportBody.Count); // Totals plus one category
                Assert.IsTrue(mayStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.AreEqual(20f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(20f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(20f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(20f, mayStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // June
                Assert.AreEqual(2, juneStorageReport.ReportBody.Count); // Totals plus one category
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.AreEqual(20f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(20f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(20f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(20f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // July
                Assert.AreEqual(2, julyStorageReport.ReportBody.Count); // Totals plus one category
                Assert.IsTrue(julyStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.AreEqual(20f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(15f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(35f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(6f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(29f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(35f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // August
                Assert.AreEqual(2, augStorageReport.ReportBody.Count); // Totals plus one category
                Assert.IsTrue(augStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.AreEqual(29f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(35f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(64f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(14f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(64f, augStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // September
                Assert.AreEqual(2, sepStorageReport.ReportBody.Count); // Totals plus one category
                Assert.IsTrue(sepStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10)); // Category is Other
                Assert.AreEqual(50f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(50f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(50f, sepStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        public float VerifyProof(float volumeInGallons, float alcoholContent, float proof)
        {
            if (volumeInGallons <= 0 && alcoholContent <= 0)
            {
                throw new ArgumentException("Invalid volume or alcohol content in argument.");
            }

            float calulatedProof = (volumeInGallons * alcoholContent * 2) / 100;

            if (calulatedProof != proof)
            {
                throw new ArgumentException("Invalid proof in argument.");
            }

            return proof;
        }

        /// <summary>
        /// This covers a full workflow test for Brandy Under 170
        /// </summary>
        [TestMethod()]
        public void Buy_Wine_Make_Brandy_Under_170_Test()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;
            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "test7Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 9f;
                purchO.ProofGallon = 18f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = false;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 80f; // 80pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record and mark it as Gauged
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "testGaugedDistillRun";
                prodO2.ProductionDate = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 9; // hearts
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.Quantity = 15f; // 15 gallons of alcohol
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 60f; // 60%
                prodO2.ProofGallon = 18f; // 18pfg
                prodO2.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 3; // brandy under 170
                prodO2.MaterialKindReportingID = 94; // grape brandy
                prodO2.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats4Gauge = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Gauged = new ObjInfo4Burndwn();
                uMat4Gauged.ID = productionId;
                uMat4Gauged.OldVal = 0f;
                uMat4Gauged.NewVal = prodO.Quantity;
                uMat4Gauged.DistillableOrigin = "prod";
                uMat4Gauged.BurningDownMethod = "volume";

                usedMats4Gauge.Add(uMat4Gauged);
                prodO2.UsedMats = usedMats4Gauge;

                productionId = _production.CreateProduction(prodO2, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "testProdBlend";
                prodBlend.ProductionDate = new DateTimeOffset(2017, 09, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2017, 09, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2017, 09, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 22.5f; // 22.5 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 40f; // 40%
                prodBlend.ProofGallon = 18f; // 18pfg
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = prodO2.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 7.5f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Bottling Record
                ProductionObject prodBottl = new ProductionObject();
                prodBottl.BatchName = "testProdBottling ";
                prodBottl.ProductionDate = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionStart = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionEnd = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.Gauged = true;
                prodBottl.ProductionType = "Bottling";
                prodBottl.Quantity = 22.39f; // 22.39 gallons of alcohol
                prodBottl.VolumeByWeight = 0f;
                prodBottl.AlcoholContent = 40f; // 40%
                prodBottl.ProofGallon = 17.9f; // 17.9 pfg
                prodBottl.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBottl.SpiritTypeReportingID = 3; // brandy under 170
                prodBottl.MaterialKindReportingID = 94; // grape brandy
                prodBottl.SpiritId = spiritId;
                prodO.ProductionTypeId = 4;

                List<ObjInfo4Burndwn> usedMats4Bottl = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Bottl = new ObjInfo4Burndwn();
                uMat4Bottl.ID = productionId;
                uMat4Bottl.OldVal = 0f;
                uMat4Bottl.NewVal = prodBlend.Quantity;
                uMat4Bottl.DistillableOrigin = "prod";
                uMat4Bottl.BurningDownMethod = "volume";

                usedMats4Bottl.Add(uMat4Bottl);
                prodBottl.UsedMats = usedMats4Bottl;

                BottlingObject bottlingObj = new BottlingObject();
                bottlingObj.CaseCapacity = 12;
                bottlingObj.CaseQuantity = 9.42f;
                bottlingObj.BottleCapacity = 750f;
                bottlingObj.BottleQuantity = 113;

                prodBottl.BottlingInfo = bottlingObj;

                prodBottl.GainLoss = -.10f;

                prodBottl.FillTestList = null;

                productionId = _production.CreateProduction(prodBottl, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                // reporting time range
                DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

                /* PRODUCTION REPORT */

                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 18f;
                part1E.ProducedTotal = 18f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 0f;
                part1E.StorageAcct = 0f;
                part1E.SpiritCatName = "BrandyUnder170";
                part1E.SpiritTypeReportingID = 3;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "GrapeBrandy";
                part2thru4.MaterialKindReportingID = 94;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 18f;
                part2thru4.SpiritTypeReportingID = 3;
                part2thru4.Tanks = false;


                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "";
                part5.Proof = 0f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();


                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                /* STORAGE REPORT */
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                StorageReportCategory storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "Wine";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 18f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0f;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 0f;
                storageReportBody.r24_Lines7Through23 = 18f;
                storageReportBody.r2_DepositedInBulkStorage = 18f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 18f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                /* PROCESING REPORT */
                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                ProcessReportingPart1 processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 18f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 0f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 18f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                ProcessReportingPart2 processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 18f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.FinishedProduct = "bottled";
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 17.9f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = .10f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;

                ProcessReportingPart4 processingReportP4 = new ProcessReportingPart4();
                processingReportP4.AlcoholNeutral = 0f;
                processingReportP4.BlendedLightWhiskey = 0f;
                processingReportP4.BlendedOtherWhiskey = 0f;
                processingReportP4.BlendedStraightWhiskey = 0f;
                processingReportP4.BlendedWhiskeyWithLight = 0f;
                processingReportP4.BlendedWhiskeyWithNeutral = 0f;
                processingReportP4.Brandy170Under = 22.39f;
                processingReportP4.BrandyOver170 = 0f;
                processingReportP4.Cocktail = 0f;
                processingReportP4.DomesticWhiskey160Under = 0f;
                processingReportP4.DomesticWhiskeyOver160 = 0f;
                processingReportP4.Gin = 0f;
                processingReportP4.ImportedWhiskeyCanadian = 0f;
                processingReportP4.ImportedWhiskeyIrish = 0f;
                processingReportP4.ImportedWhiskeyScotch = 0f;
                processingReportP4.Liqueur = 0f;
                processingReportP4.ProcessingReportTypeName = "BRANDY DISTILLED AT 170 AND UNDER";
                processingReportP4.ProcessingSpirits = "bottled";
                processingReportP4.ProcessingTypeID = 12;
                processingReportP4.RumDomestic = 0f;
                processingReportP4.RumOtherImported = 0f;
                processingReportP4.RumPuertoRican = 0f;
                processingReportP4.RumVirginIslands = 0f;
                processingReportP4.StateID = 5;
                processingReportP4.Tequila = 0f;
                processingReportP4.Vodka = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);
                #endregion

                // Assert

                #region Production Report

                Tuple<int, float> accumulatedProofGL4SpiritTypeReportingId = new Tuple<int, float>(11, purchO.ProofGallon);

                List<Tuple<int, float>> accumulatedProofGL4SpiritTypeReportingIdL = new List<Tuple<int, float>>();

                accumulatedProofGL4SpiritTypeReportingIdL.Add(accumulatedProofGL4SpiritTypeReportingId);

                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(0f, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                var expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                var actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(18f, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.SpiritCatName, actualProdReportObject.Part1List[0].SpiritCatName);
                Assert.AreEqual(part1E.SpiritTypeReportingID, actualProdReportObject.Part1List[0].SpiritTypeReportingID);
                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(part2thru4.KindOfMaterial, actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(part2thru4.MaterialKindReportingID, actualProdReportObject.Part2Through4List[0].MaterialKindReportingID);
                Assert.AreEqual(part2thru4.NewCoop, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(part2thru4.UsedCoop, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(part2thru4.ProofGallons, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(part2thru4.SpiritTypeReportingID, actualProdReportObject.Part2Through4List[0].SpiritTypeReportingID);
                Assert.AreEqual(part2thru4.Tanks, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18f, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no records should appear
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);
                #endregion

                #region Storage Report
                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body
                Assert.AreEqual(storageReportBody.CategoryName, actualStorageReportObject.ReportBody[0].CategoryName);
                Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, actualStorageReportObject.ReportBody[0].r17_TransferredToProcessingAccount);
                Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, actualStorageReportObject.ReportBody[0].r18_TransferredToProductionAccount);
                Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, actualStorageReportObject.ReportBody[0].r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, actualStorageReportObject.ReportBody[0].r1_OnHandFirstOfMonth);
                Assert.AreEqual(storageReportBody.r20_Destroyed, actualStorageReportObject.ReportBody[0].r20_Destroyed);
                Assert.AreEqual(storageReportBody.r22_OtherLosses, actualStorageReportObject.ReportBody[0].r22_OtherLosses);
                Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, actualStorageReportObject.ReportBody[0].r23_OnHandEndOfMonth);
                Assert.AreEqual(storageReportBody.r24_Lines7Through23, actualStorageReportObject.ReportBody[0].r24_Lines7Through23);
                Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, actualStorageReportObject.ReportBody[0].r2_DepositedInBulkStorage);
                Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, actualStorageReportObject.ReportBody[0].r4_ReturnedToBulkStorage);
                Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, actualStorageReportObject.ReportBody[0].r6_TotalLines1Through5);
                Assert.AreEqual(storageReportBody.r7_TaxPaid, actualStorageReportObject.ReportBody[0].r7_TaxPaid);

                #endregion

                #region Processing Report
                Assert.AreEqual(reportHeaderE.DSP, actualProcessingReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProcessingReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProcessingReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProcessingReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProcessingReportObject.Header.ReportDate);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.FinishedProduct, actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                Assert.AreEqual(processingReportP4.AlcoholNeutral, actualProcessingReportObject.Part4List[0].AlcoholNeutral);
                Assert.AreEqual(processingReportP4.BlendedLightWhiskey, actualProcessingReportObject.Part4List[0].BlendedLightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedOtherWhiskey, actualProcessingReportObject.Part4List[0].BlendedOtherWhiskey);
                Assert.AreEqual(processingReportP4.BlendedStraightWhiskey, actualProcessingReportObject.Part4List[0].BlendedStraightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithLight, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithLight);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithNeutral, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithNeutral);
                Assert.AreEqual(processingReportP4.Brandy170Under, actualProcessingReportObject.Part4List[1].Brandy170Under);
                Assert.AreEqual(processingReportP4.BrandyOver170, actualProcessingReportObject.Part4List[0].BrandyOver170);
                Assert.AreEqual(processingReportP4.Cocktail, actualProcessingReportObject.Part4List[0].Cocktail);
                Assert.AreEqual(processingReportP4.DomesticWhiskey160Under, actualProcessingReportObject.Part4List[0].DomesticWhiskey160Under);
                Assert.AreEqual(processingReportP4.DomesticWhiskeyOver160, actualProcessingReportObject.Part4List[0].DomesticWhiskeyOver160);
                Assert.AreEqual(processingReportP4.Gin, actualProcessingReportObject.Part4List[0].Gin);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyCanadian, actualProcessingReportObject.Part4List[0].ImportedWhiskeyCanadian);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyIrish, actualProcessingReportObject.Part4List[0].ImportedWhiskeyIrish);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyScotch, actualProcessingReportObject.Part4List[0].ImportedWhiskeyScotch);
                Assert.AreEqual(processingReportP4.Liqueur, actualProcessingReportObject.Part4List[0].Liqueur);
                Assert.AreEqual(processingReportP4.ProcessingReportTypeName, actualProcessingReportObject.Part4List[0].ProcessingReportTypeName);
                Assert.AreEqual(processingReportP4.ProcessingSpirits, actualProcessingReportObject.Part4List[1].ProcessingSpirits);
                Assert.AreEqual(processingReportP4.ProcessingTypeID, actualProcessingReportObject.Part4List[0].ProcessingTypeID);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumOtherImported, actualProcessingReportObject.Part4List[0].RumOtherImported);
                Assert.AreEqual(processingReportP4.RumPuertoRican, actualProcessingReportObject.Part4List[0].RumPuertoRican);
                Assert.AreEqual(processingReportP4.StateID, actualProcessingReportObject.Part4List[1].StateID);
                Assert.AreEqual(processingReportP4.Tequila, actualProcessingReportObject.Part4List[0].Tequila);
                Assert.AreEqual(processingReportP4.Vodka, actualProcessingReportObject.Part4List[0].Vodka);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Buy wine in November, distill once into Brandy Under 170, and blend with water in December.
        /// </summary>
        [TestMethod()]
        public void Buy_Wine_Distill_Brandy_Under_170_Blend_Test()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "test7Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 11, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 98f;
                purchO.ProofGallon = 196f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 1000f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 10;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // create 1st Production Distillation Record and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 100f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 98f; // 80%
                prodO.ProofGallon = 196f; // 80pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "testProdBlend";
                prodBlend.ProductionDate = new DateTimeOffset(2017, 12, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2017, 12, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2017, 12, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 100f;
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 49f;
                prodBlend.ProofGallon = 98f;
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = prodO.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 50f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act

                int octDays = DateTime.DaysInMonth(2017, 10);
                int novDays = DateTime.DaysInMonth(2017, 11);
                int decDays = DateTime.DaysInMonth(2017, 12);
                int janDays = DateTime.DaysInMonth(2018, 1);

                var octStart = new DateTimeOffset(2017, 10, 1, 0, 0, 0, TimeSpan.Zero);
                var octEnd = new DateTimeOffset(2017, 10, octDays, 0, 0, 0, TimeSpan.Zero);
                var novStart = new DateTimeOffset(2017, 11, 1, 0, 0, 0, TimeSpan.Zero);
                var novEnd = new DateTimeOffset(2017, 11, novDays, 0, 0, 0, TimeSpan.Zero);
                var decStart = new DateTimeOffset(2017, 12, 1, 0, 0, 0, TimeSpan.Zero);
                var decEnd = new DateTimeOffset(2017, 12, decDays, 0, 0, 0, TimeSpan.Zero);
                var janStart = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero);
                var janEnd = new DateTimeOffset(2017, 1, janDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject octStorageReport = _storageReport.GetStorageReportData(octStart, octEnd, _userId);
                StorageReportObject novStorageReport = _storageReport.GetStorageReportData(novStart, novEnd, _userId);
                StorageReportObject decStorageReport = _storageReport.GetStorageReportData(decStart, decEnd, _userId);
                StorageReportObject janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);

                #endregion

                #region Assert

                // October 2016
                Assert.AreEqual(0, octStorageReport.ReportBody.Count);

                // November 2016 Storage Report

                // Only totals, "Brandy Distilled at 170, and under" AND "Other" records are generated
                Assert.AreEqual(3, novStorageReport.ReportBody.Count);
                Assert.IsTrue(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsTrue(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsFalse(novStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // Brandy Distilled at 170 and under
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r24_Lines7Through23).Single());

                // OTHER
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(0f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(196f, novStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // December 2016 Storage Report

                // Only totals and "Brandy Distilled at 170 and under" records generated
                Assert.AreEqual(2, decStorageReport.ReportBody.Count);
                Assert.IsTrue(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));

                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(decStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // Brandy Distilled at 170 and under
                Assert.AreEqual(196f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(196f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(196f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(0f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(196f, decStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 3).Select(x => x.r24_Lines7Through23).Single());

                // January 2017
                Assert.AreEqual(0, janStorageReport.ReportBody.Count);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }



        /// <summary>
        /// 1. Purchase Fermented Grape Pomace on 3/6/18 - 2000 lbs
        /// 2. Distill 1000 lbs to produce 55 gallons at 50% ABV on 4/6/18
        /// 3. Blend that with 10 gallons of water on 5/6/18 to produce 55 gallons of 43% ABV
        /// 4. Bottle blended batch on 5/7/18
        /// </summary>
        [TestMethod()]
        public void BuyPomace_DistillBrandy_Blend_Test()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int rawMaterialPomaceId = 0;
            int rawMaterialWaterId = 0;
            int pomacePurchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange Step 1
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                VendorObject vendor = new VendorObject();
                vendor.VendorName = "Vendor#1";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                StorageObject storage = new StorageObject();
                storage.StorageName = "Storage#1";
                storage.SerialNumber = "1A2B3C4D";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // Fermented Pomace
                {
                    RawMaterialObject fermentedPomace = new RawMaterialObject();
                    fermentedPomace.RawMaterialName = "Grape Pomace";
                    fermentedPomace.MaterialCategoryID = 2;
                    fermentedPomace.UnitType = "lbs";
                    fermentedPomace.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    fermentedPomace.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialPomaceId = _dictionary.CreateRawMaterial(_userId, fermentedPomace);
                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialPomaceId, Table.MaterialDict));
                }

                // Water
                {
                    RawMaterialObject water = new RawMaterialObject();
                    water.RawMaterialName = "Water";
                    water.UnitType = "gal";
                    water.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    water.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialWaterId = _dictionary.CreateRawMaterial(_userId, water);
                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialWaterId, Table.MaterialDict));
                }

                // 1. Purchase Fermented Grape Pomace on 3/6/18 - 2000 lbs
                PurchaseObject pomacePurchase = new PurchaseObject();
                pomacePurchase.PurBatchName = "Fermented Pomace";
                pomacePurchase.PurchaseType = "Fermented";
                pomacePurchase.PurchaseDate = new DateTimeOffset(2018, 3, 6, 0, 0, 0, TimeSpan.Zero);
                pomacePurchase.Quantity = 0f;
                pomacePurchase.VolumeByWeight = 2000f; // 2000 lbs
                pomacePurchase.AlcoholContent = 0f;
                pomacePurchase.ProofGallon = 0f;
                pomacePurchase.RecordId = rawMaterialPomaceId;
                pomacePurchase.Price = 1000f;
                pomacePurchase.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                pomacePurchase.Storage = storageList;

                pomacePurchase.SpiritTypeReportingID = 10;
                pomacePurchase.Gauged = true;

                pomacePurchaseId = _purchase.CreatePurchase(pomacePurchase, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(pomacePurchaseId, Table.Purchase));

                // 2. Distill 1000 lbs to produce 55 gallons at 50% ABV on 4/6/18
                ProductionObject brandyProduction = new ProductionObject();
                brandyProduction.BatchName = "Brandy Distillation";
                brandyProduction.ProductionDate = new DateTimeOffset(2018, 4, 6, 0, 0, 0, TimeSpan.Zero);
                brandyProduction.ProductionStart = new DateTimeOffset(2018, 4, 6, 0, 0, 0, TimeSpan.Zero);
                brandyProduction.ProductionEnd = new DateTimeOffset(2018, 4, 6, 0, 0, 0, TimeSpan.Zero);
                brandyProduction.SpiritCutId = 11; // mixed
                brandyProduction.Gauged = true;
                brandyProduction.ProductionType = "Distillation";
                brandyProduction.Quantity = 55f; // 55 gallons of alcohol
                brandyProduction.VolumeByWeight = 0f;
                brandyProduction.AlcoholContent = 50f; // 50%
                brandyProduction.ProofGallon = 55f; // 55pfg
                brandyProduction.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                brandyProduction.SpiritTypeReportingID = 3; // brandy under 170
                brandyProduction.MaterialKindReportingID = 94; // grape brandy
                brandyProduction.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = pomacePurchaseId;
                uMat.OldVal = pomacePurchase.Quantity / 2;
                uMat.NewVal = pomacePurchase.Quantity / 2;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                brandyProduction.UsedMats = usedMats;

                productionId = _production.CreateProduction(brandyProduction, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // 3. Blend that with 10 gallons of water on 5/6/18 to produce 55 gallons of 43% ABV
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "Blended Brandy";
                prodBlend.ProductionDate = new DateTimeOffset(2018, 5, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2018, 5, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2018, 5, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 55f; // 55 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.GainLoss = -7.7f;
                prodBlend.AlcoholContent = 43f; // 43%
                prodBlend.ProofGallon = 47.3f; // 47.3 pfg
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = brandyProduction.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = rawMaterialWaterId;
                blendAd.RawMaterialQuantity = 10f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act Step 1

                int marDays = DateTime.DaysInMonth(2018, 3);
                int aprDays = DateTime.DaysInMonth(2018, 4);
                int mayDays = DateTime.DaysInMonth(2018, 5);
                int juneDays = DateTime.DaysInMonth(2018, 6);

                var marStart = new DateTimeOffset(2018, 3, 1, 0, 0, 0, TimeSpan.Zero);
                var marEnd = new DateTimeOffset(2018, 3, marDays, 0, 0, 0, TimeSpan.Zero);

                var aprStart = new DateTimeOffset(2018, 4, 1, 0, 0, 0, TimeSpan.Zero);
                var aprEnd = new DateTimeOffset(2018, 4, aprDays, 0, 0, 0, TimeSpan.Zero);

                var mayStart = new DateTimeOffset(2018, 5, 1, 0, 0, 0, TimeSpan.Zero);
                var mayEnd = new DateTimeOffset(2018, 5, mayDays, 0, 0, 0, TimeSpan.Zero);

                var juneStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                var juneEnd = new DateTimeOffset(2018, 6, juneDays, 0, 0, 0, TimeSpan.Zero);

                var marProcessingReport = _processingReport.GetProcessingReportData(marStart, marEnd, _userId);
                var aprProcessingReport = _processingReport.GetProcessingReportData(aprStart, aprEnd, _userId);
                var mayProcessingReport = _processingReport.GetProcessingReportData(mayStart, mayEnd, _userId);
                var juneProcessingReport = _processingReport.GetProcessingReportData(juneStart, juneEnd, _userId);

                #endregion

                #region Assert Step 1

                // March 2018

                // Processing Report Part 1
                Assert.AreEqual(0f, marProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", marProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, marProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, marProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, marProcessingReport.Part1.Gains);
                Assert.AreEqual(0f, marProcessingReport.Part1.Losses);
                Assert.AreEqual(0f, marProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, marProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, marProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, marProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, marProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, marProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(0f, marProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, marProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, marProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", marProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, marProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, marProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(0f, marProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, marProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, marProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(0f, marProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, marProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, marProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(0, marProcessingReport.Part4List.Count);

                // April 2018

                // Processing Report Part 1
                Assert.AreEqual(0f, aprProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", aprProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, aprProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, aprProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, aprProcessingReport.Part1.Gains);
                Assert.AreEqual(0f, aprProcessingReport.Part1.Losses);
                Assert.AreEqual(0f, aprProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, aprProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, aprProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, aprProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, aprProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, aprProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(0f, aprProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, aprProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, aprProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", aprProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, aprProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, aprProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(0f, aprProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, aprProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, aprProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(0f, aprProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, aprProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, aprProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(0, aprProcessingReport.Part4List.Count);

                // May 2018

                // Processing Report Part 1
                Assert.AreEqual(0f, mayProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", mayProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, mayProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, mayProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, mayProcessingReport.Part1.Gains);
                Assert.AreEqual(7.7f, mayProcessingReport.Part1.Losses);
                Assert.AreEqual(47.3f, mayProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, mayProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(55f, mayProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, mayProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, mayProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, mayProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(0f, mayProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, mayProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, mayProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", mayProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, mayProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, mayProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(0f, mayProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, mayProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, mayProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(0f, mayProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, mayProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, mayProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(1, mayProcessingReport.Part4List.Count);
                Assert.IsTrue(mayProcessingReport.Part4List.Exists(x => x.ProcessingSpirits == "bulkSpiritDumped"));
                Assert.AreEqual(47.3f, mayProcessingReport.Part4List.Where(x => x.ProcessingSpirits == "bulkSpiritDumped").Select(x => x.Brandy170Under).Single());
                Assert.AreEqual("BRANDY DISTILLED AT 170 AND UNDER", mayProcessingReport.Part4List.Where(x => x.ProcessingSpirits == "bulkSpiritDumped").Select(x => x.ProcessingReportTypeName).Single());

                // June 2018

                // Processing Report Part 1
                Assert.AreEqual(0f, juneProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", juneProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, juneProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, juneProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, juneProcessingReport.Part1.Gains);
                Assert.AreEqual(0f, juneProcessingReport.Part1.Losses);
                Assert.AreEqual(47.3f, juneProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(47.3f, juneProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, juneProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, juneProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, juneProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, juneProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(0f, juneProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, juneProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, juneProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", juneProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, juneProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, juneProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(0f, juneProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, juneProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, juneProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(0f, juneProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, juneProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, juneProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(0, juneProcessingReport.Part4List.Count);

                #endregion

                #region Arrange Step 2

                /// 4. Bottle blended batch on 5/7/18
                ProductionObject prodBottl = new ProductionObject();
                prodBottl.BatchName = "Brandy Under 170 Bottling";
                prodBottl.ProductionDate = new DateTimeOffset(2018, 5, 7, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionStart = new DateTimeOffset(2018, 5, 7, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionEnd = new DateTimeOffset(2018, 5, 7, 0, 0, 0, TimeSpan.Zero);
                prodBottl.Gauged = true;
                prodBottl.ProductionType = "Bottling";
                prodBottl.Quantity = 53.49f; // 53.49 gallons of alcohol
                prodBottl.VolumeByWeight = 0f;
                prodBottl.AlcoholContent = 43f; // 43%
                prodBottl.ProofGallon = 46f; // 46 pfg
                prodBottl.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBottl.SpiritTypeReportingID = 3; // Brandy
                prodBottl.SpiritId = spiritId;
                prodBottl.ProductionTypeId = 4;

                List<ObjInfo4Burndwn> usedMats4Bottl = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Bottl = new ObjInfo4Burndwn();
                uMat4Bottl.ID = productionId;
                uMat4Bottl.OldVal = 0f;
                uMat4Bottl.NewVal = prodBlend.Quantity;
                uMat4Bottl.DistillableOrigin = "prod";
                uMat4Bottl.BurningDownMethod = "volume";

                usedMats4Bottl.Add(uMat4Bottl);
                prodBottl.UsedMats = usedMats4Bottl;

                BottlingObject bottlingObj = new BottlingObject();
                bottlingObj.CaseCapacity = 6;
                bottlingObj.CaseQuantity = 45f; // Should be int instead of float?
                bottlingObj.BottleCapacity = 750f;
                bottlingObj.BottleQuantity = 270;

                prodBottl.BottlingInfo = bottlingObj;

                prodBottl.GainLoss = -1.3f; // Add comment on what this value is in definition

                prodBottl.FillTestList = null;

                productionId = _production.CreateProduction(prodBottl, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act Step 2

                var marAfterBottlingProcessingReport = _processingReport.GetProcessingReportData(marStart, marEnd, _userId);
                var aprAfterBottlingProcessingReport = _processingReport.GetProcessingReportData(aprStart, aprEnd, _userId);
                var mayAfterBottlingProcessingReport = _processingReport.GetProcessingReportData(mayStart, mayEnd, _userId);
                var juneAfterBottlingProcessingReport = _processingReport.GetProcessingReportData(juneStart, juneEnd, _userId);

                #endregion

                #region Assert Step 2

                // March 2018

                // Processing Report Part 1
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", marAfterBottlingProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.Gains);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.Losses);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", marAfterBottlingProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, marAfterBottlingProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(0, marAfterBottlingProcessingReport.Part4List.Count);

                // April 2018

                // Processing Report Part 1
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", aprAfterBottlingProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.Gains);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.Losses);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", aprAfterBottlingProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, aprAfterBottlingProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(0, aprAfterBottlingProcessingReport.Part4List.Count);

                // May 2018

                // Processing Report Part 1
                Assert.AreEqual(47.3f, mayAfterBottlingProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", mayAfterBottlingProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.Gains);
                Assert.AreEqual(7.7f, mayAfterBottlingProcessingReport.Part1.Losses);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(55f, mayAfterBottlingProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(47.3f, mayAfterBottlingProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", mayAfterBottlingProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(46f, mayAfterBottlingProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(1.3f, mayAfterBottlingProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, mayAfterBottlingProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(2, mayAfterBottlingProcessingReport.Part4List.Count);
                Assert.IsTrue(mayAfterBottlingProcessingReport.Part4List.Exists(x => x.ProcessingSpirits == "bulkSpiritDumped"));
                Assert.IsTrue(mayAfterBottlingProcessingReport.Part4List.Exists(x => x.ProcessingSpirits == "bottled"));
                Assert.AreEqual("BRANDY DISTILLED AT 170 AND UNDER", mayAfterBottlingProcessingReport.Part4List.Where(x => x.ProcessingSpirits == "bulkSpiritDumped").Select(x => x.ProcessingReportTypeName).Single());
                Assert.AreEqual("BRANDY DISTILLED AT 170 AND UNDER", mayAfterBottlingProcessingReport.Part4List.Where(x => x.ProcessingSpirits == "bottled").Select(x => x.ProcessingReportTypeName).Single());
                Assert.AreEqual(47.3f, mayAfterBottlingProcessingReport.Part4List.Where(x => x.ProcessingSpirits == "bulkSpiritDumped").Select(x => x.Brandy170Under).Single());
                Assert.AreEqual(53.49f, mayAfterBottlingProcessingReport.Part4List.Where(x => x.ProcessingSpirits == "bottled").Select(x => x.Brandy170Under).Single());

                // June 2018

                // Processing Report Part 1
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", juneAfterBottlingProcessingReport.Part1.BulkIngredients);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.Destroyed);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.Dumped4Processing);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.Gains);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.Losses);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.Recd4Process);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.Used4Redistil);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part1.WineMixedWithSpirit);

                // Processing Report Part 2
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.Destroyed);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", juneAfterBottlingProcessingReport.Part2.FinishedProduct);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.InventoryOverage);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.InventoryShortage);
                Assert.AreEqual(46f, juneAfterBottlingProcessingReport.Part2.OnHandEndofMonth);
                Assert.AreEqual(46f, juneAfterBottlingProcessingReport.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.Recd4Process);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.RecordedLosses);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, juneAfterBottlingProcessingReport.Part2.Transf2Prod4Redistil);

                // Processing Report Part 4
                Assert.AreEqual(0, juneAfterBottlingProcessingReport.Part4List.Count);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Test Processing Report part 4, column b (BULK SPIRITS DUMPED INTO PROCESSING (Whole proof gallons))
        /// </summary>
        [TestMethod()]
        public void PurchaseDistilled_Blend_GenerateProcessingReport()
        {
            // A tuple to log database test records for later clean-up
            List<Tuple<int, Table>> testRecords = new List<Tuple<int, Table>>();

            try
            {
                // Arrange

                // Create Spirit dictionary item
                SpiritObject spirit = new SpiritObject
                {
                    SpiritName = "VODKA-4tUTav",
                    ProcessingReportTypeID = 19
                };

                int spiritId =_dictionary.CreateSpirit(_userId, spirit);
                testRecords.Add(Tuple.Create(spiritId, Table.Spirit));

                // Create Raw Material dictionary item
                RawMaterialObject rawMaterial = new RawMaterialObject
                {
                    RawMaterialName = "TestMaterial-4tUTav",
                    PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Distilled = true },
                    UnitTypeId = 1,
                    UnitType = "gal"
                };

                int rawMaterialId = _dictionary.CreateRawMaterial(_userId, rawMaterial);
                testRecords.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));

                // Create Vendor dictionary item
                VendorObject vendor = new VendorObject
                {
                    VendorName = "TestVendor-4tUTav"
                };

                int vendorId = _dictionary.CreateVendor(_userId, vendor);
                testRecords.Add(Tuple.Create(vendorId, Table.Vendor));

                // Create Storage dictionary item
                StorageObject storage = new StorageObject
                {
                    StorageName = "TestStorage-4tUTav"
                };

                int storageId = _dictionary.CreateStorage(_userId, storage);
                testRecords.Add(Tuple.Create(storageId, Table.Storage));

                // Create Distilled Purchase record
                PurchaseObject purchase = new PurchaseObject
                {
                    PurBatchName = "TestPurchase-4tUTav",
                    PurchaseType = "Distilled",
                    PurchaseDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    Quantity = 100f,
                    AlcoholContent = 50f,
                    ProofGallon = 100f,
                    RecordId = rawMaterialId,
                    Price = 500f,
                    VendorId = vendorId,
                    Gauged = true,
                    SpiritTypeReportingID = 7,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    }
                };

                int purchaseId = _purchase.CreatePurchase(purchase, _userId);
                testRecords.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Create Production Blending record
                ProductionObject production = new ProductionObject
                {
                    BatchName = "TestBlending-4tUTav",
                    ProductionDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Blending",
                    Quantity = 110f,
                    AlcoholContent = 40f,
                    ProofGallon = 88f,
                    SpiritTypeReportingID = 7,
                    ProductionTypeId = 3,
                    SpiritId = spiritId,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    },
                    UsedMats = new List<ObjInfo4Burndwn>
                    {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            OldVal = 0f,
                            NewVal = purchase.Quantity,
                            DistillableOrigin = "pur",
                            BurningDownMethod = "volume"
                        }
                    }
                };

                int productionId = _production.CreateProduction(production, _userId);
                testRecords.Add(Tuple.Create(productionId, Table.Production));

                // Act

                // Generate Processing Report
                ProcessingReportingObject report = _processingReport.GetProcessingReportData(new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2017, 1, 31, 0, 0, 0, TimeSpan.Zero), _userId);

                // Assert
                var actual = report.Part4List.Find(x => x.ProcessingReportTypeName == "VODKA" && x.ProcessingSpirits == "bulkSpiritDumped").Vodka;
                Assert.IsTrue(report.Part4List.Any());
                // Blended Production had a quantity of 88 proof gallons
                Assert.AreEqual(88, actual);
            }
            finally
            {
                // Perform table cleanup
                foreach (var rec in testRecords)
                {
                    TestRecordCleanup(rec.Item1, rec.Item2);
                }
            }
        }

        /// <summary>
        /// Test for validation bug tracked in task 1690.
        /// Bug: The proof values in column b of Processing Report are removed when bottling a blended batch.
        /// </summary>
        /// 
        [TestMethod]
        public void PurchaseDistilled_Blend_Bottle()
        {
            // A tuple to log database test records for later clean-up
            List<Tuple<int, Table>> testRecords = new List<Tuple<int, Table>>();

            try
            {
                // Arrange

                // Create Spirit dictionary item
                SpiritObject spirit = new SpiritObject
                {
                    SpiritName = "GIN",
                    ProcessingReportTypeID = 18 // GIN
                };

                int spiritId =_dictionary.CreateSpirit(_userId, spirit);
                testRecords.Add(Tuple.Create(spiritId, Table.Spirit));

                // Create Raw Material dictionary item
                RawMaterialObject rawMaterial = new RawMaterialObject
                {
                    RawMaterialName = "GNS",
                    PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Distilled = true },
                    UnitTypeId = 2, // lb
                    UnitType = "lb",
                    MaterialCategoryID = 1 // grain
                };

                int rawMaterialId = _dictionary.CreateRawMaterial(_userId, rawMaterial);
                testRecords.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));

                // Create Vendor dictionary item
                VendorObject vendor = new VendorObject
                {
                    VendorName = "BigGrainsDistillery"
                };

                int vendorId = _dictionary.CreateVendor(_userId, vendor);
                testRecords.Add(Tuple.Create(vendorId, Table.Vendor));

                // Create Storage dictionary item
                StorageObject storage = new StorageObject
                {
                    StorageName = "ThaTank"
                };

                int storageId = _dictionary.CreateStorage(_userId, storage);
                testRecords.Add(Tuple.Create(storageId, Table.Storage));

                // Distilled purchase
                PurchaseObject purchase = new PurchaseObject
                {
                    PurBatchName = "GNS Gin",
                    PurchaseType = "Distilled",
                    PurchaseDate = new DateTimeOffset(2017, 11, 1, 0, 0, 0, TimeSpan.Zero),
                    VolumeByWeight = 1000f,
                    AlcoholContent = 75f,
                    ProofGallon = 100f,
                    RecordId = rawMaterialId,
                    Price = 2000f,
                    VendorId = vendorId,
                    Gauged = true,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    }
                };

                int purchaseId = _purchase.CreatePurchase(purchase, _userId);
                testRecords.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Blend and gauge
                ProductionObject blending = new ProductionObject
                {
                    BatchName = "Gin blending",
                    ProductionDate = new DateTimeOffset(2017, 11, 2, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2017, 11, 2, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2017, 11, 2, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Blending",
                    VolumeByWeight = 100f,
                    AlcoholContent = 37.5f,
                    ProofGallon = 100f,
                    SpiritTypeReportingID = 6, // Gin
                    ProductionTypeId = 3, // Blending
                    SpiritId = spiritId,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    },
                    UsedMats = new List<ObjInfo4Burndwn>
                    {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            OldVal = 0f,
                            NewVal = purchase.VolumeByWeight,
                            DistillableOrigin = "pur",
                            BurningDownMethod = "weight"
                        }
                    }
                };

                int productionId1 = _production.CreateProduction(blending, _userId);
                testRecords.Add(Tuple.Create(productionId1, Table.Production));

                // Bottle
                ProductionObject bottling = new ProductionObject
                {
                    BatchName = "Gin bottling",
                    ProductionDate = new DateTimeOffset(2017, 11, 2, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2017, 11, 2, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2017, 11, 2, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Bottling",
                    Quantity = 11.89f,
                    AlcoholContent = 37.5f,
                    ProofGallon = 8.91f,
                    SpiritTypeReportingID = 6, // Gin
                    ProductionTypeId = 3, // Blending
                    SpiritId = spiritId,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    },
                    UsedMats = new List<ObjInfo4Burndwn>
                    {
                        new ObjInfo4Burndwn
                        {
                            ID = productionId1,
                            OldVal = 0f,
                            NewVal = blending.VolumeByWeight,
                            DistillableOrigin = "prod",
                            BurningDownMethod = "weight"
                        }
                    }
                };

                int productionId2 = _production.CreateProduction(bottling, _userId);
                testRecords.Add(Tuple.Create(productionId2, Table.Production));

                // Act

                // Generate Processing Report
                ProcessingReportingObject report = _processingReport.GetProcessingReportData(new DateTimeOffset(2017, 11, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2017, 11, 30, 0, 0, 0, TimeSpan.Zero), _userId);

                // Assert
                Assert.IsNotNull(report);
                Assert.IsNotNull(report.Header);
                Assert.IsTrue(report.Part4List.Count() > 0);
                Assert.IsTrue(report.Part4List.Exists(x => x.ProcessingSpirits == "bulkSpiritDumped" && x.Gin == 100f));
                Assert.IsTrue(report.Part4List.Exists(x => x.ProcessingSpirits == "bottled" && x.Gin == 11.89f));
            }
            finally
            {
                // Perform table cleanup
                foreach (var rec in testRecords)
                {
                    TestRecordCleanup(rec.Item1, rec.Item2);
                }
            }
        }

        /// <summary>
        /// Fermented pomace purchase workflow
        /// Buy Pomace and Distil Once
        /// </summary>
        [TestMethod()]
        public void BuyFermentedPomace_Distill_Redistill()
        {
            // A tuple to log database test records for later clean-up
            List<Tuple<int, Table>> testRecords = new List<Tuple<int, Table>>();

            try
            {
                // Arrange

                // Create Spirit dictionary item
                SpiritObject spirit = new SpiritObject
                {
                    SpiritName = "PomaceBrandy",
                    ProcessingReportTypeID = 12 // BRANDY DISTILLED AT 170 AND UNDER
                };

                int spiritId =_dictionary.CreateSpirit(_userId, spirit);
                testRecords.Add(Tuple.Create(spiritId, Table.Spirit));

                // Create Raw Material dictionary item
                RawMaterialObject rawMaterial = new RawMaterialObject
                {
                    RawMaterialName = "FermentedPomace",
                    PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Fermented = true },
                    UnitTypeId = 2,
                    MaterialCategoryID = 2,
                    UnitType = "lb"
                };

                int rawMaterialId = _dictionary.CreateRawMaterial(_userId, rawMaterial);
                testRecords.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));

                // Create Vendor dictionary item
                VendorObject vendor = new VendorObject
                {
                    VendorName = "BigGrapesWinery"
                };

                int vendorId = _dictionary.CreateVendor(_userId, vendor);
                testRecords.Add(Tuple.Create(vendorId, Table.Vendor));

                // Create Storage dictionary item
                StorageObject storage = new StorageObject
                {
                    StorageName = "TheTank"
                };

                int storageId = _dictionary.CreateStorage(_userId, storage);
                testRecords.Add(Tuple.Create(storageId, Table.Storage));

                // Create Fermented Purchase record
                PurchaseObject purchase = new PurchaseObject
                {
                    PurBatchName = "FermentedPomaceFromBigGrapesWinery",
                    PurchaseType = "Fermented",
                    PurchaseDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    VolumeByWeight = 1000f,
                    RecordId = rawMaterialId,
                    Price = 2000f,
                    VendorId = vendorId,
                    Gauged = true,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    }
                };

                int purchaseId = _purchase.CreatePurchase(purchase, _userId);
                testRecords.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Create Production Distillation record and Gauged to true
                ProductionObject production = new ProductionObject
                {
                    BatchName = "PomaceDistillation",
                    ProductionDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Distillation",
                    Quantity = 100f,
                    AlcoholContent = 50f,
                    ProofGallon = 100f,
                    SpiritTypeReportingID = 3, // Brandy Under 170
                    ProductionTypeId = 2,
                    SpiritId = spiritId,
                    SpiritCutId = 11, // mixed
                    MaterialKindReportingID = 95, // All Other Brandy
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    },
                    UsedMats = new List<ObjInfo4Burndwn>
                    {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            OldVal = 0f,
                            NewVal = purchase.VolumeByWeight,
                            DistillableOrigin = "pur",
                            BurningDownMethod = "weight"
                        }
                    }
                };

                int productionId = _production.CreateProduction(production, _userId);
                testRecords.Add(Tuple.Create(productionId, Table.Production));

                // Act

                // Generate Storage Report
                StorageReportObject storageReport = _storageReport.GetStorageReportData(new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2017, 1, 31, 0, 0, 0, TimeSpan.Zero), _userId);

                // Generate Production Report
                ProductionReportingObject productionReport = _productionReport.GetProductionReportData(new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2017, 1, 31, 0, 0, 0, TimeSpan.Zero), _userId);

                // Assert

                // storage report should contain only category named "BrandyUnder170" and totals
                Assert.AreEqual(2, storageReport.ReportBody.Count);
                Assert.AreEqual("BrandyUnder170", storageReport.ReportBody.First().CategoryName);
                Assert.AreEqual(100F, storageReport.ReportBody.First().r2_DepositedInBulkStorage);

                // production report should contain three categories: Part1List, Part2Through4List, Part6
                Assert.AreEqual(2, productionReport.Part1List.Count);
                Assert.AreEqual("BrandyUnder170", productionReport.Part1List.First().SpiritCatName);
                Assert.AreEqual(100F, productionReport.Part1List.First().ProducedTotal);
                Assert.AreEqual(1, productionReport.Part2Through4List.Count);
                Assert.AreEqual("AllOtherBrandy", productionReport.Part2Through4List.First().KindOfMaterial);
                Assert.AreEqual(100F, productionReport.Part2Through4List.First().ProofGallons);
                Assert.AreEqual(1, productionReport.ProdReportPart6List.Count);
                Assert.AreEqual("FermentedPomace", productionReport.ProdReportPart6List.First().KindOfMaterial);
                Assert.AreEqual(1000F, productionReport.ProdReportPart6List.First().Weight);
            }
            finally
            {
                // Perform table cleanup
                foreach (var rec in testRecords)
                {
                    TestRecordCleanup(rec.Item1, rec.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 196(100@98) proof gallons of GNS on 1/1/2017
        /// 2. Redistill half of purchased GNS, 98(50@98) proof gallons as GIN on 1/2/2017
        /// 3. Blend the GIN batch with 50 gallons of additive for a total of 98(100@49) proof gallons on 2/1/2017
        /// </summary>
        [TestMethod()]
        public void BuyGNS_RedistilHalfIntoGin_BlendWithWater()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                {
                    RawMaterialObject gnsMaterial = new RawMaterialObject();
                    gnsMaterial.RawMaterialName = "GNS for GIN";
                    gnsMaterial.UnitType = "gal";
                    gnsMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Distilled = true;
                    gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 98f;
                purchO.ProofGallon = 196f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Redistil GNS into GIN and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "RedistilledGns";
                prodO.ProductionDate = new DateTimeOffset(2017, 1, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 1, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 1, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; // 50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 98f; // 98%
                prodO.ProofGallon = 98f; // 98 pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 6; // Gin
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 50f;
                uMat.NewVal = 50f;
                uMat.Proof = 98f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "Gin";
                prodBlend.ProductionDate = new DateTimeOffset(2017, 2, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2017, 2, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2017, 2, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 100f; // 100 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 49f; // 49%
                prodBlend.ProofGallon = 98f; // 98pfg
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 6; // GIN
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = 50f;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 50f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act

                int decDays = DateTime.DaysInMonth(2016, 12);
                int janDays = DateTime.DaysInMonth(2017, 1);
                int febDays = DateTime.DaysInMonth(2017, 2);
                int marDays = DateTime.DaysInMonth(2017, 3);

                var decStart = new DateTimeOffset(2016, 12, 1, 0, 0, 0, TimeSpan.Zero);
                var decEnd = new DateTimeOffset(2016, 12, decDays, 0, 0, 0, TimeSpan.Zero);
                var janStart = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero);
                var janEnd = new DateTimeOffset(2017, 1, janDays, 0, 0, 0, TimeSpan.Zero);
                var febStart = new DateTimeOffset(2017, 2, 1, 0, 0, 0, TimeSpan.Zero);
                var febEnd = new DateTimeOffset(2017, 2, febDays, 0, 0, 0, TimeSpan.Zero);
                var marStart = new DateTimeOffset(2017, 3, 1, 0, 0, 0, TimeSpan.Zero);
                var marEnd = new DateTimeOffset(2017, 3, marDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject decStorageReport = _storageReport.GetStorageReportData(decStart, decEnd, _userId);
                StorageReportObject janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);
                StorageReportObject febStorageReport = _storageReport.GetStorageReportData(febStart, febEnd, _userId);
                StorageReportObject marStorageReport = _storageReport.GetStorageReportData(marStart, marEnd, _userId);

                #endregion

                #region Assert

                // December 2016
                Assert.AreEqual(0, decStorageReport.ReportBody.Count);

                // January 2017 Storage Report

                // Only totals, "GIN", AND "190 AND OVER" records are generated
                Assert.AreEqual(3, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // GIN
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(98f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(98f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(98f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(98f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(196f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(196f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(98f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(98f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(196f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // February 2017 Storage Report

                // Only totals, "GIN", AND "190 AND OVER" records are generated
                Assert.AreEqual(3, febStorageReport.ReportBody.Count);
                Assert.IsTrue(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsTrue(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(febStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // GIN
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                // 190 AND OVER
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(98f, febStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // March 2017 Storage Report

                // Only totals and  "190 AND OVER" records generated
                Assert.AreEqual(2, marStorageReport.ReportBody.Count);
                Assert.IsTrue(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(marStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(98f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(98f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(98f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(98f, marStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100 PFG (100 Gal @ 50% ABV) of GNS on 6/1/2018.
        /// 2. Blend 50 PFG (50 Gal at 50%ABV) of GNS to produce 40 PFG (40 Gal at 50%) of Gin on 6/1/2018.
        /// 3. 10 PFG should be accounted for on line 24 Losses in the Processing.
        /// </summary>
        [TestMethod()]
        public void PurchaseGNS_DirectlyBlend_Losses()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS for GIN";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 50f;
                purchO.ProofGallon = 100f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Blend GNS into GIN
                ProductionObject prodBlendGin = new ProductionObject();
                prodBlendGin.BatchName = "BlendedGin";
                prodBlendGin.ProductionDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionEnd = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.Gauged = true;
                prodBlendGin.GainLoss = -10f;
                prodBlendGin.ProductionType = "Blending";
                prodBlendGin.Quantity = 40f; // 40 gallons of alcohol
                prodBlendGin.VolumeByWeight = 0f;
                prodBlendGin.AlcoholContent = 50f; // 50%
                prodBlendGin.ProofGallon = 40f; // 40 pfg
                prodBlendGin.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlendGin.SpiritTypeReportingID = 6; // Gin
                prodBlendGin.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f;
                uMat.OldVal = 50f;
                uMat.Proof = 50f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodBlendGin.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodBlendGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act

                int juneDays = DateTime.DaysInMonth(2018, 6);
                var juneStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                var juneEnd = new DateTimeOffset(2018, 6, juneDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject juneStorageReport = _storageReport.GetStorageReportData(juneStart, juneEnd, _userId);

                #endregion

                #region Assert

                // June 2018 Storage Report after Purchase

                // Only "190 AND OVER" and "total" records are generated because production record is ungauged
                Assert.AreEqual(2, juneStorageReport.ReportBody.Count);
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // July 2018 Processing Report after Purchase and Blending
                ProcessingReportingObject processingReportObject = _processingReport.GetProcessingReportData(juneStart, juneEnd, _userId);

                // Part 1
                Assert.AreEqual("spirit", processingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(0f, processingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(50f, processingReportObject.Part1.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part1.WineMixedWithSpirit);
                Assert.AreEqual(0f, processingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(0f, processingReportObject.Part1.Gains);
                Assert.AreEqual(0f, processingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part1.Destroyed);
                Assert.AreEqual(10f, processingReportObject.Part1.Losses);
                Assert.AreEqual(40f, processingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part1.Used4Redistil);

                // Part 2
                Assert.AreEqual("bottled", processingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part2.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(0f, processingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, processingReportObject.Part2.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part2.Destroyed);
                Assert.AreEqual(0f, processingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(0f, processingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandFirstofMonth);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100 PFG (100 Gal @ 50% ABV) of GNS on 6/1/2018.
        /// 2. Blend 50 PFG (50 Gal at 50%ABV) of GNS to produce 40 PFG (40 Gal at 50%) of Gin on 6/1/2018.There should be 10PFG of Losses
        /// 3. Bottle 40PFG of GNS from the line above into 39.22 PFG of Bottled GNS. There should be .78 PfG of Losses.
        /// Expected: 10.78 PfG should be acounted in for on line 24 Losses in the Processing.
        /// </summary>
        [TestMethod]
        public void Test_Proper_LossesCalculations_In_ProcessingReport_In_Blending_And_Bottling()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS for GIN";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 50f;
                purchO.ProofGallon = 100f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Blend GNS into GIN
                ProductionObject prodBlendGin = new ProductionObject();
                prodBlendGin.BatchName = "BlendedGin";
                prodBlendGin.ProductionDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionEnd = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.Gauged = true;
                prodBlendGin.GainLoss = -10f;
                prodBlendGin.ProductionType = "Blending";
                prodBlendGin.Quantity = 40f; // 40 gallons of alcohol
                prodBlendGin.VolumeByWeight = 0f;
                prodBlendGin.AlcoholContent = 50f; // 50%
                prodBlendGin.ProofGallon = 40f; // 40 pfg
                prodBlendGin.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlendGin.SpiritTypeReportingID = 6; // Gin
                prodBlendGin.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f;
                uMat.OldVal = 50f;
                uMat.Proof = 50f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodBlendGin.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodBlendGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // Bottle
                ProductionObject bottling = new ProductionObject
                {
                    BatchName = "Gin bottling",
                    ProductionDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Bottling",
                    Quantity = 39.23f,
                    AlcoholContent = 50f,
                    ProofGallon = 39.22f,
                    SpiritTypeReportingID = 6, // Gin
                    ProductionTypeId = 4, // Bottling
                    SpiritId = spiritId,
                    GainLoss = -.78f,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    },
                    UsedMats = new List<ObjInfo4Burndwn>
                    {
                        new ObjInfo4Burndwn
                        {
                            ID = productionId,
                            OldVal = 0f,
                            NewVal = prodBlendGin.Quantity,
                            DistillableOrigin = "prod",
                            BurningDownMethod = "volume"
                        }
                    },
                    BottlingInfo = new BottlingObject
                    {
                        CaseCapacity = 12,
                        CaseQuantity = 16.5f,
                        BottleCapacity = 750f,
                        BottleQuantity = 198
                    },
                    FillTestList = null
                };

                int productionId2 = _production.CreateProduction(bottling, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                #endregion

                #region Act

                int juneDays = DateTime.DaysInMonth(2018, 6);
                var juneStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                var juneEnd = new DateTimeOffset(2018, 6, juneDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject juneStorageReport = _storageReport.GetStorageReportData(juneStart, juneEnd, _userId);

                #endregion

                #region Assert

                // June 2018 Processing Report after Purchase

                // Only "190 AND OVER" and "total" records are generated because production record is ungauged
                Assert.AreEqual(2, juneStorageReport.ReportBody.Count);
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // June 2018 Processing Report after Purchase and Blending
                ProcessingReportingObject processingReportObject = _processingReport.GetProcessingReportData(juneStart, juneEnd, _userId);

                // Part 1
                Assert.AreEqual("spirit", processingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(0f, processingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(50f, processingReportObject.Part1.Recd4Process); // we need to include losses in Received cell as well
                Assert.AreEqual(0f, processingReportObject.Part1.WineMixedWithSpirit);
                Assert.AreEqual(0f, processingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(0f, processingReportObject.Part1.Gains);
                Assert.AreEqual(40f, processingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part1.Destroyed);
                Assert.AreEqual(10f, processingReportObject.Part1.Losses);
                Assert.AreEqual(0f, processingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part1.Used4Redistil);

                // Part 2
                Assert.AreEqual("bottled", processingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(39.22f, processingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(40f, processingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part2.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(0f, processingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, processingReportObject.Part2.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part2.Destroyed);
                Assert.AreEqual(0f, processingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(.78f, processingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandFirstofMonth);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100 PFG (100 Gal @ 50% ABV) of GNS on 6/1/2018.
        /// 2. Blend 50 PFG (50 Gal at 50%ABV) of GNS to produce 60 PFG (60 Gal at 50%) of Gin on 6/1/2018.
        /// 3. 10 PFG should be accounted for on line 7 Gains in the Processing.
        /// </summary>
        [TestMethod()]
        public void PurchaseGNS_DirectlyBlend_Gains()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS for GIN";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 50f;
                purchO.ProofGallon = 100f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Blend GNS into GIN
                ProductionObject prodBlendGin = new ProductionObject();
                prodBlendGin.BatchName = "BlendedGin";
                prodBlendGin.ProductionDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionEnd = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.Gauged = true;
                prodBlendGin.GainLoss = 10f;
                prodBlendGin.ProductionType = "Blending";
                prodBlendGin.Quantity = 60f; // 40 gallons of alcohol
                prodBlendGin.VolumeByWeight = 0f;
                prodBlendGin.AlcoholContent = 50f; // 50%
                prodBlendGin.ProofGallon = 60f; // 40 pfg
                prodBlendGin.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlendGin.SpiritTypeReportingID = 6; // Gin
                prodBlendGin.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f;
                uMat.OldVal = 50f;
                uMat.Proof = 50f;
                uMat.AlcoholContent = purchO.AlcoholContent;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodBlendGin.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodBlendGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act

                int juneDays = DateTime.DaysInMonth(2018, 6);
                var juneStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                var juneEnd = new DateTimeOffset(2018, 6, juneDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject juneStorageReport = _storageReport.GetStorageReportData(juneStart, juneEnd, _userId);

                #endregion

                #region Assert

                // June 2018 Storage Report after Purchase

                // Only "190 AND OVER" and "total" records are generated because production record is ungauged
                Assert.AreEqual(2, juneStorageReport.ReportBody.Count);
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // July 2018 Processing Report after Purchase and Blending
                ProcessingReportingObject processingReportObject = _processingReport.GetProcessingReportData(juneStart, juneEnd, _userId);

                // Part 1
                Assert.AreEqual("spirit", processingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(0f, processingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(50f, processingReportObject.Part1.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part1.WineMixedWithSpirit);
                Assert.AreEqual(0f, processingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(10f, processingReportObject.Part1.Gains);
                Assert.AreEqual(0f, processingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part1.Destroyed);
                Assert.AreEqual(0f, processingReportObject.Part1.Losses);
                Assert.AreEqual(60f, processingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part1.Used4Redistil);

                // Part 2
                Assert.AreEqual("bottled", processingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part2.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(0f, processingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, processingReportObject.Part2.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part2.Destroyed);
                Assert.AreEqual(0f, processingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(0f, processingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandFirstofMonth);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100 PFG (100 Gal @ 50% ABV) of Gns on 6/1/2018.
        /// 2. Blend 50 PFG (50 Gal at 50%ABV) of Gns to produce 50 PFG (50 Gal at 50%) of Gin on 6/1/2018.
        /// 3. Blend 25 PFG (25 Gal at 50%ABV) of Gin to produce 15 PFG (15 Gal @ 50%) of Gin on 7/1/2018.
        /// 4. 10 PFG should be accounted for on line 24 Losses in the Processing.
        /// </summary>
        [TestMethod()]
        public void PurchaseGNS_ReDistillGIN_BlendGin_Losses()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int purchaseId = 0;
            int productionId1 = 0;
            int productionId2 = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS for GIN";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 6, 1, 12, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 50f;
                purchO.ProofGallon = 100f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Blend GNS into GIN
                ProductionObject prodDistilGin = new ProductionObject();
                prodDistilGin.BatchName = "DistilGin";
                prodDistilGin.ProductionDate = new DateTimeOffset(2018, 6, 1, 12, 0, 0, TimeSpan.Zero);
                prodDistilGin.ProductionStart = new DateTimeOffset(2018, 6, 1, 12, 0, 0, TimeSpan.Zero);
                prodDistilGin.ProductionEnd = new DateTimeOffset(2018, 6, 1, 12, 0, 0, TimeSpan.Zero);
                prodDistilGin.Gauged = true;
                prodDistilGin.ProductionType = "Distillation";
                prodDistilGin.Quantity = 50f; // 50 gallons of alcohol
                prodDistilGin.VolumeByWeight = 0f;
                prodDistilGin.AlcoholContent = 50f; // 50%
                prodDistilGin.ProofGallon = 50f; // 50 pfg
                prodDistilGin.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodDistilGin.SpiritTypeReportingID = 6; // GNS
                prodDistilGin.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f; // wine gallons of new record
                uMat.OldVal = 50f; // wine gallons used
                uMat.Proof = 50f; // remaining proof in record which is being burned down
                uMat.AlcoholContent = purchO.AlcoholContent;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);
                prodDistilGin.UsedMats = usedMats;

                productionId1 = _production.CreateProduction(prodDistilGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId1, Table.Production));

                // Blend GNS into GIN
                ProductionObject prodBlendGin = new ProductionObject();
                prodBlendGin.BatchName = "BlendedGin";
                prodBlendGin.ProductionDate = new DateTimeOffset(2018, 7, 1, 12, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionStart = new DateTimeOffset(2018, 7, 1, 12, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionEnd = new DateTimeOffset(2018, 7, 1, 12, 0, 0, TimeSpan.Zero);
                prodBlendGin.Gauged = true;
                prodBlendGin.ProductionType = "Blending";
                prodBlendGin.Quantity = 15f; // 15 gallons of alcohol
                prodBlendGin.VolumeByWeight = 0f;
                prodBlendGin.GainLoss = -10f;
                prodBlendGin.AlcoholContent = 50f; // 50%
                prodBlendGin.ProofGallon = 15f; // 15 pfg
                prodBlendGin.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlendGin.SpiritTypeReportingID = 6; // Gin
                prodBlendGin.ProductionTypeId = 3;

                usedMats.Clear();
                uMat.ID = productionId1;
                uMat.NewVal = 25f;
                uMat.OldVal = 25f;
                uMat.Proof = 25f;
                uMat.DistillableOrigin = "prod";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodBlendGin.UsedMats = usedMats;

                productionId2 = _production.CreateProduction(prodBlendGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                #endregion

                #region Act

                int juneDays = DateTime.DaysInMonth(2018, 6);
                var juneStart = new DateTime(2018, 6, 1);
                var juneEnd = new DateTime(2018, 6, juneDays);

                StorageReportObject juneStorageReport = _storageReport.GetStorageReportData(juneStart, juneEnd, _userId);

                #endregion

                #region Assert

                // June 2018 Storage Report after Purchase

                // Only "190 AND OVER" and "total" records are generated because production record is ungauged
                Assert.AreEqual(3, juneStorageReport.ReportBody.Count);
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));

                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // GIN
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                int julyDays = DateTime.DaysInMonth(2018, 7);
                var julyStart = new DateTimeOffset(2018, 7, 1, 0, 0, 0, TimeSpan.Zero);
                var julyEnd = new DateTimeOffset(2018, 7, julyDays, 0, 0, 0, TimeSpan.Zero);

                // Storage report in July 2018
                StorageReportObject julyStorageReport = _storageReport.GetStorageReportData(julyStart, julyEnd, _userId);

                // 190 AND OVER
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // Gin
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(25f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(25f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                // July 2018 Processing Report after Purchase and Blending
                ProcessingReportingObject processingReportObject = _processingReport.GetProcessingReportData(julyStart, julyEnd, _userId);

                // Part 1
                Assert.AreEqual("spirit", processingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(0f, processingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(25f, processingReportObject.Part1.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part1.WineMixedWithSpirit);
                Assert.AreEqual(0f, processingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(0f, processingReportObject.Part1.Gains);
                Assert.AreEqual(0f, processingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part1.Destroyed);
                Assert.AreEqual(10f, processingReportObject.Part1.Losses);
                Assert.AreEqual(15f, processingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part1.Used4Redistil);

                // Part 2
                Assert.AreEqual("bottled", processingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part2.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(0f, processingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, processingReportObject.Part2.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part2.Destroyed);
                Assert.AreEqual(0f, processingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(0f, processingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandFirstofMonth);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100 PFG (100 Gal @ 50% ABV) of GNS on 6/1/2018.
        /// 2. Burn down 50 PFG (50 Gal at 50%ABV) of GNS to product 50 PFG (50 Gal at 50%) of Gin on 6/1/2018.
        /// 3. Burn down 25 PFG (25 Gal at 50%ABV) of Gin to produce 35 PFG Gin (35 Gal @ 50%) on 7/1/2018
        /// 4. 10 PFG should be accounted for on line 7 Gains in the Processing Report.
        /// </summary>
        [TestMethod()]
        public void PurchaseGNS_ReDistillGIN_BlendGin_Gains()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int purchaseId = 0;
            int productionId1 = 0;
            int productionId2 = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS for GIN";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 50f;
                purchO.ProofGallon = 100f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Distill GNS into GIN
                ProductionObject prodDistilGin = new ProductionObject();
                prodDistilGin.BatchName = "DistilGin";
                prodDistilGin.ProductionDate = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodDistilGin.ProductionStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodDistilGin.ProductionEnd = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                prodDistilGin.Gauged = true;
                prodDistilGin.ProductionType = "Distillation";
                prodDistilGin.Quantity = 50f; // 50 gallons of alcohol
                prodDistilGin.VolumeByWeight = 0f;
                prodDistilGin.AlcoholContent = 50f; // 50%
                prodDistilGin.ProofGallon = 50f; // 50 pfg
                prodDistilGin.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodDistilGin.SpiritTypeReportingID = 6; // GNS
                prodDistilGin.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f; // Wine gallons of new record.
                uMat.OldVal = 50f; // Wine gallons used
                uMat.Proof = 50f; //remaining proof in record which is being burned down
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);
                prodDistilGin.UsedMats = usedMats;

                productionId1 = _production.CreateProduction(prodDistilGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId1, Table.Production));

                // Blend GNS into GIN
                ProductionObject prodBlendGin = new ProductionObject();
                prodBlendGin.BatchName = "BlendedGin";
                prodBlendGin.ProductionDate = new DateTimeOffset(2018, 7, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionStart = new DateTimeOffset(2018, 7, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.ProductionEnd = new DateTimeOffset(2018, 7, 1, 0, 0, 0, TimeSpan.Zero);
                prodBlendGin.Gauged = true;
                prodBlendGin.GainLoss = 10f;
                prodBlendGin.ProductionType = "Blending";
                prodBlendGin.Quantity = 35f; // 15 gallons of alcohol
                prodBlendGin.VolumeByWeight = 0f;
                prodBlendGin.AlcoholContent = 50f; // 50%
                prodBlendGin.ProofGallon = 35f; // 15 pfg
                prodBlendGin.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlendGin.SpiritTypeReportingID = 6; // Gin
                prodBlendGin.ProductionTypeId = 3;

                usedMats.Clear();
                uMat.ID = productionId1;
                uMat.NewVal = 25f;
                uMat.OldVal = 25f;
                uMat.Proof = 25f;
                uMat.DistillableOrigin = "prod";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodBlendGin.UsedMats = usedMats;

                productionId2 = _production.CreateProduction(prodBlendGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                #endregion

                #region Act

                int juneDays = DateTime.DaysInMonth(2018, 6);
                var juneStart = new DateTimeOffset(2018, 6, 1, 0, 0, 0, TimeSpan.Zero);
                var juneEnd = new DateTimeOffset(2018, 6, juneDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject juneStorageReport = _storageReport.GetStorageReportData(juneStart, juneEnd, _userId);

                #endregion

                #region Assert

                // June 2018 Storage Report after Purchase

                // Only "190 AND OVER" and "total" records are generated because production record is ungauged
                Assert.AreEqual(3, juneStorageReport.ReportBody.Count);
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsTrue(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));

                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(juneStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // GIN
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(50f, juneStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                int julyDays = DateTime.DaysInMonth(2018, 7);
                var julyStart = new DateTimeOffset(2018, 7, 1, 0, 0, 0, TimeSpan.Zero);
                var julyEnd = new DateTimeOffset(2018, 7, julyDays, 0, 0, 0, TimeSpan.Zero);

                // Storage report in July 2018
                StorageReportObject julyStorageReport = _storageReport.GetStorageReportData(julyStart, julyEnd, _userId);

                // 190 AND OVER
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // Gin
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(25f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(25f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(50f, julyStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                // July 2018 Processing Report after Purchase and Blending
                ProcessingReportingObject processingReportObject = _processingReport.GetProcessingReportData(julyStart, julyEnd, _userId);

                // Part 1
                Assert.AreEqual("spirit", processingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(0f, processingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(25f, processingReportObject.Part1.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part1.WineMixedWithSpirit);
                Assert.AreEqual(0f, processingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(10f, processingReportObject.Part1.Gains);
                Assert.AreEqual(0f, processingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part1.Destroyed);
                Assert.AreEqual(0f, processingReportObject.Part1.Losses);
                Assert.AreEqual(35f, processingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part1.Used4Redistil);

                // Part 2
                Assert.AreEqual("bottled", processingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, processingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, processingReportObject.Part2.Recd4Process);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(0f, processingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, processingReportObject.Part2.Transf2Prod4Redistil);
                Assert.AreEqual(0f, processingReportObject.Part2.Destroyed);
                Assert.AreEqual(0f, processingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(0f, processingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(0f, processingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(0f, processingReportObject.Part2.OnHandFirstofMonth);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 196(100 gallons @98 %alcohol) proof gallons of GNS on 06/1/2018
        /// 2. Redistill half of purchased GNS, 98(50@98) proof gallons as GIN on 06/02/2018
        /// 3. Blend the GIN batch with 50 gallons of additive for a total of 98(100@49) proof gallons on 6/3/2018
        /// 4. Bottle all of it on 6/4/2018
        /// 5. Pull Processing Report
        /// </summary>
        [TestMethod()]
        public void BuyGNS_RedistilHalfIntoGin_Blend_Bottle_MakeSure_Processing_Doesnt_throw()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            try
            {
                #region Arrange
                // create Purchase Record (minimal required fields)
                PurchaseDistilled(name: "GnsPurchase",
                date: new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 98f,
                proof: 196f,
                materialDictId: _rawMaterials["Gns"].RawMaterialId,
                spiritTypeReportingId: (int)ReportSpiritTypes.AlcoholUnder190,
                price: 350f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

                ProduceDistill(name: "RedistilledGns",
                start: new DateTimeOffset(2018, 04, 02, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 04, 02, 0, 0, 0, TimeSpan.Zero),
                volume: 50f,
                weight: 0f,
                alcoholContent: 98f,
                proof: 98f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Gin,
                spiritCut: "Mixed",
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _purchases["GnsPurchase"].PurchaseId,
                        OldVal = 50f,
                        NewVal = 50f,
                        Proof = 98f,
                        DistillableOrigin = "pur",
                        BurningDownMethod = "volume"
                    }
                });

                ProduceBlend(name: "ProducedGin",
                start: new DateTimeOffset(2018, 05, 03, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 05, 03, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 49f,
                proof: 98f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Gin,
                spiritId: _spirits["Gin"].SpiritId,
                gainLoss: 0f,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _productions["RedistilledGns"].ProductionId,
                        OldVal = 0f,
                        NewVal = 50f,
                        DistillableOrigin = "prod",
                        BurningDownMethod = "volume"
                    }
                },
                blendingAdditives: new List<BlendingAdditive>
                {
                    new BlendingAdditive
                    {
                        RawMaterialId = _rawMaterials["DistilledWater"].RawMaterialId,
                        RawMaterialQuantity = 50f,
                        RawMaterialName = "DistilledWater",
                        UnitOfMeasurement = "gal"
                    }
                });

                ProduceBottle(name: "GIN Bottling Test",
                start: new DateTimeOffset(2018, 06, 4, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 06, 4, 0, 0, 0, TimeSpan.Zero),
                volume: 150f, // Use bottling UI workflow to calculate desired volume for given number of cases/bottles
                weight: 0f,
                alcoholContent: 32.5f,
                proof: 97.5f, // Use bottling UI workflow to calculate desired proof for given number of cases/bottles
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Gin,
                spiritId: _spirits["Gin"].SpiritId,
                gainLoss: -.5f,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _productions["ProducedGin"].ProductionId,
                        OldVal = 0f,
                        NewVal = 50f,
                        DistillableOrigin = "prod",
                        BurningDownMethod = "volume"
                    }
                },
                bottlingInfo: new BottlingObject
                {
                    CaseCapacity = 10,
                    CaseQuantity = 113f,
                    BottleQuantity = 1130,
                    BottleCapacity = 500f,
                },
                fillTestList: null);
                #endregion

                #region Processing Report
                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "June 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                DateTimeOffset start = new DateTimeOffset(2018, 06, 01, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset end = new DateTimeOffset(2018, 06, 30, 0, 0, 0, TimeSpan.Zero);

                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);

                Assert.AreEqual(reportHeaderE.DSP, actualProcessingReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProcessingReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProcessingReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProcessingReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProcessingReportObject.Header.ReportDate);

                Assert.AreEqual(98f, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(98f, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(98f, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(97.5f, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(.5f, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 1000(1000@50) proof gallons of GNS on 1/1/2018
        /// 2. Redistill 100 gal of purchased GNS, 100(100@50) proof gallons as 100 (100@50) proof gallons GIN on 1/1/2018, Ungauged
        /// 3. Again redistill 100 gal of purchased GNS, 100(100@50) proof gallons as 100 (100@50) proof gallons GIN on 1/1/2018, Ungauged
        /// 4. Pull Storage report and check values.
        /// </summary>
        [TestMethod()]
        public void BuyGNS_RedistilTwice_Ungauged_ProduceGin()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int purchaseId = 0;
            int productionId1 = 0;
            int productionId2 = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS for GIN";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 1000f; // 1000 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 50f;
                purchO.ProofGallon = 1000f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;


                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Redistil GNS into GIN and mark it as Ungauged
                ProductionObject prodFirstDistill = new ProductionObject();
                prodFirstDistill.BatchName = "RedistilledGns";
                prodFirstDistill.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.SpiritCutId = 11; // mixed
                prodFirstDistill.Gauged = false;
                prodFirstDistill.ProductionType = "Distillation";
                prodFirstDistill.Quantity = 100f; // 100 gallons of alcohol
                prodFirstDistill.VolumeByWeight = 0f;
                prodFirstDistill.AlcoholContent = 50f; // 50%
                prodFirstDistill.ProofGallon = 100f; // 100 pfg
                prodFirstDistill.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodFirstDistill.SpiritTypeReportingID = 6; // Gin
                prodFirstDistill.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 100f;
                uMat.OldVal = 900f;
                uMat.Proof = 900f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodFirstDistill.UsedMats = usedMats;

                productionId1 = _production.CreateProduction(prodFirstDistill, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId1, Table.Production));

                #endregion

                #region Act

                int janDays = DateTime.DaysInMonth(2018, 1);
                var janStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                var janEnd = new DateTimeOffset(2018, 1, janDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);

                #endregion

                #region Assert

                // January 2018 Storage Report after first Redistill

                // Only "190 AND OVER" and "total" records are generated because production record is ungauged
                Assert.AreEqual(2, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(900f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());


                // Redistil GNS into GIN a second tie and mark it as Ungauged
                ProductionObject prodSecondDistill = new ProductionObject();
                prodSecondDistill.BatchName = "RedistilledGns";
                prodSecondDistill.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.SpiritCutId = 11; // mixed
                prodSecondDistill.Gauged = false;
                prodSecondDistill.ProductionType = "Distillation";
                prodSecondDistill.Quantity = 100f; // 100 gallons of alcohol
                prodSecondDistill.VolumeByWeight = 0f;
                prodSecondDistill.AlcoholContent = 50f; // 50%
                prodSecondDistill.ProofGallon = 100f; // 100 pfg
                prodSecondDistill.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodSecondDistill.SpiritTypeReportingID = 6; // Gin
                prodSecondDistill.ProductionTypeId = 2;

                ObjInfo4Burndwn uMat2 = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 100f;
                uMat.OldVal = 800f;
                uMat.Proof = 800f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat2);

                prodSecondDistill.UsedMats = usedMats;

                productionId2 = _production.CreateProduction(prodSecondDistill, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                // Check storage after second redistill

                janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);


                // Only "190 AND OVER" and "total" records are generated because production record is ungauged
                Assert.AreEqual(2, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(800f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 1000(1000@50) proof gallons of GNS on 1/1/2018
        /// 2. Redistill 100 gal of purchased GNS, 100(100@50) proof gallons as 100 (100@50) proof gallons GIN on 1/1/2018, Gauged
        /// 3. Again redistill 100 gal of purchased GNS, 100(100@50) proof gallons as 100 (100@50) proof gallons GIN on 1/1/2018, Gauged
        /// 4. Pull Storage report and check values. 
        /// </summary>
        [TestMethod()]
        public void BuyGNS_RedistilTwice_Gauged_ProduceGin()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int purchaseId = 0;
            int productionId1 = 0;
            int productionId2 = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS for GIN";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 1000f; // 1000 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 50f;
                purchO.ProofGallon = 1000f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;


                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Redistil GNS into GIN and mark it as Gauged
                ProductionObject prodFirstDistill = new ProductionObject();
                prodFirstDistill.BatchName = "RedistilledGns";
                prodFirstDistill.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.SpiritCutId = 11; // mixed
                prodFirstDistill.Gauged = true;
                prodFirstDistill.ProductionType = "Distillation";
                prodFirstDistill.Quantity = 100f; // 100 gallons of alcohol
                prodFirstDistill.VolumeByWeight = 0f;
                prodFirstDistill.AlcoholContent = 50f; // 50%
                prodFirstDistill.ProofGallon = 100f; // 100 pfg
                prodFirstDistill.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodFirstDistill.SpiritTypeReportingID = 6; // Gin
                prodFirstDistill.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 100f;
                uMat.OldVal = 900f;
                uMat.Proof = 900f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodFirstDistill.UsedMats = usedMats;

                productionId1 = _production.CreateProduction(prodFirstDistill, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId1, Table.Production));

                #endregion

                #region Act

                int janDays = DateTime.DaysInMonth(2018, 1);
                var janStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                var janEnd = new DateTimeOffset(2018, 1, janDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);

                #endregion

                #region Assert

                // January 2018 Storage Report after first Redistill

                // "GIN", "190 AND OVER", and "total" records are generated because production record is Gauged
                Assert.AreEqual(3, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(900f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // GIN
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                // Redistil GNS into GIN a second tie and mark it as Gauged
                ProductionObject prodSecondDistill = new ProductionObject();
                prodSecondDistill.BatchName = "RedistilledGns";
                prodSecondDistill.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.SpiritCutId = 11; // mixed
                prodSecondDistill.Gauged = true;
                prodSecondDistill.ProductionType = "Distillation";
                prodSecondDistill.Quantity = 100f; // 100 gallons of alcohol
                prodSecondDistill.VolumeByWeight = 0f;
                prodSecondDistill.AlcoholContent = 50f; // 50%
                prodSecondDistill.ProofGallon = 100f; // 100 pfg
                prodSecondDistill.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodSecondDistill.SpiritTypeReportingID = 6; // Gin
                prodSecondDistill.ProductionTypeId = 2;

                ObjInfo4Burndwn uMat2 = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 100f;
                uMat.OldVal = 800f;
                uMat.Proof = 800f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat2);

                prodSecondDistill.UsedMats = usedMats;

                productionId2 = _production.CreateProduction(prodSecondDistill, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                // Check storage after second redistill

                janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);


                // "GIN" , "190 AND OVER" and "total" records are generated because production record is Gauged
                Assert.AreEqual(3, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(800f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // GIN
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());
                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100 lbs fermented corn. 
        /// 2. Distill 1000(1000@50) proof gallons of GNS Gauged on 1/1/2018
        /// 3. Redistill 100 gal of production GNS, 100(100@50) proof gallons as 100 (100@50) proof gallons GIN on 1/1/2018, Ungauged
        /// 4. Again redistill 100 gal of produced GNS, 100(100@50) proof gallons as 100 (100@50) proof gallons GIN on 1/1/2018, Ungauged
        /// 5. Pull Storage report and check values.
        /// 6. Pull Production report and check values.
        /// </summary>
        [TestMethod()]
        public void BuyCorn_DistillGNS_RedistillTwice_Gauged_ProduceGin()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int materialId = 0;
            int vendorId = 0;
            int storageId = 0;
            int purchaseId = 0;
            int productionId1 = 0;
            int productionId2 = 0;
            int productionId3 = 0;
            int productionId4 = 0;

            try
            {
                #region Arrange
                //  raw material setup
                RawMaterialObject corn = new RawMaterialObject();
                corn.RawMaterialName = "corn";
                corn.PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Fermentable = true};
                corn.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Grain;
                corn.UnitTypeId = 2;
                corn.UnitType = "lbs";

                materialId = _dictionary.CreateRawMaterial(_userId, corn);
                tablesForCleanupTupleList.Add(Tuple.Create(materialId, Table.MaterialDict));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Corn";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.VolumeByWeight = 50f; // 50 lbs
                purchO.RecordId = materialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;


                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Ferment Corn into a Mash
                ProductionObject prodFermentedCornMash = new ProductionObject();
                prodFermentedCornMash.BatchName = "FermentedCorn";
                prodFermentedCornMash.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.Gauged = true;
                prodFermentedCornMash.ProductionType = "Fermentation";
                prodFermentedCornMash.Quantity = 500f; // 500 gallons of alcohol
                prodFermentedCornMash.VolumeByWeight = 0f;
                prodFermentedCornMash.AlcoholContent = 50f; // 50%
                prodFermentedCornMash.ProofGallon = 500f; // 500 pg
                prodFermentedCornMash.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodFermentedCornMash.SpiritTypeReportingID = 10; // Other
                prodFermentedCornMash.ProductionTypeId = 1;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f;
                uMat.OldVal = 0f;
                uMat.Proof = 0f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodFermentedCornMash.UsedMats = usedMats;

                productionId1 = _production.CreateProduction(prodFermentedCornMash, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId1, Table.Production));

                #endregion

                #region Act

                int janDays = DateTime.DaysInMonth(2018, 1);
                var janStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                var janEnd = new DateTimeOffset(2018, 1, janDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);
                ProductionReportingObject janProductionReport = _productionReport.GetProductionReportData(janStart, janEnd, _userId);

                #endregion

                #region Assert

                // January 2018 Storage Report after Fermentation to turn Corn purchase to Corn Mash Gauged

                // Only "Other" and "Total" records are generated.
                Assert.AreEqual(2, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // Other
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // Distill Corn Mash into GNS and mark it as Gauged
                ProductionObject prodCornMashGNS = new ProductionObject();
                prodCornMashGNS.BatchName = "DistillGNS";
                prodCornMashGNS.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodCornMashGNS.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodCornMashGNS.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodCornMashGNS.SpiritCutId = 11; // mixed
                prodCornMashGNS.Gauged = true;
                prodCornMashGNS.ProductionType = "Distillation";
                prodCornMashGNS.Quantity = 1000f; // 1000 gallons of alcohol
                prodCornMashGNS.VolumeByWeight = 0f;
                prodCornMashGNS.AlcoholContent = 50f; // 50%
                prodCornMashGNS.ProofGallon = 1000f; // 1000 pg
                prodCornMashGNS.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodCornMashGNS.SpiritTypeReportingID = 9; // Alcohol>190 "GNS"
                prodCornMashGNS.MaterialKindReportingID = 75; // Grain
                prodCornMashGNS.ProductionTypeId = 2;

                usedMats.Clear();
                uMat.ID = productionId1;
                uMat.NewVal = 500f;
                uMat.OldVal = 0f;
                uMat.Proof = 0f;
                uMat.DistillableOrigin = "prod";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodCornMashGNS.UsedMats = usedMats;

                productionId2 = _production.CreateProduction(prodCornMashGNS, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                // January 2018 Storage Report after first Distill to turn Corn Mash into GNS Gauged
                janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);
                janProductionReport = _productionReport.GetProductionReportData(janStart, janEnd, _userId);

                // Only Alcohol 190 and Over, Other ,and Total records are generated.
                Assert.AreEqual(3, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // Other
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // January 2018 Production Report after first Distill to turn Corn Mash into GNS Gauged

                // Only Alcohol 190 and Over, Other ,and Total records are generated.
                Assert.AreEqual(3, janProductionReport.Part1List.Count);
                Assert.IsTrue(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janProductionReport.Part1List.Exists(x => x.SpiritTypeReportingID == 11));

                // Production Part 1: 190 and Over
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.ProccessingAcct).Single());
                Assert.AreEqual(1000f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.StorageAcct).Single());
                Assert.AreEqual(1000f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.ProducedTotal).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.Recd4RedistilaltionL15).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.Recd4RedistilL17).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.UnfinishedSpiritsEndOfQuarterL17).Single());

                // Production Part 1: Other
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.ProccessingAcct).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.StorageAcct).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.ProducedTotal).Single());
                Assert.AreEqual(500f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.Recd4RedistilaltionL15).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.Recd4RedistilL17).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.UnfinishedSpiritsEndOfQuarterL17).Single());

                // Production Part 2
                var part2CatergoryExpected = janProductionReport.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Grain);

                if (part2CatergoryExpected == null)
                {
                    Assert.IsNull(part2CatergoryExpected, "Kind of Material columns should have an entry for Grain");
                }
                else
                {
                    Assert.AreEqual(1000, part2CatergoryExpected.ProofGallons);
                }


                // Production Part 5
                var part5CategoryExpected = janProductionReport.part5List.Find(x => x.KindofSpirits == "Other");

                if (part5CategoryExpected == null)
                {
                    Assert.IsNotNull(part5CategoryExpected, "Kind of Spirit columns should have an entry for Other");
                }
                else
                {
                    Assert.AreEqual(500, part5CategoryExpected.Proof);
                }

                // verify Production Report Part 6
                // report should display 50 lbs of corn as all of it was burned down to make GNS.
                var part6CategoryExpected = janProductionReport.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Grain);

                if (part6CategoryExpected == null)
                {
                    Assert.IsNotNull(part6CategoryExpected, "There should be records for Grain category");
                }
                else
                {
                    Assert.AreEqual(50, part6CategoryExpected.Weight);
                    Assert.AreEqual(0, part6CategoryExpected.Volume);
                }

                // Redistill GNS into GIN first time and mark it as Gauged
                ProductionObject prodFirstDistill = new ProductionObject();
                prodFirstDistill.BatchName = "Redistilled_GNS_into_GIN_01";
                prodFirstDistill.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFirstDistill.SpiritCutId = 11; // mixed
                prodFirstDistill.Gauged = true;
                prodFirstDistill.ProductionType = "Distillation";
                prodFirstDistill.Quantity = 100f; // 100 gallons of alcohol
                prodFirstDistill.VolumeByWeight = 0f;
                prodFirstDistill.AlcoholContent = 50f; // 50%
                prodFirstDistill.ProofGallon = 100f; // 100 pfg
                prodFirstDistill.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodFirstDistill.SpiritTypeReportingID = 6; // Gin
                prodFirstDistill.ProductionTypeId = 2;

                usedMats.Clear();
                uMat.ID = productionId2;
                uMat.NewVal = 100f;
                uMat.OldVal = 900f;
                uMat.Proof = 900f;
                uMat.DistillableOrigin = "prod";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodFirstDistill.UsedMats = usedMats;

                productionId3 = _production.CreateProduction(prodFirstDistill, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId3, Table.Production));

                // January 2018 Storage Report after first redistillation of GNS to GIN
                janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);
                janProductionReport = _productionReport.GetProductionReportData(janStart, janEnd, _userId);

                // "Gin", "190 AND OVER", "Other" ,and "total" records are generated.
                Assert.AreEqual(4, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // GIN
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                // Commenting out for now as there is another bug open for this issue. 
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(900f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // Other
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // Production Part 1: Gin
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.ProccessingAcct).Single());
                Assert.AreEqual(100f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.StorageAcct).Single());
                Assert.AreEqual(100f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.ProducedTotal).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.Recd4RedistilaltionL15).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.Recd4RedistilL17).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.UnfinishedSpiritsEndOfQuarterL17).Single());

                // Production Part 1: GNS 190 And Over
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.ProccessingAcct).Single());
                Assert.AreEqual(1000f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.StorageAcct).Single());
                Assert.AreEqual(1000f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.ProducedTotal).Single());
                Assert.AreEqual(100f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.Recd4RedistilaltionL15).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.Recd4RedistilL17).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.UnfinishedSpiritsEndOfQuarterL17).Single());

                // Redistil GNS into GIN a second time and mark it as Gauged
                ProductionObject prodSecondDistill = new ProductionObject();
                prodSecondDistill.BatchName = "Redistilled_GNS_into_GIN_02";
                prodSecondDistill.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodSecondDistill.SpiritCutId = 11; // mixed
                prodSecondDistill.Gauged = true;
                prodSecondDistill.ProductionType = "Distillation";
                prodSecondDistill.Quantity = 100f; // 100 gallons of alcohol
                prodSecondDistill.VolumeByWeight = 0f;
                prodSecondDistill.AlcoholContent = 50f; // 50%
                prodSecondDistill.ProofGallon = 100f; // 100 pfg
                prodSecondDistill.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodSecondDistill.SpiritTypeReportingID = 6; // Gin
                prodSecondDistill.ProductionTypeId = 2;

                usedMats.Clear();
                uMat.ID = productionId2;
                uMat.NewVal = 100f;
                uMat.OldVal = 800f;
                uMat.Proof = 800f;
                uMat.DistillableOrigin = "prod";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodSecondDistill.UsedMats = usedMats;

                productionId4 = _production.CreateProduction(prodSecondDistill, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId4, Table.Production));

                // Check storage after second redistill
                janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);
                janProductionReport = _productionReport.GetProductionReportData(janStart, janEnd, _userId);

                // "Gin", "190 AND OVER", "Other" ,and "total" records are generated.
                Assert.AreEqual(4, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // GIN
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                // Commenting out for now as there is another bug open for this issue. 
                //Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                //Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(200f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(800f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(1000f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // Other
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(500f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 10).Select(x => x.r24_Lines7Through23).Single());

                // Production Part 1: Gin
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.ProccessingAcct).Single());
                Assert.AreEqual(200f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.StorageAcct).Single());
                Assert.AreEqual(200f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.ProducedTotal).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.Recd4RedistilaltionL15).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.Recd4RedistilL17).Single());
                Assert.AreEqual(0f, janProductionReport.Part1List.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.UnfinishedSpiritsEndOfQuarterL17).Single());

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100(100@50) proof gallons of GNS on 1/1/2018
        /// 2. Pull Storage report and check values
        /// 3. Purchase 100 (100@50) proof gallons GIN on 1/1/2018
        /// 4. Pull Storage report and check values. 
        /// </summary>
        [TestMethod()]
        public void Buy_GNS_Buy_Gin()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int ginMaterialId = 0;
            int purchaseId1 = 0;
            int purchaseId2 = 0;

            try
            {
                #region Arrange
                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // GIN
                RawMaterialObject ginMaterial = new RawMaterialObject();
                ginMaterial.RawMaterialName = "GIN";
                ginMaterial.UnitType = "gal";
                ginMaterial.UnitTypeId = 1;
                ginMaterial.PurchaseMaterialTypes = materialBoolTypes; // distilled = true

                ginMaterialId = _dictionary.CreateRawMaterial(_userId, ginMaterial);
                tablesForCleanupTupleList.Add(Tuple.Create(ginMaterialId, Table.MaterialDict));

                // create first Purchase record
                PurchaseObject purchGNS = new PurchaseObject();
                purchGNS.PurBatchName = "GNS";
                purchGNS.PurchaseType = "Distilled";
                purchGNS.PurchaseDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchGNS.Quantity = 100f; // 100 gallons
                purchGNS.VolumeByWeight = 0f;
                purchGNS.AlcoholContent = 50f;
                purchGNS.ProofGallon = 100f;
                purchGNS.RecordId = gnsMaterialId;
                purchGNS.Price = 1f;
                purchGNS.VendorId = vendorId;
                purchGNS.SpiritTypeReportingID = 9;
                purchGNS.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchGNS.Storage = storageList;

                purchaseId1 = _purchase.CreatePurchase(purchGNS, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId1, Table.Purchase));

                #endregion

                #region Act

                int janDays = DateTime.DaysInMonth(2018, 1);
                var janStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                var janEnd = new DateTimeOffset(2018, 1, janDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);

                #endregion

                #region Assert

                // January 2018 Storage Report after first Purchase

                // "190 AND OVER", and "total" records are generated because production record is Gauged
                Assert.AreEqual(2, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // create second Purchase record
                PurchaseObject purchGin = new PurchaseObject();
                purchGin.PurBatchName = "Gin";
                purchGin.PurchaseType = "Distilled";
                purchGin.PurchaseDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchGin.Quantity = 100f; // 100 gallons
                purchGin.VolumeByWeight = 0f;
                purchGin.AlcoholContent = 50f;
                purchGin.ProofGallon = 100f;
                purchGin.RecordId = ginMaterialId;
                purchGin.Price = 1f;
                purchGin.VendorId = vendorId;
                purchGin.SpiritTypeReportingID = 6;
                purchGin.Gauged = true;

                purchGin.Storage = storageList;

                purchaseId2 = _purchase.CreatePurchase(purchGin, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId2, Table.Purchase));

                // Check storage after second Purchase
                janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);

                // "GIN" , "190 AND OVER" and "total" records are generated because production record is Gauged
                Assert.AreEqual(3, janStorageReport.ReportBody.Count);
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 9));
                Assert.IsTrue(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 6));

                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 1));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 2));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 3));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 4));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 5));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 7));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 8));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 10));
                Assert.IsFalse(janStorageReport.ReportBody.Exists(x => x.SpiritTypeReportingID == 11));

                // 190 AND OVER
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 9).Select(x => x.r24_Lines7Through23).Single());

                // GIN
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r1_OnHandFirstOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r2_DepositedInBulkStorage).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r4_ReturnedToBulkStorage).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r6_TotalLines1Through5).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r7_TaxPaid).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r17_TransferredToProcessingAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r18_TransferredToProductionAccount).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r19_TransferredToOtherBondedPremises).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r20_Destroyed).Single());
                Assert.AreEqual(0f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r22_OtherLosses).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r23_OnHandEndOfMonth).Single());
                Assert.AreEqual(100f, janStorageReport.ReportBody.Where(x => x.SpiritTypeReportingID == 6).Select(x => x.r24_Lines7Through23).Single());
                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test tests workflow: Buy GNS -> Redistil -> Blend -> Bottle
        /// </summary>
        [TestMethod()]
        public void BuyGNS_RedistilOnce_Make_Gin()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {

                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                {
                    RawMaterialObject gnsMaterial = new RawMaterialObject();
                    gnsMaterial.RawMaterialName = "GNS for GIN";
                    gnsMaterial.UnitType = "gal";
                    gnsMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Distilled = true;
                    gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS Purchase Test";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 90f;
                purchO.ProofGallon = 180f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 8;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // Redistil GNS into GIN and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "GNS to Gin";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 100f; // 100 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 160f; // 160pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 6; // GNS
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "GIN Blending Test";
                prodBlend.ProductionDate = new DateTimeOffset(2017, 09, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2017, 09, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2017, 09, 5, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 173.9f; // 173.9 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 46f; // 46%
                prodBlend.ProofGallon = 160f; // 160pfg
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 6; // GIN
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = prodO.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 50f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Bottling Record
                ProductionObject prodBottl = new ProductionObject();
                prodBottl.BatchName = "GIN Bottling Test ";
                prodBottl.ProductionDate = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionStart = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionEnd = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.Gauged = true;
                prodBottl.ProductionType = "Bottling";
                prodBottl.Quantity = 149.92f; // 150 gallons of alcohol
                prodBottl.VolumeByWeight = 0f;
                prodBottl.AlcoholContent = 45f; // 45%
                prodBottl.ProofGallon = 159.92f; // 159.92 pfg
                prodBottl.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBottl.SpiritTypeReportingID = 6; // Gin
                prodBottl.SpiritId = spiritId;
                prodO.ProductionTypeId = 4;
                // BUG?

                List<ObjInfo4Burndwn> usedMats4Bottl = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Bottl = new ObjInfo4Burndwn();
                uMat4Bottl.ID = productionId;
                uMat4Bottl.OldVal = 0f;
                uMat4Bottl.NewVal = prodBlend.Quantity;
                uMat4Bottl.DistillableOrigin = "prod";
                uMat4Bottl.BurningDownMethod = "volume";

                usedMats4Bottl.Add(uMat4Bottl);
                prodBottl.UsedMats = usedMats4Bottl;

                BottlingObject bottlingObj = new BottlingObject();
                bottlingObj.CaseCapacity = 10;
                bottlingObj.CaseQuantity = 113.5f;
                bottlingObj.BottleCapacity = 500f;
                bottlingObj.BottleQuantity = 1135;

                prodBottl.BottlingInfo = bottlingObj;

                prodBottl.GainLoss = -.08f;

                prodBottl.FillTestList = null;

                productionId = _production.CreateProduction(prodBottl, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                // reporting time range
                DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

                #region Produciton
                /* PRODUCTION REPORT */
                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 0f;
                part1E.ProducedTotal = 160f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 180f;
                part1E.StorageAcct = 160f;
                part1E.SpiritCatName = "Gin";
                part1E.SpiritTypeReportingID = 6;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "";
                part2thru4.MaterialKindReportingID = 0;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 0f;
                part2thru4.SpiritTypeReportingID = 0;
                part2thru4.Tanks = false;

                ProdReportPart6 part6 = new ProdReportPart6();
                part6.KindOfMaterial = "";
                part6.ProdReportMaterialCategoryID = 0;
                part6.Volume = 0f;
                part6.Weight = 0f;

                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "AlcoholUnder190";
                part5.Proof = 180f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();


                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);
                #endregion

                #region Storage
                /* STORAGE REPORT */
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                StorageReportCategory storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "AlcoholUnder190";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 180f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 0f;
                storageReportBody.r24_Lines7Through23 = 180f;
                storageReportBody.r2_DepositedInBulkStorage = 180f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 180f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);
                #endregion

                #region Processing
                /* PROCESING REPORT */
                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                ProcessReportingPart1 processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 160f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 0f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 160f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                ProcessReportingPart2 processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 160f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.FinishedProduct = "bottled";
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 159.92f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = 0f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;
                processingReportP2.RecordedLosses = .08f;

                ProcessReportingPart4 processingReportP4 = new ProcessReportingPart4();
                processingReportP4.AlcoholNeutral = 0f;
                processingReportP4.BlendedLightWhiskey = 0f;
                processingReportP4.BlendedOtherWhiskey = 0f;
                processingReportP4.BlendedStraightWhiskey = 0f;
                processingReportP4.BlendedWhiskeyWithLight = 0f;
                processingReportP4.BlendedWhiskeyWithNeutral = 0f;
                processingReportP4.Brandy170Under = 0f;
                processingReportP4.BrandyOver170 = 0f;
                processingReportP4.Cocktail = 0f;
                processingReportP4.DomesticWhiskey160Under = 0f;
                processingReportP4.DomesticWhiskeyOver160 = 0f;
                processingReportP4.Gin = 149.92f;
                processingReportP4.ImportedWhiskeyCanadian = 0f;
                processingReportP4.ImportedWhiskeyIrish = 0f;
                processingReportP4.ImportedWhiskeyScotch = 0f;
                processingReportP4.Liqueur = 0f;
                processingReportP4.ProcessingReportTypeName = "GIN";
                processingReportP4.ProcessingSpirits = "bottled";
                processingReportP4.ProcessingTypeID = 18;
                processingReportP4.RumDomestic = 0f;
                processingReportP4.RumOtherImported = 0f;
                processingReportP4.RumPuertoRican = 0f;
                processingReportP4.RumVirginIslands = 0f;
                processingReportP4.StateID = 5;
                processingReportP4.Tequila = 0f;
                processingReportP4.Vodka = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);
                #endregion // end of processing region

                #endregion

                // Assert

                #region Production Report

                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);


                Assert.AreEqual(part1E.Recd4RedistilaltionL15, actualProdReportObject.Part1List[1].Recd4RedistilaltionL15);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.SpiritCatName, actualProdReportObject.Part1List[0].SpiritCatName);
                Assert.AreEqual(part1E.SpiritTypeReportingID, actualProdReportObject.Part1List[0].SpiritTypeReportingID);
                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(0, actualProdReportObject.Part2Through4List.Count);

                // verify part 5
                Assert.AreEqual(part5.KindofSpirits, actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(part5.Proof, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);
                //Assert.AreEqual(part6.KindOfMaterial, actualProdReportObject.ProdReportPart6List[0].KindOfMaterial);
                //Assert.AreEqual(part6.ProdReportMaterialCategoryID, actualProdReportObject.ProdReportPart6List[0].ProdReportMaterialCategoryID);
                //Assert.AreEqual(part6.Volume, actualProdReportObject.ProdReportPart6List[0].Volume);
                //Assert.AreEqual(part6.Weight, actualProdReportObject.ProdReportPart6List[0].Weight);
                #endregion

                #region Storage Report
                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body
                Assert.AreEqual(storageReportBody.CategoryName, actualStorageReportObject.ReportBody[0].CategoryName);
                Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, actualStorageReportObject.ReportBody[0].r17_TransferredToProcessingAccount);
                Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, actualStorageReportObject.ReportBody[0].r18_TransferredToProductionAccount);
                Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, actualStorageReportObject.ReportBody[0].r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, actualStorageReportObject.ReportBody[0].r1_OnHandFirstOfMonth);
                Assert.AreEqual(storageReportBody.r20_Destroyed, actualStorageReportObject.ReportBody[0].r20_Destroyed);
                Assert.AreEqual(storageReportBody.r22_OtherLosses, actualStorageReportObject.ReportBody[0].r22_OtherLosses);
                Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, actualStorageReportObject.ReportBody[0].r23_OnHandEndOfMonth);
                Assert.AreEqual(storageReportBody.r24_Lines7Through23, actualStorageReportObject.ReportBody[0].r24_Lines7Through23);
                Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, actualStorageReportObject.ReportBody[0].r2_DepositedInBulkStorage);
                Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, actualStorageReportObject.ReportBody[0].r4_ReturnedToBulkStorage);
                Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, actualStorageReportObject.ReportBody[0].r6_TotalLines1Through5);
                Assert.AreEqual(storageReportBody.r7_TaxPaid, actualStorageReportObject.ReportBody[0].r7_TaxPaid);

                #endregion

                #region Processing Report
                Assert.AreEqual(reportHeaderE.DSP, actualProcessingReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProcessingReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProcessingReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProcessingReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProcessingReportObject.Header.ReportDate);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.FinishedProduct, actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                Assert.AreEqual(processingReportP4.AlcoholNeutral, actualProcessingReportObject.Part4List[0].AlcoholNeutral);
                Assert.AreEqual(processingReportP4.BlendedLightWhiskey, actualProcessingReportObject.Part4List[0].BlendedLightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedOtherWhiskey, actualProcessingReportObject.Part4List[0].BlendedOtherWhiskey);
                Assert.AreEqual(processingReportP4.BlendedStraightWhiskey, actualProcessingReportObject.Part4List[0].BlendedStraightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithLight, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithLight);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithNeutral, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithNeutral);
                Assert.AreEqual(processingReportP4.Brandy170Under, actualProcessingReportObject.Part4List[0].Brandy170Under);
                Assert.AreEqual(processingReportP4.BrandyOver170, actualProcessingReportObject.Part4List[0].BrandyOver170);
                Assert.AreEqual(processingReportP4.Cocktail, actualProcessingReportObject.Part4List[0].Cocktail);
                Assert.AreEqual(processingReportP4.DomesticWhiskey160Under, actualProcessingReportObject.Part4List[0].DomesticWhiskey160Under);
                Assert.AreEqual(processingReportP4.DomesticWhiskeyOver160, actualProcessingReportObject.Part4List[0].DomesticWhiskeyOver160);
                Assert.AreEqual(processingReportP4.Gin, actualProcessingReportObject.Part4List[1].Gin);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyCanadian, actualProcessingReportObject.Part4List[0].ImportedWhiskeyCanadian);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyIrish, actualProcessingReportObject.Part4List[0].ImportedWhiskeyIrish);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyScotch, actualProcessingReportObject.Part4List[0].ImportedWhiskeyScotch);
                Assert.AreEqual(processingReportP4.Liqueur, actualProcessingReportObject.Part4List[0].Liqueur);
                Assert.AreEqual(processingReportP4.ProcessingReportTypeName, actualProcessingReportObject.Part4List[0].ProcessingReportTypeName);
                Assert.AreEqual(processingReportP4.ProcessingSpirits, actualProcessingReportObject.Part4List[1].ProcessingSpirits);
                Assert.AreEqual(processingReportP4.ProcessingTypeID, actualProcessingReportObject.Part4List[0].ProcessingTypeID);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumOtherImported, actualProcessingReportObject.Part4List[0].RumOtherImported);
                Assert.AreEqual(processingReportP4.RumPuertoRican, actualProcessingReportObject.Part4List[0].RumPuertoRican);
                Assert.AreEqual(processingReportP4.StateID, actualProcessingReportObject.Part4List[1].StateID);
                Assert.AreEqual(processingReportP4.Tequila, actualProcessingReportObject.Part4List[0].Tequila);
                Assert.AreEqual(processingReportP4.Vodka, actualProcessingReportObject.Part4List[0].Vodka);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test tests workflow: Buy GNS -> Redistil
        /// this test verifies that line 11 of Production Report is populated
        /// </summary>
        [TestMethod()]
        public void BuyGNS_RedistilOnce_Make_Gin_And_Dont_Blend_Or_Bottle()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {

                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                {
                    RawMaterialObject gnsMaterial = new RawMaterialObject();
                    gnsMaterial.RawMaterialName = "GNS for GIN";
                    gnsMaterial.UnitType = "gal";
                    gnsMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Distilled = true;
                    gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS Purchase Test";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 90f;
                purchO.ProofGallon = 180f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 8;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // Redistil GNS into GIN and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "GNS to Gin";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 100f; // 100 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 160f; // 160pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 6; // GNS
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));
                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                // reporting time range
                DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

                #region Produciton
                /* PRODUCTION REPORT */
                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 0f;
                part1E.ProducedTotal = 160f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 180f;
                part1E.StorageAcct = 160f;
                part1E.SpiritCatName = "Gin";
                part1E.SpiritTypeReportingID = 6;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "";
                part2thru4.MaterialKindReportingID = 0;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 0f;
                part2thru4.SpiritTypeReportingID = 0;
                part2thru4.Tanks = false;

                ProdReportPart6 part6 = new ProdReportPart6();
                part6.KindOfMaterial = "";
                part6.ProdReportMaterialCategoryID = 0;
                part6.Volume = 0f;
                part6.Weight = 0f;

                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "AlcoholUnder190";
                part5.Proof = 180f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();


                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);
                #endregion

                #region Storage
                /* STORAGE REPORT */
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                StorageReportCategory storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "AlcoholUnder190";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 180f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 160f;
                storageReportBody.r24_Lines7Through23 = 160f;
                storageReportBody.r2_DepositedInBulkStorage = 180f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 160f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);
                #endregion

                #region Processing
                /* PROCESING REPORT */
                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                ProcessReportingPart1 processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 0f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 0f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 0f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                ProcessReportingPart2 processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 0f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.FinishedProduct = "bottled";
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 0f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = 0f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);
                #endregion // end of processing region

                #endregion

                // Assert

                #region Production Report
                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);
                Assert.AreEqual(part1E.Recd4RedistilaltionL15, actualProdReportObject.Part1List[1].Recd4RedistilaltionL15);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.SpiritCatName, actualProdReportObject.Part1List[0].SpiritCatName);
                Assert.AreEqual(part1E.SpiritTypeReportingID, actualProdReportObject.Part1List[0].SpiritTypeReportingID);
                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(0, actualProdReportObject.Part2Through4List.Count);

                // verify part 5
                Assert.AreEqual(part5.KindofSpirits, actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(part5.Proof, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);
                #endregion

                #region Storage Report
                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body
                Assert.AreEqual("Gin", actualStorageReportObject.ReportBody[0].CategoryName); // verifying receipt of Gin from Production that didn't go into processing report and instead, stayed in Storage report
                Assert.AreEqual(storageReportBody.CategoryName, actualStorageReportObject.ReportBody[1].CategoryName); // verifying receival of Alcohol Over 190 from Purchase
                Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, actualStorageReportObject.ReportBody[1].r17_TransferredToProcessingAccount);
                Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, actualStorageReportObject.ReportBody[1].r18_TransferredToProductionAccount);
                Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, actualStorageReportObject.ReportBody[1].r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, actualStorageReportObject.ReportBody[1].r1_OnHandFirstOfMonth);
                Assert.AreEqual(storageReportBody.r20_Destroyed, actualStorageReportObject.ReportBody[1].r20_Destroyed);
                Assert.AreEqual(storageReportBody.r22_OtherLosses, actualStorageReportObject.ReportBody[1].r22_OtherLosses);
                Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, actualStorageReportObject.ReportBody[0].r23_OnHandEndOfMonth); // we should have 160 Proof of Gin on hand at the end of the month
                Assert.AreEqual(storageReportBody.r24_Lines7Through23, actualStorageReportObject.ReportBody[0].r24_Lines7Through23);
                Assert.AreEqual(160, actualStorageReportObject.ReportBody[0].r2_DepositedInBulkStorage); // verifying receipt of Gin
                Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, actualStorageReportObject.ReportBody[1].r2_DepositedInBulkStorage); // verifying receipt of Alcohol 190 and over
                Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, actualStorageReportObject.ReportBody[1].r4_ReturnedToBulkStorage);
                Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, actualStorageReportObject.ReportBody[0].r6_TotalLines1Through5);
                Assert.AreEqual(storageReportBody.r7_TaxPaid, actualStorageReportObject.ReportBody[0].r7_TaxPaid);

                #endregion

                #region Processing Report
                Assert.AreEqual(reportHeaderE.DSP, actualProcessingReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProcessingReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProcessingReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProcessingReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProcessingReportObject.Header.ReportDate);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.FinishedProduct, actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                Assert.AreEqual(0, actualProcessingReportObject.Part4List.Count);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks correct reporting of values in Received for
        /// Redisitllation in Production Report when the same Gin redistilled again in
        /// the next month.
        /// Workflow:
        /// 1.Buy GNS in February
        /// 2.Distil Gin in February
        /// 3.Redistil Gin from #2 in March
        /// 4.Check production report for March.
        /// Received For Redistillation field should not double the values
        /// </summary>
        [TestMethod()]
        public void BuyGNS_Distil_Gin_Twice_In_Different_Months_Check_Production_Report()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {

                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                {
                    RawMaterialObject gnsMaterial = new RawMaterialObject();
                    gnsMaterial.RawMaterialName = "GNS for GIN";
                    gnsMaterial.UnitType = "gal";
                    gnsMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Distilled = true;
                    gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS Purchase Test";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 02, 10, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 96f;
                purchO.ProofGallon = 192f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 8;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // Redistil GNS into GIN and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Navy Gin";
                prodO.ProductionDate = new DateTimeOffset(2018, 02, 11, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 02, 11, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 02, 11, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; // 50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 96f; // 96%
                prodO.ProofGallon = 96f; // 96pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 6; // GNS
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // Redistil Navy GIN into another Navy GIN because the old batch was bad and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "Navy Gin Redistil";
                prodO1.ProductionDate = new DateTimeOffset(2018, 03, 10, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 03, 10, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 03, 10, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.Quantity = 50f; // 50 gallons of alcohol
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 96f; // 96%
                prodO1.ProofGallon = 96f; // 96pfg
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 6; // GNS
                prodO1.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO1.Quantity;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));
                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "March 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                // reporting time range
                DateTimeOffset start = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset end = new DateTimeOffset(2018, 03, 31, 0, 0, 0, TimeSpan.Zero);

                /* PRODUCTION REPORT */
                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 0f;
                part1E.ProducedTotal = 96f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 96f;
                part1E.StorageAcct = 96f;
                part1E.SpiritCatName = "Gin";
                part1E.SpiritTypeReportingID = 6;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "";
                part2thru4.MaterialKindReportingID = 0;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 0f;
                part2thru4.SpiritTypeReportingID = 0;
                part2thru4.Tanks = false;

                ProdReportPart6 part6 = new ProdReportPart6();
                part6.KindOfMaterial = "";
                part6.ProdReportMaterialCategoryID = 0;
                part6.Volume = 0f;
                part6.Weight = 0f;

                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "Gin";
                part5.Proof = 96f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();


                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                #endregion

                // Assert

                #region Production Report
                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);
                Assert.AreEqual(part1E.Recd4RedistilaltionL15, actualProdReportObject.Part1List[0].Recd4RedistilaltionL15);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.SpiritCatName, actualProdReportObject.Part1List[0].SpiritCatName);
                Assert.AreEqual(part1E.SpiritTypeReportingID, actualProdReportObject.Part1List[0].SpiritTypeReportingID);
                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(0, actualProdReportObject.Part2Through4List.Count);

                // verify part 5
                Assert.AreEqual(part5.KindofSpirits, actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(part5.Proof, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);
                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test population of Redistilled Filled in Production Report 
        /// when redistillation happens out of GNS produced in-house
        /// </summary>
        [TestMethod()]
        public void BuyWine_DistilAndGauge_RedistillIntoBrandyOver170()
        {
            /*------STEPS
            1. Buy Wine
            2. Distil wine into Brandy 170+ and Gauge
            3. Redistill the same record again
            4. Check Production Report
            ----------*/

            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

            // List used in assertions for received for redistillation
            List<Tuple<int, float>> received4RedistillationLine15L = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>

            // List used in assertions for entered into Storage
            List<Tuple<int, float>> enteredInStorageList = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>

            // List used in asserions for Produced Total
            List<Tuple<int, float>> producedTotalLine14L = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "test7Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 1000f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 9f;
                purchO.ProofGallon = 180f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "1stDistilRunAndGauged";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.ProductionTypeId = 2;
                prodO.Quantity = 50f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 80f; // 80pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 9; // Alcohol 190+
                prodO.MaterialKindReportingID = 81;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "2ndDistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 20f;
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 45f;
                prodO1.ProofGallon = 18f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 4; // Brandy 170 +
                prodO1.MaterialKindReportingID = 96; // neutral grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO.Quantity;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                // verify Production report Part 1
                Assert.AreEqual(0, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(0, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                // Assert that we redistilled 180 PFGals of wine
                received4RedistillationLine15L.Add(new Tuple<int, float>(purchO.SpiritTypeReportingID, purchO.ProofGallon));

                var wineE = received4RedistillationLine15L.Find(l => l.Item1 == purchO.SpiritTypeReportingID);
                var wineA = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == wineE.Item1);

                if (wineA == null)
                {
                    Assert.AreNotEqual(null, wineA, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(wineE.Item2, wineA.Recd4RedistilaltionL15);
                }

                // Assert that we redistilled 80 PFGals of Alcohol 190 +
                received4RedistillationLine15L.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                var alcohol190PlusE = received4RedistillationLine15L.Find(l => l.Item1 == prodO.SpiritTypeReportingID);
                var alcohol190PlusA = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == alcohol190PlusE.Item1);

                if (alcohol190PlusA == null)
                {
                    Assert.AreNotEqual(null, alcohol190PlusA, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(alcohol190PlusE.Item2, alcohol190PlusA.Recd4RedistilaltionL15);
                }

                // Assert that 80 PFGals went into storage for 190+
                enteredInStorageList.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                var alc190PlusE = enteredInStorageList.Find(l => l.Item1 == prodO.SpiritTypeReportingID);
                var alc190PlusA = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == alc190PlusE.Item1);

                if (alc190PlusA == null)
                {
                    Assert.AreNotEqual(null, alc190PlusA, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(alc190PlusE.Item2, alc190PlusA.StorageAcct);
                }

                // Assert that 18 PFGals went into storage for Brandy
                enteredInStorageList.Add(new Tuple<int, float>(prodO1.SpiritTypeReportingID, prodO1.ProofGallon));

                var brandy170PlusE = enteredInStorageList.Find(l => l.Item1 == prodO1.SpiritTypeReportingID);
                var brandy170PlusA = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == brandy170PlusE.Item1);

                if (brandy170PlusA == null)
                {
                    Assert.AreNotEqual(null, alcohol190PlusA, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(brandy170PlusE.Item2, brandy170PlusA.StorageAcct);
                }

                // Assert that 80 PFGals were produced for Alcohol 190+
                producedTotalLine14L.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                var alc190PlusTotalProducedE = producedTotalLine14L.Find(l => l.Item1 == prodO.SpiritTypeReportingID);
                var alc190PlusTotalProducedA = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == alc190PlusTotalProducedE.Item1);

                if (alc190PlusTotalProducedA == null)
                {
                    Assert.AreNotEqual(null, alc190PlusTotalProducedA, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(alc190PlusTotalProducedE.Item2, alc190PlusTotalProducedA.ProducedTotal);
                }

                // Assert that 18 PFGals were produced for Brandy 170+
                producedTotalLine14L.Add(new Tuple<int, float>(prodO1.SpiritTypeReportingID, prodO1.ProofGallon));

                var brandy170PlusTotalProducedE = producedTotalLine14L.Find(l => l.Item1 == prodO1.SpiritTypeReportingID);
                var brandy170PlusTotalProducedA = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == brandy170PlusTotalProducedE.Item1);

                if (brandy170PlusTotalProducedA == null)
                {
                    Assert.AreNotEqual(null, brandy170PlusTotalProducedA, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(brandy170PlusTotalProducedE.Item2, brandy170PlusTotalProducedA.ProducedTotal);
                }

                Assert.AreEqual(0, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                #endregion

            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test cheecks whether Fermented record shows up in received for redistillation in Production report
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_Ferment_DistillAndGaugeIntoBrandyUnder170()
        {
            /*------STEPS
            1. Buy Grapes
            2. Ferment grapes into wine
            3. Distil wine into Brandy 170- and Gauge
            4. Check Production Report
            ----------*/

            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

            // List used in assertions for received for redistillation
            List<Tuple<int, float>> received4RedistillationLine15L = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>

            // List used in assertions for entered into Storage
            List<Tuple<int, float>> enteredInStorageList = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>

            // List used in assertions for entered into Storage
            List<Tuple<string, float>> part5List = new List<Tuple<string, float>>(); // <SpiritTypeID, ProofGallons>

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 1000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 7, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 7, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 300f; // 300 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 12f; // %
                prodO.ProofGallon = 72f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;
                prodO.SpiritCutName = "Wine";

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2017, 09, 8, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2017, 09, 8, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2017, 09, 8, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 80f;
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 42f;
                prodO1.ProofGallon = 67.20f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO.Quantity;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports
                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                // verify Production report Part 1
                Assert.AreEqual(0, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(prodO1.ProofGallon, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(0, actualProdReportObject.Part1List[0].Recd4RedistilL17);
                Assert.AreEqual(0, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);
                Assert.AreEqual(prodO1.ProofGallon, actualProdReportObject.Part1List[0].StorageAcct); // went into storage

                // Assert that we redistilled 72 PFGals of wine
                received4RedistillationLine15L.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                // redistillation verification
                var wineE = received4RedistillationLine15L.Find(l => l.Item1 == prodO.SpiritTypeReportingID);
                var wineA = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == wineE.Item1);

                if (wineA == null)
                {
                    Assert.AreNotEqual(null, wineA, "No records in actualReceived4RedistillationPFGal for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(wineE.Item2, wineA.Recd4RedistilaltionL15);
                }

                // Assert that we get Wine and 72 PFGals in Part5
                part5List.Add(new Tuple<string, float>("Wine", prodO.ProofGallon));

                var part5E = part5List.Find(x => x.Item1 == "Wine");
                var part5A = actualProdReportObject.part5List.Find(x => x.KindofSpirits == part5E.Item1);

                if (part5A == null)
                {
                    Assert.AreNotEqual(null, part5A, "No records for Spirit Type Name");
                }
                else
                {
                    Assert.AreEqual(part5E.Item2, part5A.Proof);
                }

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test method verifies that after user buys grapes and ferments it.
        /// Produced wine should show up in Storage report.
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_ProduceWine_ShowInStorageReport()
        {
            /*
             * 1. Buy Grapes
             * 2. Ferment Grapes
             * 3. Check Storage report
             **/

            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            // List used in assertions in Storage report
            List<Tuple<int, float>> storageDepositedInBulkStorageList = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>
            List<Tuple<int, float>> storageTotalLine6StorageList = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>
            List<Tuple<int, float>> storageOnHandEndOfMonthLine23StorageList = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>
            List<Tuple<int, float>> storageTotalLine24StorageList = new List<Tuple<int, float>>(); // <SpiritTypeID, ProofGallons>

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 1000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 7, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 7, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 300f; // 300 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 12f; // %
                prodO.ProofGallon = 72f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                #region Storage Report

                StorageReportObject actualStorageReportObject = new StorageReportObject();

                //get actual storage data
                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body

                // Assert that we fermented 72 PFGals of wine
                storageDepositedInBulkStorageList.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                var wineDeportitedInBulkStorageE = storageDepositedInBulkStorageList.Find(x => x.Item1 == prodO.SpiritTypeReportingID);
                var wineDeportitedInBulkStorageA = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == wineDeportitedInBulkStorageE.Item1);

                if (wineDeportitedInBulkStorageA == null)
                {
                    Assert.AreNotEqual(null, wineDeportitedInBulkStorageA, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(wineDeportitedInBulkStorageE.Item2, wineDeportitedInBulkStorageA.r2_DepositedInBulkStorage);
                }

                storageOnHandEndOfMonthLine23StorageList.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                var wineOnHandEndOfMonthE = storageOnHandEndOfMonthLine23StorageList.Find(x => x.Item1 == prodO.SpiritTypeReportingID);
                var wineOnHandEndOfMonthA = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == prodO.SpiritTypeReportingID);

                if (wineOnHandEndOfMonthA == null)
                {
                    Assert.AreNotEqual(null, wineOnHandEndOfMonthA, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(wineOnHandEndOfMonthE.Item2, wineDeportitedInBulkStorageA.r23_OnHandEndOfMonth);
                }

                storageTotalLine6StorageList.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                var wineTotalLine6E = storageTotalLine6StorageList.Find(x => x.Item1 == prodO.SpiritTypeReportingID);
                var wineTotalLine6A = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == prodO.SpiritTypeReportingID);

                if (wineOnHandEndOfMonthA == null)
                {
                    Assert.AreNotEqual(null, wineTotalLine6A, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(wineTotalLine6E.Item2, wineTotalLine6A.r6_TotalLines1Through5);
                }

                storageTotalLine24StorageList.Add(new Tuple<int, float>(prodO.SpiritTypeReportingID, prodO.ProofGallon));

                var wineTotalLine24E = storageTotalLine6StorageList.Find(x => x.Item1 == prodO.SpiritTypeReportingID);
                var wineTotalLine24A = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == prodO.SpiritTypeReportingID);

                if (wineTotalLine24A == null)
                {
                    Assert.AreNotEqual(null, wineTotalLine24A, "No records for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(wineTotalLine24E.Item2, wineTotalLine24A.r24_Lines7Through23);
                }

                #endregion

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }

        }

        /// <summary>
        /// This test method asserts the following:
        /// Buy Grapes in Month of February
        /// Make Wine in the month of February
        /// Make Distil in the month of March
        /// When we pull production report for Month of February, no records should show up in Part 6
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_ProduceWine_Distil_InNextMonth_MakeSure_NoRecords_In_PproductionReport_Part6_This_Month()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2018, 02, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 02, 28, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 02, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 4000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 02, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 02, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 02, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 500f; // 500 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 12f; // %
                prodO.ProofGallon = 120f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 25f; // 25 gallons
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 55f;
                prodO1.ProofGallon = 27.5f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO.Quantity;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "February 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                ProductionReportingObject actualProductionReport = new ProductionReportingObject();

                //get actual storage data
                actualProductionReport = _productionReport.GetProductionReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualProductionReport.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProductionReport.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProductionReport.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProductionReport.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProductionReport.Header.ReportDate);

                // verify no Production Report Part 6
                // we shouldn't have any data shown up in this test
                Assert.AreEqual(0, actualProductionReport.ProdReportPart6List.Count);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test method asserts the following:
        /// Buy Grapes in Month of February
        /// Make Wine in the month of February
        /// Make Distil in the month of February by burning down portion of Wine
        /// When we pull production report for Month of February, Part 6 
        /// should show partial materials used ammount
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_ProduceWine_DistilPartialAmmount_ProductionReportPart6_Shows_Correct_Materials_Used_Amount()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2018, 02, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 02, 28, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 02, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 4000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 02, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 02, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 02, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 500f; // 500 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 12f; // %
                prodO.ProofGallon = 120f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2018, 02, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 02, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 02, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 25f; // 25 gallons
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 55f;
                prodO1.ProofGallon = 27.5f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = (prodO.Quantity / 2);
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "February 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                ProductionReportingObject actualProductionReport = new ProductionReportingObject();

                //get actual storage data
                actualProductionReport = _productionReport.GetProductionReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualProductionReport.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProductionReport.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProductionReport.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProductionReport.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProductionReport.Header.ReportDate);

                // verify no Production Report Part 6
                // we should display half of the used materials since only half of the wine was used in this production
                Assert.AreEqual(2000, actualProductionReport.ProdReportPart6List[0].Weight);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        // January:
        // 1) FermentedPurchase-1: Purchase grapes (10000 pounds)
        // 2) FermentedProduction-1: Ferment 40% of FermentedPurchase-1 (4000/10000 pounds into 400 wine gallons at 10% alcohol)
        // 3) DistilledProduction-1: Distill 50% of FermentedProduction-1 and mark as Brandy (200/400 wine gallons at 50% alcohol)

        // February:
        // 1) FermentedProduction-2: Ferment 30% of FermentedPurchase-1 (3000/10000 pounds into 300 wine gallons at 10% alcohol)
        // 2) DistilledProduction-2: Distill 50% of FermentedProduction-1 and mark as Brandy (200/400 wine gallons at 50% alcohol)

        // March:
        // 1) FermentedProduction-3: Ferment 30% of FermentedPurchase-1 (3000/10000 pounds into 300 wine gallons at 10% alcohol)
        // 2) DistilledProduction-3: Distill all of FermentedProduction-2/FermentedProduction-3 and mark as Brandy (600/600 wine gallons at 50% alcohol)

        // April:
        // 1) DistilledProduction-2: Redistill all three DistilledProductions into single Brandy batch (1000/1000 wine gallons at 50% alcohol)

        /// <summary>
        /// This test validates the following:
        /// Buy Grapes in January
        /// Ferment half of Grapes in January
        /// Distil half of Fermented Grapes in January as Brandy Under 170
        /// Storage report should be showing Wine as well as Brandy Under 170 columns 
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_MakeWinePartial_DistilBrandyPartial_MakeSure_WineAndBrandyBothShowUpInStorageReport()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 01, 31, 0, 0, 0, TimeSpan.Zero);

            // int - table row id
            // Table - enum identifying table type
            List<Tuple<int, Table>> garbage = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                garbage.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                garbage.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    garbage.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                garbage.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 150f; // 150 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 10f; // %
                prodO.ProofGallon = 30f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                garbage.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 50f;
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 50f;
                prodO1.ProofGallon = 50f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = prodO.Quantity / 2;
                uMat1.NewVal = prodO.Quantity / 2;
                uMat1.Proof = prodO.ProofGallon / 2;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                garbage.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "January 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                StorageReportObject expectedStorageReport = new StorageReportObject();

                List<StorageReportCategory> reportList = new List<StorageReportCategory>();

                StorageReportCategory expectedStorageReportBodyWine = new StorageReportCategory();
                expectedStorageReportBodyWine.CategoryName = "Wine";
                expectedStorageReportBodyWine.r17_TransferredToProcessingAccount = 0f;
                expectedStorageReportBodyWine.r18_TransferredToProductionAccount = 15f;
                expectedStorageReportBodyWine.r19_TransferredToOtherBondedPremises = 0;
                expectedStorageReportBodyWine.r1_OnHandFirstOfMonth = 0f;
                expectedStorageReportBodyWine.r20_Destroyed = 0f;
                expectedStorageReportBodyWine.r22_OtherLosses = 0f;
                expectedStorageReportBodyWine.r23_OnHandEndOfMonth = 15f;
                expectedStorageReportBodyWine.r24_Lines7Through23 = 30f;
                expectedStorageReportBodyWine.r2_DepositedInBulkStorage = 30f;
                expectedStorageReportBodyWine.r4_ReturnedToBulkStorage = 0f;
                expectedStorageReportBodyWine.r6_TotalLines1Through5 = 30f;
                expectedStorageReportBodyWine.r7_TaxPaid = 0f;

                reportList.Add(expectedStorageReportBodyWine);

                StorageReportCategory expectedStorageReportBodyBrandy = new StorageReportCategory();
                expectedStorageReportBodyBrandy.CategoryName = "BrandyUnder170";
                expectedStorageReportBodyBrandy.r17_TransferredToProcessingAccount = 0f;
                expectedStorageReportBodyBrandy.r18_TransferredToProductionAccount = 0f;
                expectedStorageReportBodyBrandy.r19_TransferredToOtherBondedPremises = 0;
                expectedStorageReportBodyBrandy.r1_OnHandFirstOfMonth = 0f;
                expectedStorageReportBodyBrandy.r20_Destroyed = 0f;
                expectedStorageReportBodyBrandy.r22_OtherLosses = 0f;
                expectedStorageReportBodyBrandy.r23_OnHandEndOfMonth = 50f;
                expectedStorageReportBodyBrandy.r24_Lines7Through23 = 50f;
                expectedStorageReportBodyBrandy.r2_DepositedInBulkStorage = 50f;
                expectedStorageReportBodyBrandy.r4_ReturnedToBulkStorage = 0f;
                expectedStorageReportBodyBrandy.r6_TotalLines1Through5 = 50f;
                expectedStorageReportBodyBrandy.r7_TaxPaid = 0f;

                reportList.Add(expectedStorageReportBodyBrandy);

                expectedStorageReport.ReportBody = reportList;

                StorageReportObject actualStorageReport = new StorageReportObject();

                //get actual storage data
                actualStorageReport = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReport.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReport.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReport.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReport.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReport.Header.ReportDate);

                Assert.AreEqual(3, actualStorageReport.ReportBody.Count); // Totals plus 2 spirit types

                var wineColumn = actualStorageReport.ReportBody.Find(x => x.CategoryName == "Wine"); // wine should be there
                var brandyUnder170Column = actualStorageReport.ReportBody.Find(x => x.CategoryName == "BrandyUnder170"); // brandy should be there

                Assert.IsNotNull(wineColumn);
                Assert.IsNotNull(brandyUnder170Column);

                // now, let's compare cells in the report for Wine column
                Assert.AreEqual(expectedStorageReportBodyWine.CategoryName, wineColumn.CategoryName);
                Assert.AreEqual(expectedStorageReportBodyWine.r17_TransferredToProcessingAccount, wineColumn.r17_TransferredToProcessingAccount);
                Assert.AreEqual(expectedStorageReportBodyWine.r18_TransferredToProductionAccount, wineColumn.r18_TransferredToProductionAccount);
                Assert.AreEqual(expectedStorageReportBodyWine.r19_TransferredToOtherBondedPremises, wineColumn.r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(expectedStorageReportBodyWine.r1_OnHandFirstOfMonth, wineColumn.r1_OnHandFirstOfMonth);
                Assert.AreEqual(expectedStorageReportBodyWine.r20_Destroyed, wineColumn.r20_Destroyed);
                Assert.AreEqual(expectedStorageReportBodyWine.r22_OtherLosses, wineColumn.r22_OtherLosses);
                Assert.AreEqual(expectedStorageReportBodyWine.r23_OnHandEndOfMonth, wineColumn.r23_OnHandEndOfMonth);
                Assert.AreEqual(expectedStorageReportBodyWine.r24_Lines7Through23, wineColumn.r24_Lines7Through23);
                Assert.AreEqual(expectedStorageReportBodyWine.r2_DepositedInBulkStorage, wineColumn.r2_DepositedInBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyWine.r4_ReturnedToBulkStorage, wineColumn.r4_ReturnedToBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyWine.r6_TotalLines1Through5, wineColumn.r6_TotalLines1Through5);
                Assert.AreEqual(expectedStorageReportBodyWine.r7_TaxPaid, wineColumn.r7_TaxPaid);

                // now, let's compare cells in the report for Brandy Under170 column
                Assert.AreEqual(expectedStorageReportBodyBrandy.CategoryName, brandyUnder170Column.CategoryName);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r17_TransferredToProcessingAccount, brandyUnder170Column.r17_TransferredToProcessingAccount);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r18_TransferredToProductionAccount, brandyUnder170Column.r18_TransferredToProductionAccount);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r19_TransferredToOtherBondedPremises, brandyUnder170Column.r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r1_OnHandFirstOfMonth, brandyUnder170Column.r1_OnHandFirstOfMonth);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r20_Destroyed, brandyUnder170Column.r20_Destroyed);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r22_OtherLosses, brandyUnder170Column.r22_OtherLosses);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r23_OnHandEndOfMonth, brandyUnder170Column.r23_OnHandEndOfMonth);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r24_Lines7Through23, brandyUnder170Column.r24_Lines7Through23);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r2_DepositedInBulkStorage, brandyUnder170Column.r2_DepositedInBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r4_ReturnedToBulkStorage, brandyUnder170Column.r4_ReturnedToBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r6_TotalLines1Through5, brandyUnder170Column.r6_TotalLines1Through5);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r7_TaxPaid, brandyUnder170Column.r7_TaxPaid);
                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in garbage)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test validates the following:
        /// Buy Grapes in January
        /// Ferment all of Grapes in January
        /// Distil all of Fermented Grapes in January as Brandy Under 170
        /// Storage report should be showing Wine as well as Brandy Under 170 columns 
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_MakeWine_DistilBrandy_MakeSure_WineAndBrandyBothShowUpInStorageReport()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 01, 31, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 150f; // 150 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 10f; // %
                prodO.ProofGallon = 30f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 50f;
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 50f;
                prodO1.ProofGallon = 50f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO.Quantity;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "January 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                StorageReportObject expectedStorageReport = new StorageReportObject();

                List<StorageReportCategory> reportList = new List<StorageReportCategory>();

                StorageReportCategory expectedStorageReportBodyWine = new StorageReportCategory();
                expectedStorageReportBodyWine.CategoryName = "Wine";
                expectedStorageReportBodyWine.r17_TransferredToProcessingAccount = 0f;
                expectedStorageReportBodyWine.r18_TransferredToProductionAccount = 30f;
                expectedStorageReportBodyWine.r19_TransferredToOtherBondedPremises = 0;
                expectedStorageReportBodyWine.r1_OnHandFirstOfMonth = 0f;
                expectedStorageReportBodyWine.r20_Destroyed = 0f;
                expectedStorageReportBodyWine.r22_OtherLosses = 0f;
                expectedStorageReportBodyWine.r23_OnHandEndOfMonth = 0f;
                expectedStorageReportBodyWine.r24_Lines7Through23 = 30f;
                expectedStorageReportBodyWine.r2_DepositedInBulkStorage = 30f;
                expectedStorageReportBodyWine.r4_ReturnedToBulkStorage = 0f;
                expectedStorageReportBodyWine.r6_TotalLines1Through5 = 30f;
                expectedStorageReportBodyWine.r7_TaxPaid = 0f;

                reportList.Add(expectedStorageReportBodyWine);

                StorageReportCategory expectedStorageReportBodyBrandy = new StorageReportCategory();
                expectedStorageReportBodyBrandy.CategoryName = "BrandyUnder170";
                expectedStorageReportBodyBrandy.r17_TransferredToProcessingAccount = 0f;
                expectedStorageReportBodyBrandy.r18_TransferredToProductionAccount = 0f;
                expectedStorageReportBodyBrandy.r19_TransferredToOtherBondedPremises = 0;
                expectedStorageReportBodyBrandy.r1_OnHandFirstOfMonth = 0f;
                expectedStorageReportBodyBrandy.r20_Destroyed = 0f;
                expectedStorageReportBodyBrandy.r22_OtherLosses = 0f;
                expectedStorageReportBodyBrandy.r23_OnHandEndOfMonth = 50f;
                expectedStorageReportBodyBrandy.r24_Lines7Through23 = 50f;
                expectedStorageReportBodyBrandy.r2_DepositedInBulkStorage = 50f;
                expectedStorageReportBodyBrandy.r4_ReturnedToBulkStorage = 0f;
                expectedStorageReportBodyBrandy.r6_TotalLines1Through5 = 50f;
                expectedStorageReportBodyBrandy.r7_TaxPaid = 0f;

                reportList.Add(expectedStorageReportBodyBrandy);

                expectedStorageReport.ReportBody = reportList;

                StorageReportObject actualStorageReport = new StorageReportObject();

                //get actual storage data
                actualStorageReport = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReport.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReport.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReport.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReport.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReport.Header.ReportDate);

                Assert.AreEqual(3, actualStorageReport.ReportBody.Count); // Totals plus 2 spirit types

                var wineColumn = actualStorageReport.ReportBody.Find(x => x.CategoryName == "Wine"); // wine should be there
                var brandyUnder170Column = actualStorageReport.ReportBody.Find(x => x.CategoryName == "BrandyUnder170"); // brandy should be there

                Assert.IsNotNull(wineColumn);
                Assert.IsNotNull(brandyUnder170Column);

                // now, let's compare cells in the report for Wine column
                Assert.AreEqual(expectedStorageReportBodyWine.CategoryName, wineColumn.CategoryName);
                Assert.AreEqual(expectedStorageReportBodyWine.r17_TransferredToProcessingAccount, wineColumn.r17_TransferredToProcessingAccount);
                Assert.AreEqual(expectedStorageReportBodyWine.r18_TransferredToProductionAccount, wineColumn.r18_TransferredToProductionAccount);
                Assert.AreEqual(expectedStorageReportBodyWine.r19_TransferredToOtherBondedPremises, wineColumn.r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(expectedStorageReportBodyWine.r1_OnHandFirstOfMonth, wineColumn.r1_OnHandFirstOfMonth);
                Assert.AreEqual(expectedStorageReportBodyWine.r20_Destroyed, wineColumn.r20_Destroyed);
                Assert.AreEqual(expectedStorageReportBodyWine.r22_OtherLosses, wineColumn.r22_OtherLosses);
                Assert.AreEqual(expectedStorageReportBodyWine.r23_OnHandEndOfMonth, wineColumn.r23_OnHandEndOfMonth);
                Assert.AreEqual(expectedStorageReportBodyWine.r24_Lines7Through23, wineColumn.r24_Lines7Through23);
                Assert.AreEqual(expectedStorageReportBodyWine.r2_DepositedInBulkStorage, wineColumn.r2_DepositedInBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyWine.r4_ReturnedToBulkStorage, wineColumn.r4_ReturnedToBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyWine.r6_TotalLines1Through5, wineColumn.r6_TotalLines1Through5);
                Assert.AreEqual(expectedStorageReportBodyWine.r7_TaxPaid, wineColumn.r7_TaxPaid);

                // now, let's compare cells in the report for Brandy Under170 column
                Assert.AreEqual(expectedStorageReportBodyBrandy.CategoryName, brandyUnder170Column.CategoryName);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r17_TransferredToProcessingAccount, brandyUnder170Column.r17_TransferredToProcessingAccount);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r18_TransferredToProductionAccount, brandyUnder170Column.r18_TransferredToProductionAccount);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r19_TransferredToOtherBondedPremises, brandyUnder170Column.r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r1_OnHandFirstOfMonth, brandyUnder170Column.r1_OnHandFirstOfMonth);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r20_Destroyed, brandyUnder170Column.r20_Destroyed);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r22_OtherLosses, brandyUnder170Column.r22_OtherLosses);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r23_OnHandEndOfMonth, brandyUnder170Column.r23_OnHandEndOfMonth);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r24_Lines7Through23, brandyUnder170Column.r24_Lines7Through23);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r2_DepositedInBulkStorage, brandyUnder170Column.r2_DepositedInBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r4_ReturnedToBulkStorage, brandyUnder170Column.r4_ReturnedToBulkStorage);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r6_TotalLines1Through5, brandyUnder170Column.r6_TotalLines1Through5);
                Assert.AreEqual(expectedStorageReportBodyBrandy.r7_TaxPaid, brandyUnder170Column.r7_TaxPaid);
                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        [TestMethod()]
        public void CreateSpiritTest()
        {
            // Arrange
            SpiritObject spirit = new SpiritObject();
            spirit.SpiritName = Guid.NewGuid().ToString();
            spirit.Note = Guid.NewGuid().ToString();
            spirit.ProcessingReportTypeID = 1;

            //Act
            int result =_dictionary.CreateSpirit(_userId, spirit);

            // Assert
            Assert.AreNotEqual(0, result);

            // Cleanup
            TestRecordCleanup(result, Table.Spirit);
        }

        [TestMethod()]
        public void Create_Vendor_W_All_Fields_Test()
        {
            // Arrange
            VendorObject vendor = new VendorObject();
            vendor.VendorName = Guid.NewGuid().ToString();
            vendor.Note = Guid.NewGuid().ToString();

            //Act
            int result = _dictionary.CreateVendor(_userId, vendor);

            // Assert
            Assert.AreNotEqual(0, result);

            // Cleanup
            TestRecordCleanup(result, Table.Vendor);
        }

        [TestMethod()]
        public void Create_Wine_Material_W_All_Fields()
        {
            // Arrange
            RawMaterialObject wineMaterial = new RawMaterialObject();
            wineMaterial.RawMaterialName = "Wine For Brandy";
            wineMaterial.MaterialCategoryID = 2;
            wineMaterial.UnitType = "gal";
            wineMaterial.UnitTypeId = 1;
            PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
            materialBoolTypes.Fermented = true;
            wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

            //Act
            int result = _dictionary.CreateRawMaterial(_userId, wineMaterial);

            // Assert
            Assert.AreNotEqual(0, result);

            // Cleanup
            TestRecordCleanup(result, Table.MaterialDict);
        }

        [TestMethod()]
        public void Create_Water_Material_W_All_Fields()
        {
            // Arrange
            RawMaterialObject waterMaterial = new RawMaterialObject();
            waterMaterial.RawMaterialName = "Water";
            waterMaterial.UnitType = "gal";
            waterMaterial.UnitTypeId = 1;
            PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
            materialBoolTypes.Additive = true;
            waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

            //Act
            int result = _dictionary.CreateRawMaterial(_userId, waterMaterial);

            // Assert
            Assert.AreNotEqual(0, result);

            // Cleanup
            TestRecordCleanup(result, Table.MaterialDict);
        }

        [TestMethod()]
        public void CreateMaterialDistilledTest()
        {
            // Arrange
            RawMaterialObject distilledMaterial = new RawMaterialObject();
            distilledMaterial.RawMaterialName = "Distilled Product";
            distilledMaterial.UnitType = "gal";
            distilledMaterial.UnitTypeId = 1;
            PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
            materialBoolTypes.Distilled = true;
            distilledMaterial.PurchaseMaterialTypes = materialBoolTypes;

            // Act
            int result = _dictionary.CreateRawMaterial(_userId, distilledMaterial);
            var materialList = _dictionary.GetRawMaterialListDict(_userId);
            var dbResult = materialList.Single(m => m.RawMaterialId == result);
            // Assert
            Assert.AreNotEqual(0, result);
            Assert.AreEqual(dbResult.RawMaterialName, distilledMaterial.RawMaterialName);
            Assert.AreEqual(dbResult.UnitType, distilledMaterial.UnitType);
            Assert.AreEqual(dbResult.UnitTypeId, distilledMaterial.UnitTypeId);
            Assert.AreEqual(dbResult.PurchaseMaterialTypes.Distilled, distilledMaterial.PurchaseMaterialTypes.Distilled);
            Assert.AreEqual(dbResult.PurchaseMaterialTypes.Additive, distilledMaterial.PurchaseMaterialTypes.Additive);
            Assert.AreEqual(dbResult.PurchaseMaterialTypes.Fermentable, distilledMaterial.PurchaseMaterialTypes.Fermentable);
            Assert.AreEqual(dbResult.PurchaseMaterialTypes.Fermented, distilledMaterial.PurchaseMaterialTypes.Fermented);
            Assert.AreEqual(dbResult.PurchaseMaterialTypes.Supply, distilledMaterial.PurchaseMaterialTypes.Supply);
            // Cleanup
            TestRecordCleanup(result, Table.MaterialDict);
        }

        /// <summary>
        /// This test checks that all relevant records in all tables are deleted 
        /// when Fermentable Purchase record is deleted
        /// </summary>
        [TestMethod()]
        public void Delete_Purchase_Fermentable_Record_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                Assert.IsNull(purchaseFound);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that all relevant records in all tables are deleted 
        /// when Fermented Purchase record is deleted
        /// </summary>
        [TestMethod()]
        public void Delete_Purchase_Fermented_Record_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine";
                    wineMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Wine ";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 2000f;
                purchO.VolumeByWeight = 0f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                Assert.IsNull(purchaseFound);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that all relevant records in all tables are deleted 
        /// when Distilled Purchase record is deleted
        /// </summary>
        [TestMethod()]
        public void Delete_Purchase_Distilled_Record_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int distilledMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                RawMaterialObject gnsMaterial = new RawMaterialObject();
                gnsMaterial.RawMaterialName = "GNS";
                gnsMaterial.UnitType = "gal";
                gnsMaterial.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Distilled = true;
                gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                distilledMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);

                tablesForCleanupTupleList.Add(Tuple.Create(distilledMaterialId, Table.MaterialDict));

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS ";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 2000f;
                purchO.VolumeByWeight = 0f;
                purchO.ProofGallon = 96f;
                purchO.RecordId = distilledMaterialId;
                purchO.Price = 3500f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                Assert.IsNull(purchaseFound);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that all relevant records in all tables are deleted 
        /// when Additive Purchase record is deleted
        /// </summary>
        [TestMethod()]
        public void Delete_Purchase_Additive_Record_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int additiveMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                RawMaterialObject additiveMaterial = new RawMaterialObject();
                additiveMaterial.RawMaterialName = "Honey";
                additiveMaterial.UnitType = "lb";
                additiveMaterial.UnitTypeId = 2;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Additive = true;
                additiveMaterial.PurchaseMaterialTypes = materialBoolTypes;

                additiveMaterialId = _dictionary.CreateRawMaterial(_userId, additiveMaterial);

                tablesForCleanupTupleList.Add(Tuple.Create(additiveMaterialId, Table.MaterialDict));

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Honey";
                purchO.PurchaseType = "Additive";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 500f;
                purchO.ProofGallon = 0f;
                purchO.RecordId = additiveMaterialId;
                purchO.Price = 3500f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                Assert.IsNull(purchaseFound);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that all relevant records in all tables are deleted 
        /// when Supply Purchase record is deleted
        /// </summary>
        [TestMethod()]
        public void Delete_Purchase_Supply_Record_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int supplyMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject additiveMaterial = new RawMaterialObject();
                    additiveMaterial.RawMaterialName = "Bottles";
                    additiveMaterial.UnitType = "pc";
                    additiveMaterial.UnitTypeId = 7;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Supply = true;
                    additiveMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    supplyMaterialId = _dictionary.CreateRawMaterial(_userId, additiveMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(supplyMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Packaging Bottles";
                purchO.PurchaseType = "Supply";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 200f;
                purchO.VolumeByWeight = 0f;
                purchO.ProofGallon = 0f;
                purchO.RecordId = supplyMaterialId;
                purchO.Price = 500f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                Assert.IsNull(purchaseFound);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Vendor record cannot be deleted when
        /// tied to a Purchase record
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Dictionary_Vendor_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Vendor_Deletion_Test";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Assertions

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = vendorId;
                deleteObject.DeleteRecordType = "Vendor";

                // Attempt to delete vendor even though it's being used by purchase record
                ReturnObject returnResult = _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var vendorList = _dl.GetVendorData(_userId);

                var vendorFound = vendorList.Find(x => x.VendorId == vendorId);
                // Assert Vendor can't be deleted when used by purchase record.
                Assert.IsNotNull(vendorFound);
                // Assert Purchase record name used by vendor is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, purchO.PurBatchName);

                // Delete purchase record to ensure Vendor can be deleted when not used by other record.
                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                // Assert purchase record is deleted.
                Assert.IsNull(purchaseFound);

                // Attempt to delete Vendor record now that it's no longer used by purchase record
                _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var vendorList2 = _dl.GetVendorData(_userId);

                var vendorFound2 = vendorList2.Find(x => x.VendorId == vendorId);
                // Assert Vendor can be deleted when not used by purchase record.
                Assert.IsNull(vendorFound2);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Storage record cannot be deleted when
        /// tied to a Purchase or Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Dictionary_Storage_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Storage_Deletion_Test";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Assertions: Purchase

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = storageId;
                deleteObject.DeleteRecordType = "Storage";

                // Attempt to delete storage even though it's being used by Purchase record
                ReturnObject returnResult1 = _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var storList1 = _dl.GetStorageData(_userId);

                var storageFound1 = storList1.Find(x => x.StorageId == storageId);
                // Assert Storage can't be deleted when used by Purchase record.
                Assert.IsNotNull(storageFound1);
                // Assert Purchase record name used by Storage is correctly surfaced to user.
                Assert.AreEqual(returnResult1.ExecuteMessage, purchO.PurBatchName);

                // Delete Purchase record to ensure Storage can be deleted when not used by other record.
                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is deleted.
                Assert.IsNull(purchaseFound);

                #endregion

                #region Production

                // Creating temporary Purchase object in order to create Production object.
                PurchaseObject purchase = new PurchaseObject();
                purchase.PurBatchName = "Delete_Storage_Purchase";
                purchase.PurchaseType = "Fermented";
                purchase.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchase.Quantity = 1000f; // 100 gallons
                purchase.VolumeByWeight = 0f;
                purchase.AlcoholContent = 10f;
                purchase.ProofGallon = 100f;
                purchase.RecordId = grapeMaterialId;
                purchase.Price = 2500f;
                purchase.VendorId = vendorId;

                purchaseId = _purchase.CreatePurchase(purchase, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Production
                ProductionObject prodObject = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    }
                };

                productionId = _production.CreateProduction(prodObject, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Assertions: Production

                // Attempt to delete storage even though it's being used by Production record
                ReturnObject returnResult2 = _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var storList2 = _dl.GetStorageData(_userId);

                var storageFound2 = storList2.Find(x => x.StorageId == storageId);
                // Assert Storage can't be deleted when used by Purchase record.
                Assert.IsNotNull(storageFound2);
                // Assert Production record name used by Storage is correctly surfaced to user.
                Assert.AreEqual(returnResult2.ExecuteMessage, prodObject.BatchName);
                // Delete Production record to ensure Storage can be deleted when not used by other record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = productionId;
                deleteObject2.DeleteRecordType = prodObject.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList = _production.GetProductionList(_userId, "Distillation");

                var prodFound = prodList.Find(x => x.ProductionId == prodObject.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound);

                #endregion

                #region Assertions: Storage

                // Attempt to delete Storage record now that it's no longer used by any other record
                _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var storList3 = _dl.GetStorageData(_userId);

                var storFound3 = storList3.Find(x => x.StorageId == storageId);
                // Assert Storage can be deleted when not used by purchase record.
                Assert.IsNull(storFound3);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Spirit record cannot be deleted when
        /// tied to a Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Dictionary_Spirit_Test()
        {
            // Arrange
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Spirit Object
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "testSpirit";
                spirit.ProcessingReportTypeID = 19;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Production

                // Creating temporary Purchase object in order to create Production object.
                PurchaseObject purchase = new PurchaseObject();
                purchase.PurBatchName = "Delete_Spirit_Purchase";
                purchase.PurchaseType = "Fermented";
                purchase.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchase.Quantity = 1000f; // 100 gallons
                purchase.VolumeByWeight = 0f;
                purchase.AlcoholContent = 10f;
                purchase.ProofGallon = 100f;
                purchase.RecordId = grapeMaterialId;
                purchase.Price = 2500f;
                purchase.VendorId = vendorId;

                purchaseId = _purchase.CreatePurchase(purchase, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);

                // Production
                ProductionObject prodObject = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Blending",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                    SpiritId = spiritId
                };

                productionId = _production.CreateProduction(prodObject, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Assertions: Production

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = spiritId;
                deleteObject.DeleteRecordType = "Spirit";

                // Attempt to delete Spirit even though it's being used by Production record
                ReturnObject returnResult = _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var spiritList1 = _dl.GetSpiritTypeList(_userId);

                var spiritFound1 = spiritList1.Find(x => x.SpiritId == spiritId);
                // Assert Spirit can't be deleted when used by Production record.
                Assert.IsNotNull(spiritFound1);
                // Assert Production record name used by Spirit is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, prodObject.BatchName);
                // Delete Production record to ensure Spirit can be deleted when not used by other record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = productionId;
                deleteObject2.DeleteRecordType = prodObject.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList = _production.GetProductionList(_userId, "Blending");

                var prodFound = prodList.Find(x => x.ProductionId == prodObject.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound);

                #endregion

                #region Assertions

                // Attempt to delete Spirit record now that it's no longer used by purchase record
                _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var spiritList2 = _dl.GetSpiritTypeList(_userId);

                var spiritFound2 = spiritList2.Find(x => x.SpiritId == spiritId);
                // Assert Spirit can be deleted when not used by Production record.
                Assert.IsNull(spiritFound2);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Raw Material record cannot be deleted when
        /// tied to a Purchase record
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Dictionary_RawMaterial_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int rawMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "RawMaterial_Deletion_Test";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = rawMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Assertions: Purchase

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = rawMaterialId;
                deleteObject.DeleteRecordType = "RawMaterial";

                // Attempt to delete Raw Material even though it's being used by Purchase record
                ReturnObject returnResult1 = _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var rawMaterialList1 = _dictionary.GetRawMaterialListDict(_userId);

                var rawMaterialFound1 = rawMaterialList1.Find(x => x.RawMaterialId == rawMaterialId);
                // Assert Raw Material can't be deleted when used by Purchase record.
                Assert.IsNotNull(rawMaterialFound1);
                // Assert Purchase record name which uses Raw Material is correctly surfaced to user.
                Assert.AreEqual(returnResult1.ExecuteMessage, purchO.PurBatchName);

                // Delete Purchase record to ensure Raw Material can be deleted when not used by other record.
                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList = _purchase.GetPurchasesList(purchO.PurchaseType, _userId);

                var purchaseFound = purchaseList.Find(x => x.PurchaseId == purchaseId);

                // Assert purchase record is deleted.
                Assert.IsNull(purchaseFound);

                #endregion

                #region Production

                // Creating temporary Purchase object in order to create Production object.
                PurchaseObject purchase = new PurchaseObject();
                purchase.PurBatchName = "Delete_RawMaterial_Purchase";
                purchase.PurchaseType = "Fermented";
                purchase.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchase.Quantity = 1000f; // 100 gallons
                purchase.VolumeByWeight = 0f;
                purchase.AlcoholContent = 10f;
                purchase.ProofGallon = 100f;
                purchase.Price = 2500f;
                purchase.VendorId = vendorId;

                purchaseId = _purchase.CreatePurchase(purchase, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // set up blending additive list
                List<BlendingAdditive> blendingAddiveList = new List<BlendingAdditive>();
                BlendingAdditive additiveObject = new BlendingAdditive();
                additiveObject.RawMaterialId = rawMaterialId;
                blendingAddiveList.Add(additiveObject);

                // Production
                ProductionObject prodObject = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Blending",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    BlendingAdditives = blendingAddiveList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "weight",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    }
                };

                productionId = _production.CreateProduction(prodObject, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region: Assertions: Production

                // Attempt to delete Raw Material even though it's being used by Production record
                ReturnObject returnResult2 = _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var rawMaterialList2 = _dictionary.GetRawMaterialListDict(_userId);

                var rawMaterialFound2 = rawMaterialList2.Find(x => x.RawMaterialId == rawMaterialId);
                // Assert Raw Material can't be deleted when used by Production record.
                Assert.IsNotNull(rawMaterialFound2);
                // Assert Production record name which uses Raw Material is correctly surfaced to user.
                Assert.AreEqual(returnResult2.ExecuteMessage, prodObject.BatchName);
                // Delete Production record to ensure Raw Material can be deleted when not used by other record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = productionId;
                deleteObject2.DeleteRecordType = prodObject.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList = _production.GetProductionList(_userId, "Blending");

                var prodFound = prodList.Find(x => x.ProductionId == prodObject.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound);

                #endregion

                #region Assertion

                // Attempt to delete Raw Material record now that it's no longer used by other records
                _dictionary.DeleteDictionaryRecord(_userId, deleteObject);

                var rawMaterialList3 = _dictionary.GetRawMaterialListDict(_userId);

                var rawMaterialFound3 = rawMaterialList3.Find(x => x.RawMaterialId == rawMaterialId);
                // Assert Vendor can be deleted when not used by purchase record.
                Assert.IsNull(rawMaterialFound3);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Purchase Fermentable record cannot be deleted when
        /// tied to a Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Purchase_Fermentable_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject fermentableMaterial = new RawMaterialObject();
                    fermentableMaterial.RawMaterialName = "Fermentable_Material";
                    fermentableMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    fermentableMaterial.UnitType = "lb";
                    fermentableMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    fermentableMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, fermentableMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase Set up

                // Set up Purhcase Fementable record.
                PurchaseObject purchFermentable = new PurchaseObject();
                purchFermentable.PurBatchName = "Forward_Deletion_Purchase_Fermentable_Test";
                purchFermentable.PurchaseType = "Fermentable";
                purchFermentable.PurchaseDate = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
                purchFermentable.Quantity = 0f;
                purchFermentable.VolumeByWeight = 2000f;
                purchFermentable.RecordId = grapeMaterialId;
                purchFermentable.Price = 350f;
                purchFermentable.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchFermentable.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchFermentable, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Assertions

                // Set up Production Fermenation record which uses Purchase Fermentable record.
                ProductionObject prodObjectFermentation = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Fermentation",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "weight",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                productionId = _production.CreateProduction(prodObjectFermentation, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = purchaseId;
                deleteObject.DeleteRecordType = "Fermentable";

                // Try to delete Purchase Fermentable record while it's being used by Production Fermentation record.
                ReturnObject returnResult = _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList1 = _purchase.GetPurchasesList(purchFermentable.PurchaseType, _userId);

                var purchaseFound1 = purchaseList1.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is not deleted.
                Assert.IsNotNull(purchaseFound1);
                // Assert Production record name which uses Purchase record is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, prodObjectFermentation.BatchName);

                // Delete Production record to attempt to delete Purchase record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = productionId;
                deleteObject2.DeleteRecordType = prodObjectFermentation.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList = _production.GetProductionList(_userId, "Fementation");

                var prodFound = prodList.Find(x => x.ProductionId == prodObjectFermentation.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound);

                // Try to delete Purchase Fermentable record when its not being used by any record.
                _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList2 = _purchase.GetPurchasesList(purchFermentable.PurchaseType, _userId);

                var purchaseFound2 = purchaseList2.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is not deleted.
                Assert.IsNull(purchaseFound2);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Purchase Fermented record cannot be deleted when
        /// tied to a Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Purchase_Fermented_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int rawMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject fermentedMaterial = new RawMaterialObject();
                    fermentedMaterial.RawMaterialName = "Fermented_Material";
                    fermentedMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    fermentedMaterial.UnitType = "lb";
                    fermentedMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    fermentedMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialId = _dictionary.CreateRawMaterial(_userId, fermentedMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase Set up

                // Set up Purchase Fermented record.
                PurchaseObject purchFermented = new PurchaseObject();
                purchFermented.PurBatchName = "Forward_Deletion_Purchase_Fermented_Test";
                purchFermented.PurchaseType = "Fermented";
                purchFermented.PurchaseDate = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
                purchFermented.Quantity = 1000f;
                purchFermented.VolumeByWeight = 0f;
                purchFermented.RecordId = rawMaterialId;
                purchFermented.Price = 350f;
                purchFermented.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchFermented.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchFermented, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Assertions

                // Set up Production Distillation record which uses Purchase Fermented record.
                ProductionObject prodObjectDistillation = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                productionId = _production.CreateProduction(prodObjectDistillation, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = purchaseId;
                deleteObject.DeleteRecordType = "Fermented";

                // Try to delete Purchase Fermented record while it's being used by Production Distillation record.
                ReturnObject returnResult = _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList1 = _purchase.GetPurchasesList(purchFermented.PurchaseType, _userId);

                var purchaseFound1 = purchaseList1.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is not deleted.
                Assert.IsNotNull(purchaseFound1);
                // Assert Production record name which uses Purchase record is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, prodObjectDistillation.BatchName);

                // Delete Production record to attempt to delete Purchase record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = productionId;
                deleteObject2.DeleteRecordType = prodObjectDistillation.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList = _production.GetProductionList(_userId, "Distillation");

                var prodFound = prodList.Find(x => x.ProductionId == prodObjectDistillation.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound);

                // Try to delete Purchase Fermented record when its not being used by any record.
                _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList2 = _purchase.GetPurchasesList(purchFermented.PurchaseType, _userId);

                var purchaseFound2 = purchaseList2.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is deleted.
                Assert.IsNull(purchaseFound2);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Purchase DistilLed record cannot be deleted when
        /// tied to a Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Purchase_Distilled_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int rawMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject distilledMaterial = new RawMaterialObject();
                    distilledMaterial.RawMaterialName = "Distilled_Material";
                    distilledMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    distilledMaterial.UnitType = "gal";
                    distilledMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Distilled = true;
                    distilledMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialId = _dictionary.CreateRawMaterial(_userId, distilledMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase Set up

                // create Purchase Record (minimal required fields)
                PurchaseObject purchDistilled = new PurchaseObject();
                purchDistilled.PurBatchName = "Forward_Deletion_Purchase_Distilled_Test";
                purchDistilled.PurchaseType = "Distilled";
                purchDistilled.PurchaseDate = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
                purchDistilled.Quantity = 1000f;
                purchDistilled.VolumeByWeight = 0f;
                purchDistilled.RecordId = rawMaterialId;
                purchDistilled.Price = 350f;
                purchDistilled.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchDistilled.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchDistilled, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Assertions

                // Set up Production Distillation record which uses Purchase Distilled record.
                ProductionObject prodObjectDistillation = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                productionId = _production.CreateProduction(prodObjectDistillation, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = purchaseId;
                deleteObject.DeleteRecordType = "Distilled";

                // Try to delete Purchase Distilled record while it's being used by Production Distillation record.
                ReturnObject returnResult = _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList1 = _purchase.GetPurchasesList(purchDistilled.PurchaseType, _userId);

                var purchaseFound1 = purchaseList1.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is not deleted.
                Assert.IsNotNull(purchaseFound1);
                // Assert Production record name which uses Purchase record is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, prodObjectDistillation.BatchName);

                // Delete Production record to attempt to delete Purchase record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = productionId;
                deleteObject2.DeleteRecordType = prodObjectDistillation.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList1 = _production.GetProductionList(_userId, "Distillation");

                var prodFound1 = prodList1.Find(x => x.ProductionId == prodObjectDistillation.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound1);

                // Set up Production Blending record which uses Purchase Distilled record.
                ProductionObject prodObjectBlending = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Blending",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                productionId = _production.CreateProduction(prodObjectBlending, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // Try to delete Purchase Distilled record while it's being used by Production Blending record.
                returnResult = _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList2 = _purchase.GetPurchasesList(purchDistilled.PurchaseType, _userId);

                var purchaseFound2 = purchaseList2.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is not deleted.
                Assert.IsNotNull(purchaseFound2);
                // Assert Production record name which uses Purchase record is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, prodObjectBlending.BatchName);

                // Delete Production record to attempt to delete Purchase record.
                DeleteRecordObject deleteObject3 = new DeleteRecordObject();
                deleteObject3.DeleteRecordID = productionId;
                deleteObject3.DeleteRecordType = prodObjectBlending.ProductionType;
                _production.DeleteProductionExecute(deleteObject3, _userId);

                var prodList2 = _production.GetProductionList(_userId, "Blending");

                var prodFound2 = prodList2.Find(x => x.ProductionId == prodObjectBlending.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound2);

                // Set up Production Bottling record which uses Purchase Distilled record.
                ProductionObject prodObjectBottling = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Bottling",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                productionId = _production.CreateProduction(prodObjectBottling, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // Try to delete Purchase Distilled record while it's being used by Production Bottling record.
                returnResult = _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList3 = _purchase.GetPurchasesList(purchDistilled.PurchaseType, _userId);

                var purchaseFound3 = purchaseList3.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is not deleted.
                Assert.IsNotNull(purchaseFound3);
                // Assert Production record name which uses Purchase record is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, prodObjectBottling.BatchName);

                // Delete Production record to attempt to delete Purchase record.
                DeleteRecordObject deleteObject4 = new DeleteRecordObject();
                deleteObject4.DeleteRecordID = productionId;
                deleteObject4.DeleteRecordType = prodObjectBottling.ProductionType;
                _production.DeleteProductionExecute(deleteObject4, _userId);

                var prodList3 = _production.GetProductionList(_userId, "Bottling");

                var prodFound3 = prodList3.Find(x => x.ProductionId == prodObjectBlending.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound3);

                // Try to delete Purchase Fermented record when its not being used by any record.
                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList4 = _purchase.GetPurchasesList(purchDistilled.PurchaseType, _userId);

                var purchaseFound4 = purchaseList4.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is deleted.
                Assert.IsNull(purchaseFound4);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Purchase Additive record cannot be deleted when
        /// tied to a Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Purchase_Additive_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int rawMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Raw Material Object: Additive
                {
                    RawMaterialObject additiveMaterial = new RawMaterialObject();
                    additiveMaterial.RawMaterialName = "Additive_Material";
                    additiveMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    additiveMaterial.UnitType = "gal";
                    additiveMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    additiveMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialId = _dictionary.CreateRawMaterial(_userId, additiveMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase Set up

                // create Purchase Record (minimal required fields)
                PurchaseObject purchAdditive = new PurchaseObject();
                purchAdditive.PurBatchName = "Forward_Deletion_Purchase_Additive_Test";
                purchAdditive.PurchaseType = "Additive";
                purchAdditive.PurchaseDate = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
                purchAdditive.Quantity = 1000f;
                purchAdditive.VolumeByWeight = 0f;
                purchAdditive.RecordId = rawMaterialId;
                purchAdditive.Price = 350f;
                purchAdditive.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchAdditive.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchAdditive, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Assertions

                // Set up Production Blending record which uses Purchase Additve record.
                ProductionObject prodObjectBlending = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Blending",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                productionId = _production.CreateProduction(prodObjectBlending, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = purchaseId;
                deleteObject.DeleteRecordType = "Additive";

                // Try to delete Purchase Additive record while it's being used by Production Blending record.
                ReturnObject returnResult = _purchase.DeletePurchaseRecord(_userId, deleteObject);

                var purchaseList1 = _purchase.GetPurchasesList(purchAdditive.PurchaseType, _userId);

                var purchaseFound1 = purchaseList1.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is not deleted.
                Assert.IsNotNull(purchaseFound1);
                // Assert Production record name which uses Purchase record is correctly surfaced to user.
                Assert.AreEqual(returnResult.ExecuteMessage, prodObjectBlending.BatchName);

                // Delete Production record to attempt to delete Purchase record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = productionId;
                deleteObject2.DeleteRecordType = prodObjectBlending.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList = _production.GetProductionList(_userId, "Blending");

                var prodFound = prodList.Find(x => x.ProductionId == prodObjectBlending.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound);


                // Try to delete Purchase Additive record when its not being used by any record.
                _purchase.DeletePurchaseExecute(purchaseId, _userId);

                var purchaseList2 = _purchase.GetPurchasesList(purchAdditive.PurchaseType, _userId);

                var purchaseFound2 = purchaseList2.Find(x => x.PurchaseId == purchaseId);

                // Assert Purchase record is deleted.
                Assert.IsNull(purchaseFound2);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Production Fermentation record cannot be deleted when
        /// tied to another Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Production_Fermentation_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject fermentableMaterial = new RawMaterialObject();
                    fermentableMaterial.RawMaterialName = "Fermentable_Material";
                    fermentableMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    fermentableMaterial.UnitType = "lb";
                    fermentableMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    fermentableMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, fermentableMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase Set up

                // Set up Purhcase Fementable record.
                PurchaseObject purchFermentable = new PurchaseObject();
                purchFermentable.PurBatchName = "Fementable_Purchase_Test";
                purchFermentable.PurchaseType = "Fermentable";
                purchFermentable.PurchaseDate = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
                purchFermentable.Quantity = 0f;
                purchFermentable.VolumeByWeight = 2000f;
                purchFermentable.RecordId = grapeMaterialId;
                purchFermentable.Price = 350f;
                purchFermentable.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchFermentable.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchFermentable, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Set up Production

                // Set up Production Fermenation record
                ProductionObject prodObjectFermentation = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "Forward_Deletion_Fermenatation_Test_01",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Fermentation",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "weight",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                _production.CreateProduction(prodObjectFermentation, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectFermentation.ProductionId, Table.Production));

                // Set up Production Distillation record which uses Production Fermentation
                ProductionObject prodObjectDistillation = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "Forward_Deletion_Fermenatation_Test_02",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 78f,
                    Quantity = 50f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = prodObjectFermentation.ProductionId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "prod",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                _production.CreateProduction(prodObjectDistillation, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectDistillation.ProductionId, Table.Production));

                #endregion

                #region Assertions

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodObjectFermentation.ProductionId;
                deleteObject.DeleteRecordType = prodObjectFermentation.ProductionType;

                // Try to delete Production Fementation record while it's being used by Production Distillation record.
                ReturnObject returnResult = _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist1 = _production.GetProductionList(_userId, prodObjectFermentation.ProductionType);

                var prodFound1 = prodlist1.Find(x => x.ProductionId == prodObjectFermentation.ProductionId);

                // Assert Production Fermentation record is not deleted.
                Assert.IsNotNull(prodFound1);
                // Assert Production Distillation record name which uses Production Fermentation record is correctly surfaced to user.
                Assert.AreEqual(prodObjectDistillation.BatchName, returnResult.ExecuteMessage);

                // Delete Production Distillation record to attempt to delete Production Fermentation record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = prodObjectDistillation.ProductionId;
                deleteObject2.DeleteRecordType = prodObjectDistillation.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList2 = _production.GetProductionList(_userId, prodObjectDistillation.ProductionType);

                var prodFound2 = prodList2.Find(x => x.ProductionId == prodObjectDistillation.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound2);

                // Try to delete Production Fermentation record when its not being used by any record.
                _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist3 = _production.GetProductionList(_userId, prodObjectFermentation.ProductionType);

                var prodFound3 = prodlist3.Find(x => x.ProductionId == prodObjectFermentation.ProductionId);

                // Assert Purchase record is not deleted.
                Assert.IsNull(prodFound3);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Production Distillation record cannot be deleted when
        /// tied to another Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Production_Distillation_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int rawMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject fermentedMaterial = new RawMaterialObject();
                    fermentedMaterial.RawMaterialName = "Fermented_Material";
                    fermentedMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    fermentedMaterial.UnitType = "gal";
                    fermentedMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    fermentedMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialId = _dictionary.CreateRawMaterial(_userId, fermentedMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase Set up

                // Set up Purhcase Fermented record.
                PurchaseObject purchFermented = new PurchaseObject();
                purchFermented.PurBatchName = "Fermented_Purchase_Test";
                purchFermented.PurchaseType = "Fermented";
                purchFermented.PurchaseDate = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
                purchFermented.Quantity = 1000f;
                purchFermented.VolumeByWeight = 0f;
                purchFermented.RecordId = rawMaterialId;
                purchFermented.Price = 350f;
                purchFermented.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchFermented.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchFermented, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Set up Production

                // Set up Production Distillation1 record
                ProductionObject prodObjectDistillation1 = new ProductionObject
                {
                    AlcoholContent = 50f,
                    BatchName = "Forward_Deletion_Distillation",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 1000f,
                    Quantity = 1000f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 500,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                _production.CreateProduction(prodObjectDistillation1, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectDistillation1.ProductionId, Table.Production));

                #endregion

                #region Assertions

                // Set up Production Distillation2 record which uses Production Distillation1
                ProductionObject prodObjectDistillation2 = new ProductionObject
                {
                    AlcoholContent = 50f,
                    BatchName = "Forward_Deletion_Distillation-Distillation",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 100f,
                    Quantity = 100f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = prodObjectDistillation1.ProductionId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "prod",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                _production.CreateProduction(prodObjectDistillation2, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectDistillation2.ProductionId, Table.Production));

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodObjectDistillation1.ProductionId;
                deleteObject.DeleteRecordType = prodObjectDistillation1.ProductionType;

                // Try to delete Production Distillation1 record while it's being used by Production Distillation2 record.
                ReturnObject returnResult = _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist1 = _production.GetProductionList(_userId, prodObjectDistillation1.ProductionType);

                var prodFound1 = prodlist1.Find(x => x.ProductionId == prodObjectDistillation1.ProductionId);

                // Assert Production Distillation1 record is not deleted.
                Assert.IsNotNull(prodFound1);
                // Assert Production Distillation2 record name which uses Production Distillation1 record is correctly surfaced to user.
                Assert.AreEqual(prodObjectDistillation2.BatchName, returnResult.ExecuteMessage);

                // Delete Production Distillation2 record to attempt to delete Production Distillation1 record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = prodObjectDistillation2.ProductionId;
                deleteObject2.DeleteRecordType = prodObjectDistillation2.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList2 = _production.GetProductionList(_userId, prodObjectDistillation2.ProductionType);

                var prodFound2 = prodList2.Find(x => x.ProductionId == prodObjectDistillation2.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound2);


                // Set up Production Blending record which uses Production Distillation1 record.
                ProductionObject prodObjectBlending = new ProductionObject
                {
                    AlcoholContent = 50f,
                    BatchName = "Forward_Deletion_Distillation-Blending",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Blending",
                    ProofGallon = 100f,
                    Quantity = 100f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = prodObjectDistillation1.ProductionId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "prod",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                _production.CreateProduction(prodObjectBlending, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectBlending.ProductionId, Table.Production));

                // Try to delete Production Distillation1 record while it's being used by Production Blending record.
                ReturnObject returnResult2 = _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist3 = _production.GetProductionList(_userId, prodObjectDistillation1.ProductionType);

                var prodFound3 = prodlist3.Find(x => x.ProductionId == prodObjectDistillation1.ProductionId);

                // Assert Production Distillation1 record is not deleted.
                Assert.IsNotNull(prodFound3);
                // Assert Production Blending record name which uses Production Distillation1 record is correctly surfaced to user.
                Assert.AreEqual(prodObjectBlending.BatchName, returnResult2.ExecuteMessage);

                // Delete Production Blending record to attempt to delete Production Distillation1 record.
                DeleteRecordObject deleteObject3 = new DeleteRecordObject();
                deleteObject3.DeleteRecordID = prodObjectBlending.ProductionId;
                deleteObject3.DeleteRecordType = prodObjectBlending.ProductionType;
                _production.DeleteProductionExecute(deleteObject3, _userId);

                var prodList4 = _production.GetProductionList(_userId, prodObjectBlending.ProductionType);

                var prodFound4 = prodList4.Find(x => x.ProductionId == prodObjectBlending.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound4);


                // Set up Production Bottling record which uses Production Distillation1 record.
                ProductionObject prodObjectBottling = new ProductionObject
                {
                    BatchName = "Forward_Deletion_Distillation-Bottling",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Bottling",
                    Quantity = 100f,
                    VolumeByWeight = 0f,
                    AlcoholContent = 50f,
                    ProofGallon = 100f,
                    Storage = storageList,
                    SpiritTypeReportingID = 2,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = prodObjectDistillation1.ProductionId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "prod",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                    BottlingInfo = new BottlingObject
                    {
                        CaseCapacity = 12,
                        CaseQuantity = 9.42f,
                        BottleCapacity = 750f,
                        BottleQuantity = 113,

                    },
                    GainLoss = .10f,
                    FillTestList = null,
                };

                _production.CreateProduction(prodObjectBottling, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectBottling.ProductionId, Table.Production));

                // Try to delete Production Distillation1 record while it's being used by Production Bottling record.
                ReturnObject returnResult3 = _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist5 = _production.GetProductionList(_userId, prodObjectDistillation1.ProductionType);

                var prodFound5 = prodlist5.Find(x => x.ProductionId == prodObjectDistillation1.ProductionId);

                // Assert Production Distillation1 record is not deleted.
                Assert.IsNotNull(prodFound5);
                // Assert Production Bottling record name which uses Production Distillation1 record is correctly surfaced to user.
                Assert.AreEqual(prodObjectBottling.BatchName, returnResult3.ExecuteMessage);

                // Delete Production Bottling record to attempt to delete Production Distillation1 record.
                DeleteRecordObject deleteObject4 = new DeleteRecordObject();
                deleteObject4.DeleteRecordID = prodObjectBottling.ProductionId;
                deleteObject4.DeleteRecordType = prodObjectBottling.ProductionType;
                _production.DeleteProductionExecute(deleteObject4, _userId);

                var prodList6 = _production.GetProductionList(_userId, prodObjectBottling.ProductionType);

                var prodFound6 = prodList6.Find(x => x.ProductionId == prodObjectBottling.ProductionId);

                // Assert Production record is deleted.
                Assert.IsNull(prodFound4);

                // Try to delete Production Distillation1 record when its not being used by any record.
                _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist7 = _production.GetProductionList(_userId, prodObjectDistillation1.ProductionType);

                var prodFound7 = prodlist7.Find(x => x.ProductionId == prodObjectDistillation1.ProductionId);

                // Assert Purchase record is not deleted.
                Assert.IsNull(prodFound7);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks that a Production Blending record cannot be deleted when
        /// tied to another Production record.
        /// </summary>
        [TestMethod()]
        public void Forward_Delete_Production_Blending_Test()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int rawMaterialId = 0;
            int purchaseId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                {
                    RawMaterialObject distilledMaterial = new RawMaterialObject();
                    distilledMaterial.RawMaterialName = "Distilled_Material";
                    distilledMaterial.UnitType = "gal";
                    distilledMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Distilled = true;
                    distilledMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    rawMaterialId = _dictionary.CreateRawMaterial(_userId, distilledMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase Set up

                // Set up Purchase Distilled record 
                PurchaseObject purchDistilled = new PurchaseObject
                {
                    PurBatchName = "Forward_Deletion_Purchase_Distilled_Test",
                    PurchaseType = "Distilled",
                    PurchaseDate = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero),
                    Quantity = 1000f,
                    VolumeByWeight = 0f,
                    RecordId = rawMaterialId,
                    Price = 350f,
                    VendorId = vendorId,
                };

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchDistilled.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchDistilled, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Set up Production

                // Set up Production Distillation record
                ProductionObject prodObjectDistillation = new ProductionObject
                {
                    AlcoholContent = 50f,
                    BatchName = "Forward_Deletion_Distillation",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 1000f,
                    Quantity = 1000f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 500,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                _production.CreateProduction(prodObjectDistillation, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectDistillation.ProductionId, Table.Production));

                // Set up Production Blending record which uses Production Distillation record.
                ProductionObject prodObjectBlending = new ProductionObject
                {
                    AlcoholContent = 50f,
                    BatchName = "Forward_Deletion_Blending",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Blending",
                    ProofGallon = 100f,
                    Quantity = 100f,
                    SpiritTypeReportingID = 2,
                    Storage = storageList,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = prodObjectDistillation.ProductionId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "prod",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                };

                _production.CreateProduction(prodObjectBlending, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectBlending.ProductionId, Table.Production));

                // Set up Production Bottling record which uses Production Blending record.
                ProductionObject prodObjectBottling = new ProductionObject
                {
                    BatchName = "Forward_Deletion_Blending-Bottling",
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Bottling",
                    Quantity = 100f,
                    VolumeByWeight = 0f,
                    AlcoholContent = 50f,
                    ProofGallon = 100f,
                    Storage = storageList,
                    SpiritTypeReportingID = 2,
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = prodObjectBlending.ProductionId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "prod",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    },
                    BottlingInfo = new BottlingObject
                    {
                        CaseCapacity = 12,
                        CaseQuantity = 9.42f,
                        BottleCapacity = 750f,
                        BottleQuantity = 113,

                    },
                    GainLoss = .10f,
                    FillTestList = null,
                };

                _production.CreateProduction(prodObjectBottling, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(prodObjectBottling.ProductionId, Table.Production));

                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodObjectBlending.ProductionId;
                deleteObject.DeleteRecordType = prodObjectBlending.ProductionType;

                // Try to delete Production Blending record while it's being used by Production Bottling record.
                ReturnObject returnResult = _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist = _production.GetProductionList(_userId, prodObjectBlending.ProductionType);

                var prodFound = prodlist.Find(x => x.ProductionId == prodObjectBlending.ProductionId);

                // Assert Production Blending record is not deleted.
                Assert.IsNotNull(prodFound);
                // Assert Production Bottling record name which uses Production Blending record is correctly surfaced to user.
                Assert.AreEqual(prodObjectBottling.BatchName, returnResult.ExecuteMessage);

                // Delete Production Bottling record to attempt to delete Production Blending record.
                DeleteRecordObject deleteObject2 = new DeleteRecordObject();
                deleteObject2.DeleteRecordID = prodObjectBottling.ProductionId;
                deleteObject2.DeleteRecordType = prodObjectBottling.ProductionType;
                _production.DeleteProductionExecute(deleteObject2, _userId);

                var prodList2 = _production.GetProductionList(_userId, prodObjectBottling.ProductionType);

                var prodFound2 = prodList2.Find(x => x.ProductionId == prodObjectBottling.ProductionId);

                // Assert Production Bottling record is deleted.
                Assert.IsNull(prodFound2);

                // Try to delete Production Blending record when its not being used by any record.
                _production.DeleteProductionRecord(_userId, deleteObject);

                var prodlist3 = _production.GetProductionList(_userId, prodObjectBlending.ProductionType);

                var prodFound3 = prodlist3.Find(x => x.ProductionId == prodObjectBlending.ProductionId);

                // Assert Purchase record is not deleted.
                Assert.IsNull(prodFound3);

                #endregion

            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        [TestMethod()]
        public void DeleteProductionTest()
        {
            List<Tuple<int, Table>> cleanupList = new List<Tuple<int, Table>>();
            int storageId = 0;
            int materialId = 0;
            int purchaseId = 0;
            int productionId = 0;
            int vendorId = 0;

            try
            {
                // Storage
                StorageObject storage = new StorageObject()
                {
                    StorageName = "DeleteProductionTest_Storage",
                    SerialNumber = "2H29NNS"
                };

                storageId = _dictionary.CreateStorage(_userId, storage);
                cleanupList.Add(Tuple.Create(storageId, Table.Storage));

                // Vendor
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "DeleteProductionTest_Vendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                cleanupList.Add(Tuple.Create(vendorId, Table.Vendor));

                // Raw material
                RawMaterialObject material = new RawMaterialObject();
                material.RawMaterialName = "DeleteProductionTest_RawMaterial";
                material.MaterialCategoryID = 2;
                material.UnitType = "gal";
                material.UnitTypeId = 1;
                PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                materialBoolTypes.Fermented = true;
                material.PurchaseMaterialTypes = materialBoolTypes;

                materialId = _dictionary.CreateRawMaterial(_userId, material);
                cleanupList.Add(Tuple.Create(materialId, Table.MaterialDict));

                // Purchase
                PurchaseObject purchase = new PurchaseObject();
                purchase.PurBatchName = "DeleteProductionTest_Purchase";
                purchase.PurchaseType = "Fermented";
                purchase.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchase.Quantity = 1000f; // 100 gallons
                purchase.VolumeByWeight = 0f;
                purchase.AlcoholContent = 10f;
                purchase.ProofGallon = 100f;
                purchase.RecordId = materialId;
                purchase.Price = 2500f;
                purchase.VendorId = vendorId;

                purchaseId = _purchase.CreatePurchase(purchase, _userId);
                cleanupList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Production
                ProductionObject prodObject = new ProductionObject
                {
                    AlcoholContent = 39f,
                    BatchName = "TEST",
                    Gauged = true,
                    MaterialKindReportingID = 92,
                    ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionType = "Distillation",
                    ProofGallon = 78f,
                    Quantity = 100f,
                    SpiritCutId = 9,
                    SpiritTypeReportingID = 2,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject
                        {
                            StorageId = storageId,
                            StorageName = "DeleteProductionTestStorage"
                        }
                    },
                    UsedMats = new List<ObjInfo4Burndwn> {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            BurningDownMethod = "volume",
                            DistillableOrigin = "pur",
                            NewVal = 100,
                            OldVal = 0,
                            Proof = 0
                        }
                    }
                };

                productionId = _production.CreateProduction(prodObject, _userId);
                cleanupList.Add(Tuple.Create(productionId, Table.Production));

                // Act
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = productionId;
                deleteObject.DeleteRecordType = prodObject.ProductionType;
                _production.DeleteProductionExecute(deleteObject, _userId);

                var prodQuery =
                (from production in _db.Production
                 where production.ProductionID == productionId
                 select production).FirstOrDefault();

                // Assert
                Assert.IsNull(prodQuery);
            }
            finally
            {
                // Cleanup
                foreach (var i in cleanupList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        [TestMethod()]
        public void CreateStorageTest()
        {
            // Arrange
            StorageObject storage = new StorageObject();
            storage.StorageName = "TestStorage";
            storage.SerialNumber = "123";
            storage.Capacity = 100;
            storage.Note = "TestNote";

            // Act
            int result = _dictionary.CreateStorage(_userId, storage);

            // Assert
            Assert.AreNotEqual(0, result);

            // cleanup
            TestRecordCleanup(result, Table.Storage);

        }

        [TestMethod()]
        public void GetStorageListTest()
        {
            // Act
            List<StorageObject> result = _dictionary.GetStorageList(1);

            // Assert
            Assert.IsNotNull(result, "GetStorageListTest result returned is null");
        }

        /// <summary>
        /// This test validates the following conditions
        /// Buy Grapes in January
        /// Make Wine in January
        /// Distil 100% of Wine in January
        /// Blend 50% of Distillation from the above
        /// Check to make sure Received in Bulk is updated correctly
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_Ferment_DistilGauged_BlendSomeQuantity_Test_ToMakeSure_StorageReportIsCorrect()
        {
            // Arrange
            int spiritId = 0;
            int waterMaterialId = 0;
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 01, 31, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }
                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 150f; // 150 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 10f; // %
                prodO.ProofGallon = 30f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 50f;
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 50f;
                prodO1.ProofGallon = 50f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO.Quantity;
                //uMat1.Proof = prodO.ProofGallon;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "testProdBlend";
                prodBlend.ProductionDate = new DateTimeOffset(2018, 01, 21, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2018, 01, 21, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2018, 01, 21, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 22.5f; // 22.5 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 40f; // 40%
                prodBlend.ProofGallon = 25f;
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = prodO1.Quantity / 2;
                uMat4Blend.NewVal = prodO1.Quantity / 2;
                uMat4Blend.Proof = prodO1.ProofGallon / 2;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 7.5f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports

                // verify storage report
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // check grape brandy object
                var actualStoGrapeBrandy = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "BrandyUnder170");

                if (actualStoGrapeBrandy == null)
                {
                    Assert.IsNotNull(actualStoGrapeBrandy, "Storage Grape Brandy Under 170 object should not be null");
                }
                else
                {
                    Assert.AreEqual(25f, actualStoGrapeBrandy.r2_DepositedInBulkStorage);
                    Assert.AreEqual(25f, actualStoGrapeBrandy.r6_TotalLines1Through5);
                    Assert.AreEqual(25f, actualStoGrapeBrandy.r23_OnHandEndOfMonth);
                    Assert.AreEqual(0f, actualStoGrapeBrandy.r1_OnHandFirstOfMonth);
                    Assert.AreEqual(25f, actualStoGrapeBrandy.r24_Lines7Through23);
                    Assert.AreEqual(0f, actualStoGrapeBrandy.r18_TransferredToProductionAccount);
                    Assert.AreEqual(0f, actualStoGrapeBrandy.r17_TransferredToProcessingAccount);
                }

                // check Wine object
                var actualStoWine = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "Wine");

                if (actualStoWine == null)
                {
                    Assert.IsNotNull(actualStoGrapeBrandy, "Storage Wine object should not be null");
                }
                else
                {
                    Assert.AreEqual(30f, actualStoWine.r2_DepositedInBulkStorage);
                    Assert.AreEqual(30f, actualStoWine.r6_TotalLines1Through5);
                    Assert.AreEqual(0, actualStoWine.r23_OnHandEndOfMonth);
                    Assert.AreEqual(0f, actualStoWine.r1_OnHandFirstOfMonth);
                    Assert.AreEqual(30f, actualStoWine.r24_Lines7Through23);
                    Assert.AreEqual(30f, actualStoWine.r18_TransferredToProductionAccount);
                    Assert.AreEqual(30f, actualStoWine.r6_TotalLines1Through5);
                }


                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                var expectedWine = actualProdReportObject.Part1List.Find(x => x.SpiritCatName == "Wine");

                // verify Production report part 1
                if (expectedWine == null)
                {
                    Assert.IsNotNull(expectedWine, "Expect records for Wine Category");
                }
                else
                {
                    // Wine expected output
                    Assert.AreEqual(0, expectedWine.ProccessingAcct);
                    Assert.AreEqual(0, expectedWine.StorageAcct);
                    Assert.AreEqual(0, expectedWine.ProducedTotal);
                    Assert.AreEqual(30, expectedWine.Recd4RedistilaltionL15);
                }

                var expectedBrandy = actualProdReportObject.Part1List.Find(x => x.SpiritCatName == "BrandyUnder170");

                if (expectedBrandy == null)
                {
                    Assert.IsNotNull(expectedWine, "Expect records for Brandy Category");
                }
                else
                {
                    // Brandy expected output
                    Assert.AreEqual(0, expectedBrandy.ProccessingAcct);
                    Assert.AreEqual(50, expectedBrandy.StorageAcct);
                    Assert.AreEqual(0, expectedBrandy.Recd4RedistilL17);
                    Assert.AreEqual(50, expectedBrandy.ProducedTotal);
                }

                // verify Production report Part 2 trough 4
                Assert.AreEqual("GrapeBrandy", actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(false, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(false, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(50, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(false, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(30f, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(1, actualProdReportObject.ProdReportPart6List.Count);

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }
        /// <summary>
        /// This test method checks that ProofGallon records stays on the Production report in September after
        /// it has been Blended and Bottled in October and also, it checks production report in October
        /// </summary>
        [TestMethod()]
        public void Buy_Wine_Distil_And_Gauge_In_September_Blend_And_Bottle_In_October_Make_Brandy_Under_170_And_Test_September_Production()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tupleL = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tupleL.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tupleL.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tupleL.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tupleL.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "test7Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 9f;
                purchO.ProofGallon = 18f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> stoL = new List<StorageObject>();
                StorageObject sto = new StorageObject();
                sto.StorageId = storageId;
                stoL.Add(sto);
                purchO.Storage = stoL;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tupleL.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = false;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 80f; // 80pfg
                prodO.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tupleL.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record and mark it as Gauged
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "testGaugedDistillRun";
                prodO2.ProductionDate = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 9; // hearts
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.Quantity = 15f; // 15 gallons of alcohol
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 60f; // 60%
                prodO2.ProofGallon = 18f; // 18pfg
                prodO2.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 3; // brandy under 170
                prodO2.MaterialKindReportingID = 94; // grape brandy
                prodO2.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats4Gauge = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Gauged = new ObjInfo4Burndwn();
                uMat4Gauged.ID = productionId;
                uMat4Gauged.OldVal = 0f;
                uMat4Gauged.NewVal = prodO.Quantity;
                uMat4Gauged.DistillableOrigin = "prod";
                uMat4Gauged.BurningDownMethod = "volume";

                usedMats4Gauge.Add(uMat4Gauged);
                prodO2.UsedMats = usedMats4Gauge;

                productionId = _production.CreateProduction(prodO2, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tupleL.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "testProdBlend";
                prodBlend.ProductionDate = new DateTimeOffset(2017, 10, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2017, 10, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2017, 10, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 22.5f; // 22.5 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 40f; // 40%
                prodBlend.ProofGallon = 18f; // 18pfg
                prodBlend.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = prodO2.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 7.5f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tupleL.Add(Tuple.Create(productionId, Table.Production));

                // create Production Bottling Record
                ProductionObject prodBottl = new ProductionObject();
                prodBottl.BatchName = "testProdBottling ";
                prodBottl.ProductionDate = new DateTimeOffset(2017, 10, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionStart = new DateTimeOffset(2017, 10, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionEnd = new DateTimeOffset(2017, 10, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.Gauged = true;
                prodBottl.ProductionType = "Bottling";
                prodBottl.Quantity = 22.39f; // 22.39 gallons of alcohol
                prodBottl.VolumeByWeight = 0f;
                prodBottl.AlcoholContent = 40f; // 40%
                prodBottl.ProofGallon = 17.9f; // 17.9 pfg
                prodBottl.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodBottl.SpiritTypeReportingID = 3; // brandy under 170
                prodBottl.MaterialKindReportingID = 94; // grape brandy
                prodBottl.SpiritId = spiritId;
                prodO.ProductionTypeId = 4;

                List<ObjInfo4Burndwn> usedMats4Bottl = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Bottl = new ObjInfo4Burndwn();
                uMat4Bottl.ID = productionId;
                uMat4Bottl.OldVal = 0f;
                uMat4Bottl.NewVal = prodBlend.Quantity;
                uMat4Bottl.DistillableOrigin = "prod";
                uMat4Bottl.BurningDownMethod = "volume";

                usedMats4Bottl.Add(uMat4Bottl);
                prodBottl.UsedMats = usedMats4Bottl;

                BottlingObject bottlingObj = new BottlingObject();
                bottlingObj.CaseCapacity = 12;
                bottlingObj.CaseQuantity = 9.42f;
                bottlingObj.BottleCapacity = 750f;
                bottlingObj.BottleQuantity = 113;

                prodBottl.BottlingInfo = bottlingObj;

                prodBottl.GainLoss = .10f;

                prodBottl.FillTestList = null;

                productionId = _production.CreateProduction(prodBottl, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tupleL.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                /* PRODUCTION REPORT */

                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 0f;
                part1E.ProducedTotal = 18f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 0f;
                part1E.StorageAcct = 18f;
                part1E.SpiritTypeReportingID = 3;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "GrapeBrandy";
                part2thru4.MaterialKindReportingID = 94;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 18f;
                part2thru4.SpiritTypeReportingID = 3;
                part2thru4.Tanks = false;

                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "";
                part5.Proof = 0f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();


                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                #endregion

                // Assert

                #region Production Report

                Tuple<int, float> accumulatedProofGL4SpiritTypeReportingId = new Tuple<int, float>(11, purchO.ProofGallon);

                List<Tuple<int, float>> accumulatedProofGL4SpiritTypeReportingIdL = new List<Tuple<int, float>>();

                accumulatedProofGL4SpiritTypeReportingIdL.Add(accumulatedProofGL4SpiritTypeReportingId);

                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                var expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                var actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(part2thru4.KindOfMaterial, actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(part2thru4.MaterialKindReportingID, actualProdReportObject.Part2Through4List[0].MaterialKindReportingID);
                Assert.AreEqual(part2thru4.NewCoop, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(part2thru4.UsedCoop, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(part2thru4.ProofGallons, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(part2thru4.SpiritTypeReportingID, actualProdReportObject.Part2Through4List[0].SpiritTypeReportingID);
                Assert.AreEqual(part2thru4.Tanks, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);

                // Test October Production report
                ProductionReportingObject actualProdReportObjectOctober = new ProductionReportingObject();

                actualProdReportObjectOctober = _productionReport.GetProductionReportData(new DateTimeOffset(2017, 10, 01, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2017, 10, 31, 0, 0, 0, TimeSpan.Zero), _userId);
                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObjectOctober.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObjectOctober.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObjectOctober.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObjectOctober.Header.ProprietorName);
                Assert.AreEqual("October 2017", actualProdReportObjectOctober.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(0, actualProdReportObjectOctober.Part1List.Count);
                // verify Production report Part 2 trough 4
                Assert.AreEqual(0, actualProdReportObjectOctober.Part2Through4List.Count);
                // verify part 5
                Assert.AreEqual(0, actualProdReportObjectOctober.part5List.Count);
                // verify Production report Part 6
                Assert.AreEqual(0, actualProdReportObjectOctober.ProdReportPart6List.Count);
                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tupleL)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test verifies part 4 of Production report when two different distills are distilled
        /// in Brandy Under 170 category but under different Material Categories
        /// So, in this case:
        /// Distil 1: Brandy Under 170 with Material Category of Grape Brandy
        /// Distil 2: Brandy Under 170 with Material Category of All Other Brandy
        /// </summary>
        [TestMethod()]
        public void Distill_Brandy_Under_170_Twice_Under_Two_Different_MaterialCategroires_Test()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "test7Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 11, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 98f;
                purchO.ProofGallon = 196f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 1000f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 10;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // create 1st Production Distillation Record and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 100f; //100 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 98f; // 80%
                prodO.ProofGallon = 196f; // 80pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO1 = new PurchaseObject();
                purchO1.PurBatchName = "test7Purchase";
                purchO1.PurchaseType = "Fermented";
                purchO1.PurchaseDate = new DateTimeOffset(2017, 11, 1, 0, 0, 0, TimeSpan.Zero);
                purchO1.Quantity = 100f; // 100 gallons
                purchO1.VolumeByWeight = 0f;
                purchO1.AlcoholContent = 98f;
                purchO1.ProofGallon = 196f;
                purchO1.RecordId = wineMaterialId;
                purchO1.Price = 1000f;
                purchO1.VendorId = vendorId;

                List<StorageObject> storageList1 = new List<StorageObject>();
                StorageObject storageObject1 = new StorageObject();
                storageObject1.StorageId = storageId;
                storageList1.Add(storageObject1);
                purchO1.Storage = storageList1;

                purchO1.SpiritTypeReportingID = 10;
                purchO1.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO1, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // create 1st Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "test1stDistill2";
                prodO1.ProductionDate = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2017, 11, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.Quantity = 50f; //50 gallons of alcohol
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 98f; // 98%
                prodO1.ProofGallon = 98f; // 98pfg
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // brandy under 170
                prodO1.MaterialKindReportingID = 95; // all other brandy
                prodO1.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = purchaseId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = purchO.Quantity;
                uMat1.DistillableOrigin = "pur";
                uMat1.BurningDownMethod = "volume";

                usedMats.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Act

                int novDays = DateTime.DaysInMonth(2017, 11);
                var novStart = new DateTimeOffset(2017, 11, 1, 0, 0, 0, TimeSpan.Zero);
                var novEnd = new DateTimeOffset(2017, 11, novDays, 0, 0, 0, TimeSpan.Zero);

                ProductionReportingObject productionReport = _productionReport.GetProductionReportData(novStart, novEnd, _userId);

                #endregion

                #region Assert

                // Test October Production Report
                // production report Part 4
                Dictionary<int, float> materialKindAmmounts = new Dictionary<int, float>();
                materialKindAmmounts.Add(94, prodO.ProofGallon); //Grape Brandy
                materialKindAmmounts.Add(95, prodO1.ProofGallon); //All Other Brandy

                // check Grape Brandy
                var actual = productionReport.Part2Through4List.Find(x => x.MaterialKindReportingID == 94);
                var expectedGrapeBrandyProof = materialKindAmmounts.FirstOrDefault(x => x.Key == 94).Value;

                Assert.IsNotNull(actual, "actual is null since Part4 returned no records for MaterialKindReportingID: " + 94);
                Assert.AreEqual(expectedGrapeBrandyProof, actual.ProofGallons);
                Assert.AreEqual("GrapeBrandy", actual.KindOfMaterial);

                // check All Other Brandy
                actual = productionReport.Part2Through4List.Find(x => x.MaterialKindReportingID == 95);
                var expectedAllOtherBrandyProof = materialKindAmmounts.FirstOrDefault(x => x.Key == 95).Value;

                Assert.IsNotNull(actual, "actual is null since Part4 returned no records for MaterialKindReportingID: " + 95);
                Assert.AreEqual(expectedAllOtherBrandyProof, actual.ProofGallons);
                Assert.AreEqual("AllOtherBrandy", actual.KindOfMaterial);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test method verifies that when Bottling record
        /// is deleted, all other records amounts' that were involved in making this
        /// bottling record originally, are reinstated. Effectively, we should be re-instating values for Blending records
        /// In addition, we are verifying reports update it's values as well.
        /// </summary>
        [TestMethod()]
        public void DeleteWorkFlow_BuyWine_Distil_DistilAgain_Blend_Bottle_DeleteBottling_EnsureOtherRecords_Intact()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tupleL = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tupleL.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tupleL.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tupleL.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tupleL.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Feremented Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 9f;
                purchO.ProofGallon = 18f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> stoL = new List<StorageObject>();
                StorageObject sto = new StorageObject();
                sto.StorageId = storageId;
                stoL.Add(sto);
                purchO.Storage = stoL;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tupleL.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = false;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 80f; // 80pfg
                prodO.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tupleL.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record and mark it as Gauged
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "testGaugedDistillRun";
                prodO2.ProductionDate = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 9; // hearts
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.Quantity = 15f; // 15 gallons of alcohol
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 60f; // 60%
                prodO2.ProofGallon = 18f; // 18pfg
                prodO2.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 3; // brandy under 170
                prodO2.MaterialKindReportingID = 94; // grape brandy
                prodO2.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats4Gauge = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Gauged = new ObjInfo4Burndwn();
                uMat4Gauged.ID = productionId;
                uMat4Gauged.OldVal = 0f;
                uMat4Gauged.NewVal = prodO.Quantity;
                uMat4Gauged.DistillableOrigin = "prod";
                uMat4Gauged.BurningDownMethod = "volume";

                usedMats4Gauge.Add(uMat4Gauged);
                prodO2.UsedMats = usedMats4Gauge;

                int productionFinalDistillationId = _production.CreateProduction(prodO2, _userId);

                tupleL.Add(Tuple.Create(productionFinalDistillationId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "testProdBlend";
                prodBlend.ProductionDate = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 22.5f; // 22.5 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 40f; // 40%
                prodBlend.ProofGallon = 18f; // 18pfg
                prodBlend.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionFinalDistillationId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = prodO2.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 7.5f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                int productionBlendingId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tupleL.Add(Tuple.Create(productionBlendingId, Table.Production));

                // create Production Bottling Record
                ProductionObject prodBottl = new ProductionObject();
                prodBottl.BatchName = "testProdBottling ";
                prodBottl.ProductionDate = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionStart = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionEnd = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBottl.Gauged = true;
                prodBottl.ProductionType = "Bottling";
                prodBottl.Quantity = 22.39f; // 22.39 gallons of alcohol
                prodBottl.VolumeByWeight = 0f;
                prodBottl.AlcoholContent = 40f; // 40%
                prodBottl.ProofGallon = 17.9f; // 17.9 pfg
                prodBottl.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodBottl.SpiritTypeReportingID = 3; // brandy under 170
                prodBottl.MaterialKindReportingID = 94; // grape brandy
                prodBottl.SpiritId = spiritId;
                prodO.ProductionTypeId = 4;

                List<ObjInfo4Burndwn> usedMats4Bottl = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Bottl = new ObjInfo4Burndwn();
                uMat4Bottl.ID = productionBlendingId;
                uMat4Bottl.OldVal = 0f;
                uMat4Bottl.NewVal = prodBlend.Quantity;
                uMat4Bottl.DistillableOrigin = "prod";
                uMat4Bottl.BurningDownMethod = "volume";

                usedMats4Bottl.Add(uMat4Bottl);
                prodBottl.UsedMats = usedMats4Bottl;

                BottlingObject bottlingObj = new BottlingObject();
                bottlingObj.CaseCapacity = 12;
                bottlingObj.CaseQuantity = 9.42f;
                bottlingObj.BottleCapacity = 750f;
                bottlingObj.BottleQuantity = 113;

                prodBottl.BottlingInfo = bottlingObj;

                prodBottl.GainLoss = -.10f;

                prodBottl.FillTestList = null;

                int productionBottlingId = _production.CreateProduction(prodBottl, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tupleL.Add(Tuple.Create(productionBottlingId, Table.Production));

                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                /* PRODUCTION REPORT */

                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 0f;
                part1E.ProducedTotal = 18f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 0f;
                part1E.StorageAcct = 18f;
                part1E.SpiritTypeReportingID = 3;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "GrapeBrandy";
                part2thru4.MaterialKindReportingID = 94;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 18f;
                part2thru4.SpiritTypeReportingID = 3;
                part2thru4.Tanks = false;

                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "";
                part5.Proof = 0f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                ProcessingReportingObject actualProcessingReportO = new ProcessingReportingObject();

                #endregion

                // Assert

                #region Production Report Before Deletion

                Tuple<int, float> accumulatedProofGL4SpiritTypeReportingId = new Tuple<int, float>(11, purchO.ProofGallon);

                List<Tuple<int, float>> accumulatedProofGL4SpiritTypeReportingIdL = new List<Tuple<int, float>>();

                accumulatedProofGL4SpiritTypeReportingIdL.Add(accumulatedProofGL4SpiritTypeReportingId);

                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                var expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                var actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(part2thru4.KindOfMaterial, actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(part2thru4.MaterialKindReportingID, actualProdReportObject.Part2Through4List[0].MaterialKindReportingID);
                Assert.AreEqual(part2thru4.NewCoop, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(part2thru4.UsedCoop, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(part2thru4.ProofGallons, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(part2thru4.SpiritTypeReportingID, actualProdReportObject.Part2Through4List[0].SpiritTypeReportingID);
                Assert.AreEqual(part2thru4.Tanks, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);

                #endregion

                #region Processing Report Before Deletion
                /* PROCESING REPORT */
                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                ProcessReportingPart1 processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 18f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 0f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 18f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                ProcessReportingPart2 processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 18f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.FinishedProduct = "bottled";
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 17.9f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = .1f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;

                ProcessReportingPart4 processingReportP4 = new ProcessReportingPart4();
                processingReportP4.AlcoholNeutral = 0f;
                processingReportP4.BlendedLightWhiskey = 0f;
                processingReportP4.BlendedOtherWhiskey = 0f;
                processingReportP4.BlendedStraightWhiskey = 0f;
                processingReportP4.BlendedWhiskeyWithLight = 0f;
                processingReportP4.BlendedWhiskeyWithNeutral = 0f;
                processingReportP4.Brandy170Under = 22.39f;
                processingReportP4.BrandyOver170 = 0f;
                processingReportP4.Cocktail = 0f;
                processingReportP4.DomesticWhiskey160Under = 0f;
                processingReportP4.DomesticWhiskeyOver160 = 0f;
                processingReportP4.Gin = 0f;
                processingReportP4.ImportedWhiskeyCanadian = 0f;
                processingReportP4.ImportedWhiskeyIrish = 0f;
                processingReportP4.ImportedWhiskeyScotch = 0f;
                processingReportP4.Liqueur = 0f;
                processingReportP4.ProcessingReportTypeName = "BRANDY DISTILLED AT 170 AND UNDER";
                processingReportP4.ProcessingSpirits = "bottled";
                processingReportP4.ProcessingTypeID = 12;
                processingReportP4.RumDomestic = 0f;
                processingReportP4.RumOtherImported = 0f;
                processingReportP4.RumPuertoRican = 0f;
                processingReportP4.RumVirginIslands = 0f;
                processingReportP4.StateID = 5;
                processingReportP4.Tequila = 0f;
                processingReportP4.Vodka = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);

                Assert.AreEqual(reportHeaderE.DSP, actualProcessingReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProcessingReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProcessingReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProcessingReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProcessingReportObject.Header.ReportDate);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.FinishedProduct, actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                Assert.AreEqual(processingReportP4.AlcoholNeutral, actualProcessingReportObject.Part4List[0].AlcoholNeutral);
                Assert.AreEqual(processingReportP4.BlendedLightWhiskey, actualProcessingReportObject.Part4List[0].BlendedLightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedOtherWhiskey, actualProcessingReportObject.Part4List[0].BlendedOtherWhiskey);
                Assert.AreEqual(processingReportP4.BlendedStraightWhiskey, actualProcessingReportObject.Part4List[0].BlendedStraightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithLight, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithLight);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithNeutral, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithNeutral);
                Assert.AreEqual(processingReportP4.Brandy170Under, actualProcessingReportObject.Part4List[1].Brandy170Under);
                Assert.AreEqual(processingReportP4.BrandyOver170, actualProcessingReportObject.Part4List[0].BrandyOver170);
                Assert.AreEqual(processingReportP4.Cocktail, actualProcessingReportObject.Part4List[0].Cocktail);
                Assert.AreEqual(processingReportP4.DomesticWhiskey160Under, actualProcessingReportObject.Part4List[0].DomesticWhiskey160Under);
                Assert.AreEqual(processingReportP4.DomesticWhiskeyOver160, actualProcessingReportObject.Part4List[0].DomesticWhiskeyOver160);
                Assert.AreEqual(processingReportP4.Gin, actualProcessingReportObject.Part4List[0].Gin);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyCanadian, actualProcessingReportObject.Part4List[0].ImportedWhiskeyCanadian);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyIrish, actualProcessingReportObject.Part4List[0].ImportedWhiskeyIrish);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyScotch, actualProcessingReportObject.Part4List[0].ImportedWhiskeyScotch);
                Assert.AreEqual(processingReportP4.Liqueur, actualProcessingReportObject.Part4List[0].Liqueur);
                Assert.AreEqual(processingReportP4.ProcessingReportTypeName, actualProcessingReportObject.Part4List[0].ProcessingReportTypeName);
                Assert.AreEqual(processingReportP4.ProcessingSpirits, actualProcessingReportObject.Part4List[1].ProcessingSpirits);
                Assert.AreEqual(processingReportP4.ProcessingTypeID, actualProcessingReportObject.Part4List[0].ProcessingTypeID);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumOtherImported, actualProcessingReportObject.Part4List[0].RumOtherImported);
                Assert.AreEqual(processingReportP4.RumPuertoRican, actualProcessingReportObject.Part4List[0].RumPuertoRican);
                Assert.AreEqual(processingReportP4.StateID, actualProcessingReportObject.Part4List[1].StateID);
                Assert.AreEqual(processingReportP4.Tequila, actualProcessingReportObject.Part4List[0].Tequila);
                Assert.AreEqual(processingReportP4.Vodka, actualProcessingReportObject.Part4List[0].Vodka);
                #endregion

                #region Storage Report Before Deletion
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                StorageReportCategory storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "Wine";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 18f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 0f;
                storageReportBody.r24_Lines7Through23 = 18f;
                storageReportBody.r2_DepositedInBulkStorage = 18f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 18f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body
                Assert.AreEqual(storageReportBody.CategoryName, actualStorageReportObject.ReportBody[0].CategoryName);
                Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, actualStorageReportObject.ReportBody[0].r17_TransferredToProcessingAccount);
                Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, actualStorageReportObject.ReportBody[0].r18_TransferredToProductionAccount);
                Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, actualStorageReportObject.ReportBody[0].r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, actualStorageReportObject.ReportBody[0].r1_OnHandFirstOfMonth);
                Assert.AreEqual(storageReportBody.r20_Destroyed, actualStorageReportObject.ReportBody[0].r20_Destroyed);
                Assert.AreEqual(storageReportBody.r22_OtherLosses, actualStorageReportObject.ReportBody[0].r22_OtherLosses);
                Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, actualStorageReportObject.ReportBody[0].r23_OnHandEndOfMonth);
                Assert.AreEqual(storageReportBody.r24_Lines7Through23, actualStorageReportObject.ReportBody[0].r24_Lines7Through23);
                Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, actualStorageReportObject.ReportBody[0].r2_DepositedInBulkStorage);
                Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, actualStorageReportObject.ReportBody[0].r4_ReturnedToBulkStorage);
                Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, actualStorageReportObject.ReportBody[0].r6_TotalLines1Through5);
                Assert.AreEqual(storageReportBody.r7_TaxPaid, actualStorageReportObject.ReportBody[0].r7_TaxPaid);

                #endregion

                // let's verify the values in production report after we deleted bottling
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodBottl.ProductionId;
                deleteObject.DeleteRecordType = prodBottl.ProductionType;
                bool bottlingDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                #region Blending and Distiliing after Bottling deletion

                var amounts =
                    (from prod in _db.Production
                     where prod.ProductionID == productionBlendingId
                     join volume in _db.Volume on prod.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on prod.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on prod.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on prod.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(prodBlend.Quantity, amounts.volume);
                    Assert.AreEqual(prodBlend.VolumeByWeight, amounts.weight);
                    Assert.AreEqual(prodBlend.AlcoholContent, amounts.alcohol);
                    Assert.AreEqual(prodBlend.ProofGallon, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }

                var isBlendRecord =
                    (from prod in _db.Production
                     where prod.ProductionID == productionBlendingId
                     select prod).FirstOrDefault();

                if (isBlendRecord == null)
                {
                    Assert.IsNotNull(isBlendRecord, "blending record should exist after the deletion of Bottling record");
                }

                var isDistilRecord =
                    (from prod in _db.Production
                     where prod.ProductionID == productionFinalDistillationId
                     select prod).FirstOrDefault();

                if (isDistilRecord == null)
                {
                    Assert.IsNotNull(isDistilRecord, "distilling record should exist after the deletion of Bottling record");
                }
                #endregion

                #region Production Report After Deletion
                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(part2thru4.KindOfMaterial, actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(part2thru4.MaterialKindReportingID, actualProdReportObject.Part2Through4List[0].MaterialKindReportingID);
                Assert.AreEqual(part2thru4.NewCoop, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(part2thru4.UsedCoop, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(part2thru4.ProofGallons, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(part2thru4.SpiritTypeReportingID, actualProdReportObject.Part2Through4List[0].SpiritTypeReportingID);
                Assert.AreEqual(part2thru4.Tanks, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);
                #endregion

                #region Processing Report After Deletion
                /* PROCESING REPORT */
                actualProcessingReportObject = new ProcessingReportingObject();

                processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 0f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 18f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 18f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 0f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.FinishedProduct = "bottled";
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 0f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = 0f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;

                processingReportP4 = new ProcessReportingPart4();
                processingReportP4.ProcessingSpirits = "bulkSpiritDumped";
                processingReportP4.AlcoholNeutral = 0f;
                processingReportP4.BlendedLightWhiskey = 0f;
                processingReportP4.BlendedOtherWhiskey = 0f;
                processingReportP4.BlendedStraightWhiskey = 0f;
                processingReportP4.BlendedWhiskeyWithLight = 0f;
                processingReportP4.BlendedWhiskeyWithNeutral = 0f;
                processingReportP4.Brandy170Under = 18f;
                processingReportP4.BrandyOver170 = 0f;
                processingReportP4.Cocktail = 0f;
                processingReportP4.DomesticWhiskey160Under = 0f;
                processingReportP4.DomesticWhiskeyOver160 = 0f;
                processingReportP4.Gin = 0f;
                processingReportP4.ImportedWhiskeyCanadian = 0f;
                processingReportP4.ImportedWhiskeyIrish = 0f;
                processingReportP4.ImportedWhiskeyScotch = 0f;
                processingReportP4.Liqueur = 0f;
                processingReportP4.ProcessingReportTypeName = "BRANDY DISTILLED AT 170 AND UNDER";
                processingReportP4.ProcessingTypeID = 12;
                processingReportP4.RumDomestic = 0f;
                processingReportP4.RumOtherImported = 0f;
                processingReportP4.RumPuertoRican = 0f;
                processingReportP4.RumVirginIslands = 0f;
                processingReportP4.StateID = 4;
                processingReportP4.Tequila = 0f;
                processingReportP4.Vodka = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.FinishedProduct, actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                var actualproccessingReportPart4BottledObject = actualProcessingReportObject.Part4List.Find(x => x.ProcessingSpirits == "bottled");

                if (actualproccessingReportPart4BottledObject != null)
                {
                    Assert.IsNull(actualproccessingReportPart4BottledObject, "there should be no bottling record");
                }

                var actualproccessingReportPart4Object = actualProcessingReportObject.Part4List.Find(x => x.ProcessingSpirits == "bulkSpiritDumped");

                if (actualproccessingReportPart4Object == null)
                {
                    Assert.IsNotNull(actualproccessingReportPart4Object);
                }
                else
                {
                    Assert.AreEqual(processingReportP4.AlcoholNeutral, actualproccessingReportPart4Object.AlcoholNeutral);
                    Assert.AreEqual(processingReportP4.BlendedLightWhiskey, actualproccessingReportPart4Object.BlendedLightWhiskey);
                    Assert.AreEqual(processingReportP4.BlendedOtherWhiskey, actualproccessingReportPart4Object.BlendedOtherWhiskey);
                    Assert.AreEqual(processingReportP4.BlendedStraightWhiskey, actualproccessingReportPart4Object.BlendedStraightWhiskey);
                    Assert.AreEqual(processingReportP4.BlendedWhiskeyWithLight, actualproccessingReportPart4Object.BlendedWhiskeyWithLight);
                    Assert.AreEqual(processingReportP4.BlendedWhiskeyWithNeutral, actualproccessingReportPart4Object.BlendedWhiskeyWithNeutral);
                    Assert.AreEqual(processingReportP4.Brandy170Under, actualproccessingReportPart4Object.Brandy170Under);
                    Assert.AreEqual(processingReportP4.BrandyOver170, actualproccessingReportPart4Object.BrandyOver170);
                    Assert.AreEqual(processingReportP4.Cocktail, actualproccessingReportPart4Object.Cocktail);
                    Assert.AreEqual(processingReportP4.DomesticWhiskey160Under, actualproccessingReportPart4Object.DomesticWhiskey160Under);
                    Assert.AreEqual(processingReportP4.DomesticWhiskeyOver160, actualproccessingReportPart4Object.DomesticWhiskeyOver160);
                    Assert.AreEqual(processingReportP4.Gin, actualproccessingReportPart4Object.Gin);
                    Assert.AreEqual(processingReportP4.ImportedWhiskeyCanadian, actualproccessingReportPart4Object.ImportedWhiskeyCanadian);
                    Assert.AreEqual(processingReportP4.ImportedWhiskeyIrish, actualproccessingReportPart4Object.ImportedWhiskeyIrish);
                    Assert.AreEqual(processingReportP4.ImportedWhiskeyScotch, actualproccessingReportPart4Object.ImportedWhiskeyScotch);
                    Assert.AreEqual(processingReportP4.Liqueur, actualproccessingReportPart4Object.Liqueur);
                    Assert.AreEqual(processingReportP4.ProcessingReportTypeName, actualproccessingReportPart4Object.ProcessingReportTypeName);
                    Assert.AreEqual(processingReportP4.ProcessingSpirits, actualproccessingReportPart4Object.ProcessingSpirits);
                    Assert.AreEqual(processingReportP4.ProcessingTypeID, actualproccessingReportPart4Object.ProcessingTypeID);
                    Assert.AreEqual(processingReportP4.RumDomestic, actualproccessingReportPart4Object.RumDomestic);
                    Assert.AreEqual(processingReportP4.RumDomestic, actualproccessingReportPart4Object.RumDomestic);
                    Assert.AreEqual(processingReportP4.RumOtherImported, actualproccessingReportPart4Object.RumOtherImported);
                    Assert.AreEqual(processingReportP4.RumPuertoRican, actualproccessingReportPart4Object.RumPuertoRican);
                    Assert.AreEqual(processingReportP4.StateID, actualproccessingReportPart4Object.StateID);
                    Assert.AreEqual(processingReportP4.Tequila, actualproccessingReportPart4Object.Tequila);
                    Assert.AreEqual(processingReportP4.Vodka, actualproccessingReportPart4Object.Vodka);
                }

                #endregion

                #region Storage Report After Deletion

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tupleL)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test method verifies that when Blending record
        /// is deleted, all other records amounts' that were involved in making this
        /// blending record originally, are reinstated. Effectively, we should be re-instating values for Distilling records
        /// In addition, we are verifying reports update it's values as well.
        /// </summary>
        [TestMethod()]
        public void DeleteWorkFlow_BuyWine_Distil_DistilAgain_Blend_DeleteBlending_EnsureOtherRecords_Intact()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tupleL = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tupleL.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tupleL.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tupleL.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tupleL.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Feremented Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 9f;
                purchO.ProofGallon = 18f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> stoL = new List<StorageObject>();
                StorageObject sto = new StorageObject();
                sto.StorageId = storageId;
                stoL.Add(sto);
                purchO.Storage = stoL;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tupleL.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = false;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 80f; // 80pfg
                prodO.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tupleL.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record and mark it as Gauged
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "testGaugedDistillRun";
                prodO2.ProductionDate = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 9; // hearts
                prodO2.Gauged = true;
                prodO2.GainLoss = -10f;
                prodO2.ProductionType = "Distillation";
                prodO2.Quantity = 15f; // 15 gallons of alcohol
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 60f; // 60%
                prodO2.ProofGallon = 18f; // 18pfg
                prodO2.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 3; // brandy under 170
                prodO2.MaterialKindReportingID = 94; // grape brandy
                prodO2.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats4Gauge = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Gauged = new ObjInfo4Burndwn();
                uMat4Gauged.ID = productionId;
                uMat4Gauged.OldVal = 0f;
                uMat4Gauged.NewVal = prodO.Quantity;
                uMat4Gauged.DistillableOrigin = "prod";
                uMat4Gauged.BurningDownMethod = "volume";

                usedMats4Gauge.Add(uMat4Gauged);
                prodO2.UsedMats = usedMats4Gauge;

                int productionFinalDistillationId = _production.CreateProduction(prodO2, _userId);

                tupleL.Add(Tuple.Create(productionFinalDistillationId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "testProdBlend";
                prodBlend.ProductionDate = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2017, 09, 6, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 22.5f; // 22.5 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 40f; // 40%
                prodBlend.ProofGallon = 18f; // 18pfg
                prodBlend.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionFinalDistillationId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = prodO2.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 7.5f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                int productionBlendingId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tupleL.Add(Tuple.Create(productionBlendingId, Table.Production));

                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                /* PRODUCTION REPORT */

                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 0f;
                part1E.ProducedTotal = 18f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 0f;
                part1E.StorageAcct = 18f;
                part1E.SpiritTypeReportingID = 3;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "GrapeBrandy";
                part2thru4.MaterialKindReportingID = 94;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 18f;
                part2thru4.SpiritTypeReportingID = 3;
                part2thru4.Tanks = false;

                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "";
                part5.Proof = 0f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                ProcessingReportingObject actualProcessingReportO = new ProcessingReportingObject();

                #endregion

                // Assert

                #region Production Report Before Deletion

                Tuple<int, float> accumulatedProofGL4SpiritTypeReportingId = new Tuple<int, float>(11, purchO.ProofGallon);

                List<Tuple<int, float>> accumulatedProofGL4SpiritTypeReportingIdL = new List<Tuple<int, float>>();

                accumulatedProofGL4SpiritTypeReportingIdL.Add(accumulatedProofGL4SpiritTypeReportingId);

                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                var expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                var actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(part2thru4.KindOfMaterial, actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(part2thru4.MaterialKindReportingID, actualProdReportObject.Part2Through4List[0].MaterialKindReportingID);
                Assert.AreEqual(part2thru4.NewCoop, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(part2thru4.UsedCoop, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(part2thru4.ProofGallons, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(part2thru4.SpiritTypeReportingID, actualProdReportObject.Part2Through4List[0].SpiritTypeReportingID);
                Assert.AreEqual(part2thru4.Tanks, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);

                #endregion

                #region Processing Report Before Deletion
                /* PROCESING REPORT */
                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                ProcessReportingPart1 processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 0f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 18f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 18f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                ProcessReportingPart2 processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 0f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.FinishedProduct = "bottled";
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 0f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = 0f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;

                ProcessReportingPart4 processingReportP4 = new ProcessReportingPart4();
                processingReportP4.AlcoholNeutral = 0f;
                processingReportP4.BlendedLightWhiskey = 0f;
                processingReportP4.BlendedOtherWhiskey = 0f;
                processingReportP4.BlendedStraightWhiskey = 0f;
                processingReportP4.BlendedWhiskeyWithLight = 0f;
                processingReportP4.BlendedWhiskeyWithNeutral = 0f;
                processingReportP4.Brandy170Under = 18f;
                processingReportP4.BrandyOver170 = 0f;
                processingReportP4.Cocktail = 0f;
                processingReportP4.DomesticWhiskey160Under = 0f;
                processingReportP4.DomesticWhiskeyOver160 = 0f;
                processingReportP4.Gin = 0f;
                processingReportP4.ImportedWhiskeyCanadian = 0f;
                processingReportP4.ImportedWhiskeyIrish = 0f;
                processingReportP4.ImportedWhiskeyScotch = 0f;
                processingReportP4.Liqueur = 0f;
                processingReportP4.ProcessingReportTypeName = "BRANDY DISTILLED AT 170 AND UNDER";
                processingReportP4.ProcessingTypeID = 12;
                processingReportP4.RumDomestic = 0f;
                processingReportP4.RumOtherImported = 0f;
                processingReportP4.RumPuertoRican = 0f;
                processingReportP4.RumVirginIslands = 0f;
                processingReportP4.StateID = 4;
                processingReportP4.Tequila = 0f;
                processingReportP4.Vodka = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);

                Assert.AreEqual(reportHeaderE.DSP, actualProcessingReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProcessingReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProcessingReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProcessingReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProcessingReportObject.Header.ReportDate);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.FinishedProduct, actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                var actualProcessingReportWithBulkSpiritsDumped = actualProcessingReportObject.Part4List.Find(x => x.ProcessingSpirits == "bulkSpiritDumped");

                Assert.AreEqual(processingReportP4.AlcoholNeutral, actualProcessingReportWithBulkSpiritsDumped.AlcoholNeutral);
                Assert.AreEqual(processingReportP4.BlendedLightWhiskey, actualProcessingReportWithBulkSpiritsDumped.BlendedLightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedOtherWhiskey, actualProcessingReportWithBulkSpiritsDumped.BlendedOtherWhiskey);
                Assert.AreEqual(processingReportP4.BlendedStraightWhiskey, actualProcessingReportWithBulkSpiritsDumped.BlendedStraightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithLight, actualProcessingReportWithBulkSpiritsDumped.BlendedWhiskeyWithLight);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithNeutral, actualProcessingReportWithBulkSpiritsDumped.BlendedWhiskeyWithNeutral);
                Assert.AreEqual(processingReportP4.Brandy170Under, actualProcessingReportWithBulkSpiritsDumped.Brandy170Under);
                Assert.AreEqual(processingReportP4.BrandyOver170, actualProcessingReportWithBulkSpiritsDumped.BrandyOver170);
                Assert.AreEqual(processingReportP4.Cocktail, actualProcessingReportWithBulkSpiritsDumped.Cocktail);
                Assert.AreEqual(processingReportP4.DomesticWhiskey160Under, actualProcessingReportWithBulkSpiritsDumped.DomesticWhiskey160Under);
                Assert.AreEqual(processingReportP4.DomesticWhiskeyOver160, actualProcessingReportWithBulkSpiritsDumped.DomesticWhiskeyOver160);
                Assert.AreEqual(processingReportP4.Gin, actualProcessingReportWithBulkSpiritsDumped.Gin);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyCanadian, actualProcessingReportWithBulkSpiritsDumped.ImportedWhiskeyCanadian);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyIrish, actualProcessingReportWithBulkSpiritsDumped.ImportedWhiskeyIrish);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyScotch, actualProcessingReportWithBulkSpiritsDumped.ImportedWhiskeyScotch);
                Assert.AreEqual(processingReportP4.Liqueur, actualProcessingReportWithBulkSpiritsDumped.Liqueur);
                Assert.AreEqual(processingReportP4.ProcessingReportTypeName, actualProcessingReportWithBulkSpiritsDumped.ProcessingReportTypeName);
                Assert.AreEqual(processingReportP4.ProcessingTypeID, actualProcessingReportWithBulkSpiritsDumped.ProcessingTypeID);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportWithBulkSpiritsDumped.RumDomestic);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportWithBulkSpiritsDumped.RumDomestic);
                Assert.AreEqual(processingReportP4.RumOtherImported, actualProcessingReportWithBulkSpiritsDumped.RumOtherImported);
                Assert.AreEqual(processingReportP4.RumPuertoRican, actualProcessingReportWithBulkSpiritsDumped.RumPuertoRican);
                Assert.AreEqual(processingReportP4.StateID, actualProcessingReportWithBulkSpiritsDumped.StateID);
                Assert.AreEqual(processingReportP4.Tequila, actualProcessingReportWithBulkSpiritsDumped.Tequila);
                Assert.AreEqual(processingReportP4.Vodka, actualProcessingReportWithBulkSpiritsDumped.Vodka);

                var actualProcessingReportPart4Bottled = actualProcessingReportObject.Part4List.Find(x => x.ProcessingSpirits == "bottled");

                Assert.IsNull(actualProcessingReportPart4Bottled);

                #endregion

                #region Storage Report Before Deletion
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                StorageReportCategory storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "Wine";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 18f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 0f;
                storageReportBody.r24_Lines7Through23 = 18f;
                storageReportBody.r2_DepositedInBulkStorage = 18f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 18f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body
                Assert.AreEqual(storageReportBody.CategoryName, actualStorageReportObject.ReportBody[0].CategoryName);
                Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, actualStorageReportObject.ReportBody[0].r17_TransferredToProcessingAccount);
                Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, actualStorageReportObject.ReportBody[0].r18_TransferredToProductionAccount);
                Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, actualStorageReportObject.ReportBody[0].r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, actualStorageReportObject.ReportBody[0].r1_OnHandFirstOfMonth);
                Assert.AreEqual(storageReportBody.r20_Destroyed, actualStorageReportObject.ReportBody[0].r20_Destroyed);
                Assert.AreEqual(storageReportBody.r22_OtherLosses, actualStorageReportObject.ReportBody[0].r22_OtherLosses);
                Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, actualStorageReportObject.ReportBody[0].r23_OnHandEndOfMonth);
                Assert.AreEqual(storageReportBody.r24_Lines7Through23, actualStorageReportObject.ReportBody[0].r24_Lines7Through23);
                Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, actualStorageReportObject.ReportBody[0].r2_DepositedInBulkStorage);
                Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, actualStorageReportObject.ReportBody[0].r4_ReturnedToBulkStorage);
                Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, actualStorageReportObject.ReportBody[0].r6_TotalLines1Through5);
                Assert.AreEqual(storageReportBody.r7_TaxPaid, actualStorageReportObject.ReportBody[0].r7_TaxPaid);

                #endregion

                // let's verify the values in production report after we deleted bottling
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodBlend.ProductionId;
                deleteObject.DeleteRecordType = prodBlend.ProductionType;
                bool bottlingDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                #region Blending and Distiliing after Bottling deletion

                var amounts =
                    (from prod in _db.Production
                     where prod.ProductionID == productionFinalDistillationId
                     join volume in _db.Volume on prod.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on prod.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on prod.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on prod.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(prodO2.Quantity, amounts.volume);
                    Assert.AreEqual(prodO2.VolumeByWeight, amounts.weight);
                    Assert.AreEqual(prodO2.AlcoholContent, amounts.alcohol);
                    Assert.AreEqual(prodO2.ProofGallon, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }

                var isBlendRecord =
                    (from prod in _db.Production
                     where prod.ProductionID == productionFinalDistillationId
                     select prod).FirstOrDefault();

                if (isBlendRecord == null)
                {
                    Assert.IsNotNull(isBlendRecord, "blending record should exist after the deletion of Bottling record");
                }

                var isDistilRecord =
                    (from prod in _db.Production
                     where prod.ProductionID == productionFinalDistillationId
                     select prod).FirstOrDefault();

                if (isDistilRecord == null)
                {
                    Assert.IsNotNull(isDistilRecord, "distilling record should exist after the deletion of Bottling record");
                }
                #endregion

                #region Production Report After Deletion
                // verify Production report Part 1
                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                Assert.AreEqual(0, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(18, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(18, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(part2thru4.KindOfMaterial, actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(part2thru4.MaterialKindReportingID, actualProdReportObject.Part2Through4List[0].MaterialKindReportingID);
                Assert.AreEqual(part2thru4.NewCoop, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(part2thru4.UsedCoop, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(part2thru4.ProofGallons, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(part2thru4.SpiritTypeReportingID, actualProdReportObject.Part2Through4List[0].SpiritTypeReportingID);
                Assert.AreEqual(part2thru4.Tanks, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);
                #endregion

                #region Processing Report After Deletion
                /* PROCESING REPORT */
                actualProcessingReportObject = new ProcessingReportingObject();

                processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 0f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 0f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 0f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 0f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 0f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = 0f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;

                processingReportP4 = new ProcessReportingPart4();
                processingReportP4.ProcessingSpirits = "bulkSpiritDumped";
                processingReportP4.AlcoholNeutral = 0f;
                processingReportP4.BlendedLightWhiskey = 0f;
                processingReportP4.BlendedOtherWhiskey = 0f;
                processingReportP4.BlendedStraightWhiskey = 0f;
                processingReportP4.BlendedWhiskeyWithLight = 0f;
                processingReportP4.BlendedWhiskeyWithNeutral = 0f;
                processingReportP4.Brandy170Under = 0f;
                processingReportP4.BrandyOver170 = 0f;
                processingReportP4.Cocktail = 0f;
                processingReportP4.DomesticWhiskey160Under = 0f;
                processingReportP4.DomesticWhiskeyOver160 = 0f;
                processingReportP4.Gin = 0f;
                processingReportP4.ImportedWhiskeyCanadian = 0f;
                processingReportP4.ImportedWhiskeyIrish = 0f;
                processingReportP4.ImportedWhiskeyScotch = 0f;
                processingReportP4.Liqueur = 0f;
                processingReportP4.ProcessingReportTypeName = "BRANDY DISTILLED AT 170 AND UNDER";
                processingReportP4.ProcessingTypeID = 12;
                processingReportP4.RumDomestic = 0f;
                processingReportP4.RumOtherImported = 0f;
                processingReportP4.RumPuertoRican = 0f;
                processingReportP4.RumVirginIslands = 0f;
                processingReportP4.StateID = 0;
                processingReportP4.Tequila = 0f;
                processingReportP4.Vodka = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                var actualproccessingReportPart4BottledObject = actualProcessingReportObject.Part4List.Find(x => x.ProcessingSpirits == "bottled");

                if (actualproccessingReportPart4BottledObject != null)
                {
                    Assert.IsNull(actualproccessingReportPart4BottledObject, "there should be no bottling record");
                }

                var actualproccessingReportPart4Object = actualProcessingReportObject.Part4List.Find(x => x.ProcessingSpirits == "bulkSpiritDumped");

                if (actualproccessingReportPart4Object == null)
                {
                    Assert.IsNull(actualproccessingReportPart4Object, "there should be no blending record");
                }
                else
                {
                    Assert.AreEqual(processingReportP4.AlcoholNeutral, actualproccessingReportPart4Object.AlcoholNeutral);
                    Assert.AreEqual(processingReportP4.BlendedLightWhiskey, actualproccessingReportPart4Object.BlendedLightWhiskey);
                    Assert.AreEqual(processingReportP4.BlendedOtherWhiskey, actualproccessingReportPart4Object.BlendedOtherWhiskey);
                    Assert.AreEqual(processingReportP4.BlendedStraightWhiskey, actualproccessingReportPart4Object.BlendedStraightWhiskey);
                    Assert.AreEqual(processingReportP4.BlendedWhiskeyWithLight, actualproccessingReportPart4Object.BlendedWhiskeyWithLight);
                    Assert.AreEqual(processingReportP4.BlendedWhiskeyWithNeutral, actualproccessingReportPart4Object.BlendedWhiskeyWithNeutral);
                    Assert.AreEqual(processingReportP4.Brandy170Under, actualproccessingReportPart4Object.Brandy170Under);
                    Assert.AreEqual(processingReportP4.BrandyOver170, actualproccessingReportPart4Object.BrandyOver170);
                    Assert.AreEqual(processingReportP4.Cocktail, actualproccessingReportPart4Object.Cocktail);
                    Assert.AreEqual(processingReportP4.DomesticWhiskey160Under, actualproccessingReportPart4Object.DomesticWhiskey160Under);
                    Assert.AreEqual(processingReportP4.DomesticWhiskeyOver160, actualproccessingReportPart4Object.DomesticWhiskeyOver160);
                    Assert.AreEqual(processingReportP4.Gin, actualproccessingReportPart4Object.Gin);
                    Assert.AreEqual(processingReportP4.ImportedWhiskeyCanadian, actualproccessingReportPart4Object.ImportedWhiskeyCanadian);
                    Assert.AreEqual(processingReportP4.ImportedWhiskeyIrish, actualproccessingReportPart4Object.ImportedWhiskeyIrish);
                    Assert.AreEqual(processingReportP4.ImportedWhiskeyScotch, actualproccessingReportPart4Object.ImportedWhiskeyScotch);
                    Assert.AreEqual(processingReportP4.Liqueur, actualproccessingReportPart4Object.Liqueur);
                    Assert.AreEqual(processingReportP4.ProcessingReportTypeName, actualproccessingReportPart4Object.ProcessingReportTypeName);
                    Assert.AreEqual(processingReportP4.ProcessingSpirits, actualproccessingReportPart4Object.ProcessingSpirits);
                    Assert.AreEqual(processingReportP4.ProcessingTypeID, actualproccessingReportPart4Object.ProcessingTypeID);
                    Assert.AreEqual(processingReportP4.RumDomestic, actualproccessingReportPart4Object.RumDomestic);
                    Assert.AreEqual(processingReportP4.RumDomestic, actualproccessingReportPart4Object.RumDomestic);
                    Assert.AreEqual(processingReportP4.RumOtherImported, actualproccessingReportPart4Object.RumOtherImported);
                    Assert.AreEqual(processingReportP4.RumPuertoRican, actualproccessingReportPart4Object.RumPuertoRican);
                    Assert.AreEqual(processingReportP4.StateID, actualproccessingReportPart4Object.StateID);
                    Assert.AreEqual(processingReportP4.Tequila, actualproccessingReportPart4Object.Tequila);
                    Assert.AreEqual(processingReportP4.Vodka, actualproccessingReportPart4Object.Vodka);
                }

                #endregion

                #region Storage Report After Deletion
                actualStorageReportObject = new StorageReportObject();

                storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "Wine";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 18f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 0f;
                storageReportBody.r24_Lines7Through23 = 18f;
                storageReportBody.r2_DepositedInBulkStorage = 18f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 18f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body for Wine
                // verify Storage body for CategoryName BrandyUnder170
                var storageWine = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "Wine");

                if (storageWine == null)
                {
                    Assert.IsNotNull(storageWine);
                }
                else
                {
                    Assert.AreEqual(storageReportBody.CategoryName, storageWine.CategoryName);
                    Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, storageWine.r17_TransferredToProcessingAccount);
                    Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, storageWine.r18_TransferredToProductionAccount);
                    Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, storageWine.r19_TransferredToOtherBondedPremises);
                    Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, storageWine.r1_OnHandFirstOfMonth);
                    Assert.AreEqual(storageReportBody.r20_Destroyed, storageWine.r20_Destroyed);
                    Assert.AreEqual(storageReportBody.r22_OtherLosses, storageWine.r22_OtherLosses);
                    Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, storageWine.r23_OnHandEndOfMonth);
                    Assert.AreEqual(storageReportBody.r24_Lines7Through23, storageWine.r24_Lines7Through23);
                    Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, storageWine.r2_DepositedInBulkStorage);
                    Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, storageWine.r4_ReturnedToBulkStorage);
                    Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, storageWine.r6_TotalLines1Through5);
                    Assert.AreEqual(storageReportBody.r7_TaxPaid, storageWine.r7_TaxPaid);
                }

                // verify Storage body for CategoryName BrandyUnder170
                var storageBrandy = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "BrandyUnder170");

                if (storageBrandy == null)
                {
                    Assert.IsNotNull(storageBrandy);
                }
                else
                {
                    storageReportBody = new StorageReportCategory();
                    storageReportBody.CategoryName = "BrandyUnder170";
                    storageReportBody.r17_TransferredToProcessingAccount = 0f;
                    storageReportBody.r18_TransferredToProductionAccount = 0f;
                    storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                    storageReportBody.r1_OnHandFirstOfMonth = 0f;
                    storageReportBody.r20_Destroyed = 0f;
                    storageReportBody.r22_OtherLosses = 0f;
                    storageReportBody.r23_OnHandEndOfMonth = 18f;
                    storageReportBody.r24_Lines7Through23 = 18f;
                    storageReportBody.r2_DepositedInBulkStorage = 18f;
                    storageReportBody.r4_ReturnedToBulkStorage = 0f;
                    storageReportBody.r6_TotalLines1Through5 = 18f;
                    storageReportBody.r7_TaxPaid = 0f;
                    storageReportBody.r6_TotalLines1Through5 = 18;

                    Assert.AreEqual(storageReportBody.CategoryName, storageBrandy.CategoryName);
                    Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, storageBrandy.r17_TransferredToProcessingAccount);
                    Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, storageBrandy.r18_TransferredToProductionAccount);
                    Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, storageBrandy.r19_TransferredToOtherBondedPremises);
                    Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, storageBrandy.r1_OnHandFirstOfMonth);
                    Assert.AreEqual(storageReportBody.r20_Destroyed, storageBrandy.r20_Destroyed);
                    Assert.AreEqual(storageReportBody.r22_OtherLosses, storageBrandy.r22_OtherLosses);
                    Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, storageBrandy.r23_OnHandEndOfMonth);
                    Assert.AreEqual(storageReportBody.r24_Lines7Through23, storageBrandy.r24_Lines7Through23);
                    Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, storageBrandy.r2_DepositedInBulkStorage);
                    Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, storageBrandy.r4_ReturnedToBulkStorage);
                    Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, storageBrandy.r6_TotalLines1Through5);
                    Assert.AreEqual(storageReportBody.r7_TaxPaid, storageBrandy.r7_TaxPaid);
                    Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, storageBrandy.r6_TotalLines1Through5);
                }

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tupleL)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test method verifies that when Distilled record
        /// is deleted, all other records amounts' that were involved in making this
        /// distilled record originally, are reinstated. Effectively, we should be re-instating values for production and purchase records
        /// In addition, we are verifying reports update it's values as well.
        /// </summary>
        [TestMethod()]
        public void DeleteWorkflow_BuyWine_Distil_DistilAgain_DeleteDistilling_EnsureOtherRecords_Intact()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tupleL = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            DateTimeOffset start = new DateTimeOffset(2017, 09, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2017, 09, 30, 0, 0, 0, TimeSpan.Zero);

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tupleL.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tupleL.Add(Tuple.Create(storageId, Table.Storage));


                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tupleL.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tupleL.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Feremented Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2017, 09, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 9f;
                purchO.ProofGallon = 18f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> stoL = new List<StorageObject>();
                StorageObject sto = new StorageObject();
                sto.StorageId = storageId;
                stoL.Add(sto);
                purchO.Storage = stoL;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tupleL.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2017, 09, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = false;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f; // 80%
                prodO.ProofGallon = 80f; // 80pfg
                prodO.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tupleL.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record and mark it as Gauged
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "testGaugedDistillRun";
                prodO2.ProductionDate = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2017, 09, 4, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 9; // hearts
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.Quantity = 15f; // 15 gallons of alcohol
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 60f; // 60%
                prodO2.ProofGallon = 18f; // 18pfg
                prodO2.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 3; // brandy under 170
                prodO2.MaterialKindReportingID = 94; // grape brandy
                prodO2.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats4Gauge = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Gauged = new ObjInfo4Burndwn();
                uMat4Gauged.ID = productionId;
                uMat4Gauged.OldVal = 0f;
                uMat4Gauged.NewVal = prodO.Quantity;
                uMat4Gauged.DistillableOrigin = "prod";
                uMat4Gauged.BurningDownMethod = "volume";

                usedMats4Gauge.Add(uMat4Gauged);
                prodO2.UsedMats = usedMats4Gauge;

                int productionFinalDistillationId = _production.CreateProduction(prodO2, _userId);

                tupleL.Add(Tuple.Create(productionFinalDistillationId, Table.Production));

                #endregion

                #region Reports setup

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "September 2017";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                /* PRODUCTION REPORT */

                ProdReportPart1 part1E = new ProdReportPart1();
                part1E.ProccessingAcct = 0f;
                part1E.ProducedTotal = 18f;
                part1E.Recd4RedistilL17 = 0f;
                part1E.Recd4RedistilaltionL15 = 0f;
                part1E.StorageAcct = 18f;
                part1E.SpiritTypeReportingID = 3;
                part1E.UnfinishedSpiritsEndOfQuarterL17 = 0f;

                ProdReportParts2Through4 part2thru4 = new ProdReportParts2Through4();
                part2thru4.KindOfMaterial = "GrapeBrandy";
                part2thru4.MaterialKindReportingID = 94;
                part2thru4.NewCoop = false;
                part2thru4.UsedCoop = false;
                part2thru4.ProofGallons = 18f;
                part2thru4.SpiritTypeReportingID = 3;
                part2thru4.Tanks = false;

                ProdReportPart5 part5 = new ProdReportPart5();
                part5.KindofSpirits = "";
                part5.Proof = 0f;

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                ProcessingReportingObject actualProcessingReportO = new ProcessingReportingObject();

                #endregion

                // Assert

                #region Production Report Before Deletion

                Tuple<int, float> accumulatedProofGL4SpiritTypeReportingId = new Tuple<int, float>(11, purchO.ProofGallon);

                List<Tuple<int, float>> accumulatedProofGL4SpiritTypeReportingIdL = new List<Tuple<int, float>>();

                accumulatedProofGL4SpiritTypeReportingIdL.Add(accumulatedProofGL4SpiritTypeReportingId);

                // verify Production report header
                Assert.AreEqual(reportHeaderE.DSP, actualProdReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProdReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProdReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProdReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProdReportObject.Header.ReportDate);

                // verify Production report Part 1
                Assert.AreEqual(part1E.ProccessingAcct, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(part1E.StorageAcct, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(part1E.ProducedTotal, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                var expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                var actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(part2thru4.KindOfMaterial, actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(part2thru4.MaterialKindReportingID, actualProdReportObject.Part2Through4List[0].MaterialKindReportingID);
                Assert.AreEqual(part2thru4.NewCoop, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(part2thru4.UsedCoop, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(part2thru4.ProofGallons, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(part2thru4.SpiritTypeReportingID, actualProdReportObject.Part2Through4List[0].SpiritTypeReportingID);
                Assert.AreEqual(part2thru4.Tanks, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);

                #endregion


                #region Storage Report Before Deletion
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                StorageReportCategory storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "Wine";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 18f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 0f;
                storageReportBody.r24_Lines7Through23 = 18f;
                storageReportBody.r2_DepositedInBulkStorage = 18f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 18f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage // verify Storage body for CategoryName BrandyUnder170
                var storageWine = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "Wine");

                if (storageWine == null)
                {
                    Assert.IsNotNull(storageWine);
                }
                else
                {
                    Assert.AreEqual(storageReportBody.CategoryName, storageWine.CategoryName);
                    Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, storageWine.r17_TransferredToProcessingAccount);
                    Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, storageWine.r18_TransferredToProductionAccount);
                    Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, storageWine.r19_TransferredToOtherBondedPremises);
                    Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, storageWine.r1_OnHandFirstOfMonth);
                    Assert.AreEqual(storageReportBody.r20_Destroyed, storageWine.r20_Destroyed);
                    Assert.AreEqual(storageReportBody.r22_OtherLosses, storageWine.r22_OtherLosses);
                    Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, storageWine.r23_OnHandEndOfMonth);
                    Assert.AreEqual(storageReportBody.r24_Lines7Through23, storageWine.r24_Lines7Through23);
                    Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, storageWine.r2_DepositedInBulkStorage);
                    Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, storageWine.r4_ReturnedToBulkStorage);
                    Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, storageWine.r6_TotalLines1Through5);
                    Assert.AreEqual(storageReportBody.r7_TaxPaid, storageWine.r7_TaxPaid);
                }

                // verify Storage body for CategoryName BrandyUnder170
                var storageBrandy = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "BrandyUnder170");

                if (storageBrandy == null)
                {
                    Assert.IsNotNull(storageBrandy);
                }
                else
                {
                    storageReportBody = new StorageReportCategory();
                    storageReportBody.CategoryName = "BrandyUnder170";
                    storageReportBody.r17_TransferredToProcessingAccount = 0f;
                    storageReportBody.r18_TransferredToProductionAccount = 0f;
                    storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                    storageReportBody.r1_OnHandFirstOfMonth = 0f;
                    storageReportBody.r20_Destroyed = 0f;
                    storageReportBody.r22_OtherLosses = 0f;
                    storageReportBody.r23_OnHandEndOfMonth = 18f;
                    storageReportBody.r24_Lines7Through23 = 18f;
                    storageReportBody.r2_DepositedInBulkStorage = 18f;
                    storageReportBody.r4_ReturnedToBulkStorage = 0f;
                    storageReportBody.r6_TotalLines1Through5 = 18f;
                    storageReportBody.r7_TaxPaid = 0f;
                    storageReportBody.r6_TotalLines1Through5 = 18;

                    Assert.AreEqual(storageReportBody.CategoryName, storageBrandy.CategoryName);
                    Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, storageBrandy.r17_TransferredToProcessingAccount);
                    Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, storageBrandy.r18_TransferredToProductionAccount);
                    Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, storageBrandy.r19_TransferredToOtherBondedPremises);
                    Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, storageBrandy.r1_OnHandFirstOfMonth);
                    Assert.AreEqual(storageReportBody.r20_Destroyed, storageBrandy.r20_Destroyed);
                    Assert.AreEqual(storageReportBody.r22_OtherLosses, storageBrandy.r22_OtherLosses);
                    Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, storageBrandy.r23_OnHandEndOfMonth);
                    Assert.AreEqual(storageReportBody.r24_Lines7Through23, storageBrandy.r24_Lines7Through23);
                    Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, storageBrandy.r2_DepositedInBulkStorage);
                    Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, storageBrandy.r4_ReturnedToBulkStorage);
                    Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, storageBrandy.r6_TotalLines1Through5);
                    Assert.AreEqual(storageReportBody.r7_TaxPaid, storageBrandy.r7_TaxPaid);
                    Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, storageBrandy.r6_TotalLines1Through5);
                }

                #endregion

                // let's verify the values in production report after we deleted bottling
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodO2.ProductionId;
                deleteObject.DeleteRecordType = prodO2.ProductionType;
                bool DistillationDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                #region Distilled Not Gauged after Distilled deletion

                var amounts =
                    (from prod in _db.Production
                     where prod.ProductionID == productionId
                     join volume in _db.Volume on prod.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on prod.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on prod.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on prod.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(prodO.Quantity, amounts.volume);
                    Assert.AreEqual(prodO.VolumeByWeight, amounts.weight);
                    Assert.AreEqual(prodO.AlcoholContent, amounts.alcohol);
                    Assert.AreEqual(prodO.ProofGallon, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }

                var isDistilledRecord =
                    (from prod in _db.Production
                     where prod.ProductionID == productionId
                     select prod).FirstOrDefault();

                if (isDistilledRecord == null)
                {
                    Assert.IsNotNull(isDistilledRecord, "distilled not gauged record should exist after the deletion of Distilled record");
                }

                #endregion

                #region Production Report After Deletion
                // verify Production report Part 1
                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                Assert.AreEqual(0, actualProdReportObject.Part1List[0].ProccessingAcct);
                Assert.AreEqual(0, actualProdReportObject.Part1List[0].StorageAcct);
                Assert.AreEqual(0, actualProdReportObject.Part1List[0].ProducedTotal);
                Assert.AreEqual(18, actualProdReportObject.Part1List[0].Recd4RedistilaltionL15);
                Assert.AreEqual(part1E.Recd4RedistilL17, actualProdReportObject.Part1List[0].Recd4RedistilL17);

                expectedWine = accumulatedProofGL4SpiritTypeReportingIdL.Find(l => l.Item1 == 11);
                actualWine = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == expectedWine.Item1);

                if (actualWine == null)
                {
                    Assert.AreNotEqual(null, expectedWine, "No records in actualAlcohol190Plus for SpiritTypeID");
                }
                else
                {
                    Assert.AreEqual(expectedWine.Item2, actualWine.Recd4RedistilaltionL15);
                    Assert.AreEqual("Wine", actualWine.SpiritCatName);
                }

                Assert.AreEqual(part1E.UnfinishedSpiritsEndOfQuarterL17, actualProdReportObject.Part1List[0].UnfinishedSpiritsEndOfQuarterL17);

                // verify Production report Part 2 trough 4
                Assert.AreEqual(0, actualProdReportObject.Part2Through4List.Count);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(18, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(0, actualProdReportObject.ProdReportPart6List.Count);
                #endregion

                #region Storage Report After Deletion
                actualStorageReportObject = new StorageReportObject();

                storageReportBody = new StorageReportCategory();
                storageReportBody.CategoryName = "Wine";
                storageReportBody.r17_TransferredToProcessingAccount = 0f;
                storageReportBody.r18_TransferredToProductionAccount = 18f;
                storageReportBody.r19_TransferredToOtherBondedPremises = 0;
                storageReportBody.r1_OnHandFirstOfMonth = 0f;
                storageReportBody.r20_Destroyed = 0f;
                storageReportBody.r22_OtherLosses = 0f;
                storageReportBody.r23_OnHandEndOfMonth = 0f;
                storageReportBody.r24_Lines7Through23 = 18f;
                storageReportBody.r2_DepositedInBulkStorage = 18f;
                storageReportBody.r4_ReturnedToBulkStorage = 0f;
                storageReportBody.r6_TotalLines1Through5 = 18f;
                storageReportBody.r7_TaxPaid = 0f;

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualStorageReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualStorageReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualStorageReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualStorageReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualStorageReportObject.Header.ReportDate);

                // verify Storage body for Wine
                storageWine = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "Wine");

                if (storageWine == null)
                {
                    Assert.IsNotNull(storageWine);
                }

                Assert.AreEqual(storageReportBody.CategoryName, storageWine.CategoryName);
                Assert.AreEqual(storageReportBody.r17_TransferredToProcessingAccount, storageWine.r17_TransferredToProcessingAccount);
                Assert.AreEqual(storageReportBody.r18_TransferredToProductionAccount, storageWine.r18_TransferredToProductionAccount);
                Assert.AreEqual(storageReportBody.r19_TransferredToOtherBondedPremises, storageWine.r19_TransferredToOtherBondedPremises);
                Assert.AreEqual(storageReportBody.r1_OnHandFirstOfMonth, storageWine.r1_OnHandFirstOfMonth);
                Assert.AreEqual(storageReportBody.r20_Destroyed, storageWine.r20_Destroyed);
                Assert.AreEqual(storageReportBody.r22_OtherLosses, storageWine.r22_OtherLosses);
                Assert.AreEqual(storageReportBody.r23_OnHandEndOfMonth, storageWine.r23_OnHandEndOfMonth);
                Assert.AreEqual(storageReportBody.r24_Lines7Through23, storageWine.r24_Lines7Through23);
                Assert.AreEqual(storageReportBody.r2_DepositedInBulkStorage, storageWine.r2_DepositedInBulkStorage);
                Assert.AreEqual(storageReportBody.r4_ReturnedToBulkStorage, storageWine.r4_ReturnedToBulkStorage);
                Assert.AreEqual(storageReportBody.r6_TotalLines1Through5, storageWine.r6_TotalLines1Through5);
                Assert.AreEqual(storageReportBody.r7_TaxPaid, storageWine.r7_TaxPaid);

                // verify Storage body for CategoryName BrandyUnder170
                storageBrandy = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "BrandyUnder170");

                Assert.IsNull(storageBrandy);

                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tupleL)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test validates the following scenario
        /// Purchase 2000 lbs of grapes in January
        /// Ferment 2000 lbs of grapes in January into 150 gallons of wine @10% ABV
        /// Distil all of wine into 15 gallons of distill @60%ABV in January
        /// Blend entire distillation into Blending in January
        /// Bottle all of blended quantity in January
        /// Check Storage, Production and Processing Reports
        /// </summary>
        [TestMethod()]
        public void BuyGrapes_Ferment_DistilGauged_BlendAll_BottleAll_TestProcessingReport()
        {
            // Arrange
            int spiritId = 0;
            int waterMaterialId = 0;
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2018, 01, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 01, 31, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }
                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 01, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 150f; // 150 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 10f; // %
                prodO.ProofGallon = 30f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 15f;
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 60f;
                prodO1.ProofGallon = 18f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO.Quantity;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "testProdBlend";
                prodBlend.ProductionDate = new DateTimeOffset(2018, 01, 21, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2018, 01, 21, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2018, 01, 21, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 22.5f;
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 40f; // 40%
                prodBlend.ProofGallon = 18f;
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 3; // brandy under 170
                prodBlend.MaterialKindReportingID = 94; // grape brandy
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0;
                uMat4Blend.NewVal = prodO1.Quantity;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";
                uMat4Blend.Proof = 0f;

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 7.5f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                int productionBlendingId = _production.CreateProduction(prodBlend, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionBlendingId, Table.Production));

                // create Production Bottling Record
                ProductionObject prodBottl = new ProductionObject();
                prodBottl.BatchName = "testProdBottling ";
                prodBottl.ProductionDate = new DateTimeOffset(2018, 01, 22, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionStart = new DateTimeOffset(2018, 01, 22, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionEnd = new DateTimeOffset(2018, 01, 22, 0, 0, 0, TimeSpan.Zero);
                prodBottl.Gauged = true;
                prodBottl.ProductionType = "Bottling";
                prodBottl.Quantity = 22.39f; // 22.39 gallons of alcohol
                prodBottl.VolumeByWeight = 0f;
                prodBottl.AlcoholContent = 40f; // 40%
                prodBottl.ProofGallon = 17.9f; // 17.9 pfg
                prodBottl.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBottl.SpiritTypeReportingID = 3; // brandy under 170
                prodBottl.MaterialKindReportingID = 94; // grape brandy
                prodBottl.SpiritId = spiritId;
                prodO.ProductionTypeId = 4;

                List<ObjInfo4Burndwn> usedMats4Bottl = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Bottl = new ObjInfo4Burndwn();
                uMat4Bottl.ID = productionBlendingId;
                uMat4Bottl.OldVal = 0f;
                uMat4Bottl.NewVal = prodBlend.Quantity;
                uMat4Bottl.DistillableOrigin = "prod";
                uMat4Bottl.BurningDownMethod = "volume";

                usedMats4Bottl.Add(uMat4Bottl);
                prodBottl.UsedMats = usedMats4Bottl;

                BottlingObject bottlingObj = new BottlingObject();
                bottlingObj.CaseCapacity = 12;
                bottlingObj.CaseQuantity = 9.42f;
                bottlingObj.BottleCapacity = 750f;
                bottlingObj.BottleQuantity = 113;

                prodBottl.BottlingInfo = bottlingObj;

                prodBottl.GainLoss = -.10f;

                prodBottl.FillTestList = null;

                int productionBottlingId = _production.CreateProduction(prodBottl, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionBottlingId, Table.Production));

                #endregion

                #region Reports
                /* PROCESING REPORT */
                #region Processing Report
                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                ProcessReportingPart1 processingReportP1 = new ProcessReportingPart1();
                processingReportP1.AmtBottledPackaged = 18f;
                processingReportP1.BulkIngredients = "spirit";
                processingReportP1.Destroyed = 0f;
                processingReportP1.Dumped4Processing = 0f;
                processingReportP1.Gains = 0f;
                processingReportP1.Losses = 0f;
                processingReportP1.OnHandEndofMonth = 0f;
                processingReportP1.OnHandFirstofMonth = 0f;
                processingReportP1.Recd4Process = 18f;
                processingReportP1.Transf2Prod4Redistil = 0f;
                processingReportP1.Used4Redistil = 0f;
                processingReportP1.WineMixedWithSpirit = 0f;

                ProcessReportingPart2 processingReportP2 = new ProcessReportingPart2();
                processingReportP2.AmtBottledPackaged = 18f;
                processingReportP2.Destroyed = 0f;
                processingReportP2.Dumped4Processing = 0f;
                processingReportP2.FinishedProduct = "bottled";
                processingReportP2.InventoryOverage = 0f;
                processingReportP2.InventoryShortage = 0f;
                processingReportP2.OnHandEndofMonth = 17.9f;
                processingReportP2.OnHandFirstofMonth = 0f;
                processingReportP2.Recd4Process = 0f;
                processingReportP2.RecordedLosses = .1f;
                processingReportP2.TaxWithdrawn = 0f;
                processingReportP2.Transf2Prod4Redistil = 0f;

                ProcessReportingPart4 processingReportP4 = new ProcessReportingPart4();
                processingReportP4.AlcoholNeutral = 0f;
                processingReportP4.BlendedLightWhiskey = 0f;
                processingReportP4.BlendedOtherWhiskey = 0f;
                processingReportP4.BlendedStraightWhiskey = 0f;
                processingReportP4.BlendedWhiskeyWithLight = 0f;
                processingReportP4.BlendedWhiskeyWithNeutral = 0f;
                processingReportP4.Brandy170Under = 22.39f;
                processingReportP4.BrandyOver170 = 0f;
                processingReportP4.Cocktail = 0f;
                processingReportP4.DomesticWhiskey160Under = 0f;
                processingReportP4.DomesticWhiskeyOver160 = 0f;
                processingReportP4.Gin = 0f;
                processingReportP4.ImportedWhiskeyCanadian = 0f;
                processingReportP4.ImportedWhiskeyIrish = 0f;
                processingReportP4.ImportedWhiskeyScotch = 0f;
                processingReportP4.Liqueur = 0f;
                processingReportP4.ProcessingReportTypeName = "BRANDY DISTILLED AT 170 AND UNDER";
                processingReportP4.ProcessingSpirits = "bottled";
                processingReportP4.ProcessingTypeID = 12;
                processingReportP4.RumDomestic = 0f;
                processingReportP4.RumOtherImported = 0f;
                processingReportP4.RumPuertoRican = 0f;
                processingReportP4.RumVirginIslands = 0f;
                processingReportP4.StateID = 5;
                processingReportP4.Tequila = 0f;
                processingReportP4.Vodka = 0f;

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);

                Assert.AreEqual(processingReportP1.AmtBottledPackaged, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual(processingReportP1.BulkIngredients, actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(processingReportP1.Destroyed, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(processingReportP1.Dumped4Processing, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(processingReportP1.Gains, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(processingReportP1.Losses, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(processingReportP1.OnHandEndofMonth, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(processingReportP1.OnHandFirstofMonth, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP1.Recd4Process, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(processingReportP1.Transf2Prod4Redistil, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(processingReportP1.Used4Redistil, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(processingReportP1.WineMixedWithSpirit, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(processingReportP2.AmtBottledPackaged, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(processingReportP2.Destroyed, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(processingReportP2.Dumped4Processing, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual(processingReportP2.FinishedProduct, actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(processingReportP2.InventoryOverage, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(processingReportP2.InventoryShortage, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(processingReportP2.OnHandEndofMonth, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(processingReportP2.OnHandFirstofMonth, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(processingReportP2.Recd4Process, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(processingReportP2.RecordedLosses, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(processingReportP2.TaxWithdrawn, actualProcessingReportObject.Part2.TaxWithdrawn);
                Assert.AreEqual(processingReportP2.Transf2Prod4Redistil, actualProcessingReportObject.Part2.Transf2Prod4Redistil);

                Assert.AreEqual(processingReportP4.AlcoholNeutral, actualProcessingReportObject.Part4List[0].AlcoholNeutral);
                Assert.AreEqual(processingReportP4.BlendedLightWhiskey, actualProcessingReportObject.Part4List[0].BlendedLightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedOtherWhiskey, actualProcessingReportObject.Part4List[0].BlendedOtherWhiskey);
                Assert.AreEqual(processingReportP4.BlendedStraightWhiskey, actualProcessingReportObject.Part4List[0].BlendedStraightWhiskey);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithLight, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithLight);
                Assert.AreEqual(processingReportP4.BlendedWhiskeyWithNeutral, actualProcessingReportObject.Part4List[0].BlendedWhiskeyWithNeutral);
                Assert.AreEqual(processingReportP4.Brandy170Under, actualProcessingReportObject.Part4List[1].Brandy170Under);
                Assert.AreEqual(processingReportP4.BrandyOver170, actualProcessingReportObject.Part4List[0].BrandyOver170);
                Assert.AreEqual(processingReportP4.Cocktail, actualProcessingReportObject.Part4List[0].Cocktail);
                Assert.AreEqual(processingReportP4.DomesticWhiskey160Under, actualProcessingReportObject.Part4List[0].DomesticWhiskey160Under);
                Assert.AreEqual(processingReportP4.DomesticWhiskeyOver160, actualProcessingReportObject.Part4List[0].DomesticWhiskeyOver160);
                Assert.AreEqual(processingReportP4.Gin, actualProcessingReportObject.Part4List[0].Gin);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyCanadian, actualProcessingReportObject.Part4List[0].ImportedWhiskeyCanadian);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyIrish, actualProcessingReportObject.Part4List[0].ImportedWhiskeyIrish);
                Assert.AreEqual(processingReportP4.ImportedWhiskeyScotch, actualProcessingReportObject.Part4List[0].ImportedWhiskeyScotch);
                Assert.AreEqual(processingReportP4.Liqueur, actualProcessingReportObject.Part4List[0].Liqueur);
                Assert.AreEqual(processingReportP4.ProcessingReportTypeName, actualProcessingReportObject.Part4List[0].ProcessingReportTypeName);
                Assert.AreEqual(processingReportP4.ProcessingSpirits, actualProcessingReportObject.Part4List[1].ProcessingSpirits);
                Assert.AreEqual(processingReportP4.ProcessingTypeID, actualProcessingReportObject.Part4List[0].ProcessingTypeID);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumDomestic, actualProcessingReportObject.Part4List[0].RumDomestic);
                Assert.AreEqual(processingReportP4.RumOtherImported, actualProcessingReportObject.Part4List[0].RumOtherImported);
                Assert.AreEqual(processingReportP4.RumPuertoRican, actualProcessingReportObject.Part4List[0].RumPuertoRican);
                Assert.AreEqual(processingReportP4.StateID, actualProcessingReportObject.Part4List[1].StateID);
                Assert.AreEqual(processingReportP4.Tequila, actualProcessingReportObject.Part4List[0].Tequila);
                Assert.AreEqual(processingReportP4.Vodka, actualProcessingReportObject.Part4List[0].Vodka);
                #endregion

                #region Storage Report
                // verify storage report
                StorageReportObject actualStorageReportObject = new StorageReportObject();

                actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                // check grape brandy object
                var actualStoGrapeBrandy = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "BrandyUnder170");

                if (actualStoGrapeBrandy != null)
                {
                    Assert.IsNull(actualStoGrapeBrandy, "Storage Grape Brandy Under 170 object should be null");
                }

                // check Wine object
                var actualStoWine = actualStorageReportObject.ReportBody.Find(x => x.CategoryName == "Wine");

                if (actualStoWine == null)
                {
                    Assert.IsNotNull(actualStoGrapeBrandy, "Storage Wine object should not be null");
                }
                else
                {
                    Assert.AreEqual(30f, actualStoWine.r2_DepositedInBulkStorage);
                    Assert.AreEqual(30f, actualStoWine.r6_TotalLines1Through5);
                    Assert.AreEqual(0, actualStoWine.r23_OnHandEndOfMonth);
                    Assert.AreEqual(0f, actualStoWine.r1_OnHandFirstOfMonth);
                    Assert.AreEqual(30f, actualStoWine.r24_Lines7Through23);
                    Assert.AreEqual(30f, actualStoWine.r18_TransferredToProductionAccount);
                    Assert.AreEqual(30f, actualStoWine.r6_TotalLines1Through5);
                }

                #endregion

                #region Production Report

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                var expectedWine = actualProdReportObject.Part1List.Find(x => x.SpiritCatName == "Wine");

                // verify Production report part 1
                if (expectedWine == null)
                {
                    Assert.IsNotNull(expectedWine, "Expect records for Wine Category");
                }
                else
                {
                    // Wine expected output
                    Assert.AreEqual(0, expectedWine.ProccessingAcct);
                    Assert.AreEqual(0, expectedWine.StorageAcct);
                    Assert.AreEqual(0, expectedWine.ProducedTotal);
                    Assert.AreEqual(30, expectedWine.Recd4RedistilaltionL15);
                }

                var expectedBrandy = actualProdReportObject.Part1List.Find(x => x.SpiritCatName == "BrandyUnder170");

                if (expectedBrandy == null)
                {
                    Assert.IsNotNull(expectedWine, "Expect records for Brandy Category");
                }
                else
                {
                    // Brandy expected output
                    Assert.AreEqual(0, expectedBrandy.ProccessingAcct);
                    Assert.AreEqual(18, expectedBrandy.StorageAcct);
                    Assert.AreEqual(0, expectedBrandy.Recd4RedistilL17);
                    Assert.AreEqual(18, expectedBrandy.ProducedTotal);
                }

                // verify Production report Part 2 trough 4
                Assert.AreEqual("GrapeBrandy", actualProdReportObject.Part2Through4List[0].KindOfMaterial);
                Assert.AreEqual(false, actualProdReportObject.Part2Through4List[0].NewCoop);
                Assert.AreEqual(false, actualProdReportObject.Part2Through4List[0].UsedCoop);
                Assert.AreEqual(18, actualProdReportObject.Part2Through4List[0].ProofGallons);
                Assert.AreEqual(false, actualProdReportObject.Part2Through4List[0].Tanks);

                // verify part 5
                Assert.AreEqual("Wine", actualProdReportObject.part5List[0].KindofSpirits);
                Assert.AreEqual(30f, actualProdReportObject.part5List[0].Proof);

                // verify Production report Part 6 - no data should be present in this scenario
                Assert.AreEqual(1, actualProdReportObject.ProdReportPart6List.Count);
                #endregion

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Buy Grapes in March, 2018
        /// Ferment Wine in March, 2018
        /// Disitl and Gauged in March, 2018
        /// Delete Gauged Distil
        /// Check Storage and Production report make sure entries are removed production report is and storage report data is reinstated
        /// Check actual distilled record was deleted
        /// </summary>
        [TestMethod]
        public void Delete_Gauged_Distil_From_Purchased_Wine()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tupleL = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int wineMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            DateTimeOffset start = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 03, 31, 0, 0, 0, TimeSpan.Zero);

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tupleL.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tupleL.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // wine
                {
                    RawMaterialObject wineMaterial = new RawMaterialObject();
                    wineMaterial.RawMaterialName = "Wine For Brandy";
                    wineMaterial.MaterialCategoryID = 2;
                    wineMaterial.UnitType = "gal";
                    wineMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermented = true;
                    wineMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    wineMaterialId = _dictionary.CreateRawMaterial(_userId, wineMaterial);
                    tupleL.Add(Tuple.Create(wineMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tupleL.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }
                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Feremented Purchase";
                purchO.PurchaseType = "Fermented";
                purchO.PurchaseDate = new DateTimeOffset(2018, 03, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 9f;
                purchO.ProofGallon = 18f;
                purchO.RecordId = wineMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> stoL = new List<StorageObject>();
                StorageObject sto = new StorageObject();
                sto.StorageId = storageId;
                stoL.Add(sto);
                purchO.Storage = stoL;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tupleL.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2018, 03, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 03, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 03, 3, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; //50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 80f;
                prodO.ProofGallon = 80f; // 80pfg
                prodO.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.Quantity;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tupleL.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                #region Reports setup

                /* PRODUCTION REPORT */
                ProcessingReportingObject actualProcessingReportO = new ProcessingReportingObject();

                #endregion

                // Assert

                #region Production Report Before Deletion

                ProductionReportingObject actualProdReportObject = new ProductionReportingObject();

                actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                /* verify Production report Part 1 */

                // Whisky Under 160
                var whiskyUnder160Actual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyUnder160);

                if (whiskyUnder160Actual == null)
                {
                    Assert.IsNull(whiskyUnder160Actual, "Whisky Under 160 Object should be null");
                }
                else
                {
                    Assert.IsNull(whiskyUnder160Actual, "Whisky Under 160 Object should be null");
                }

                // Whisky Over 160
                var whiskyOver160Actual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyOver160);

                if (whiskyOver160Actual == null)
                {
                    Assert.IsNull(whiskyUnder160Actual, "Whisky Over 160 Object should be null");
                }
                else
                {
                    Assert.IsNull(whiskyUnder160Actual, "Whisky Over 160 Object should be null");
                }

                // Brandy Under 170
                var brandyUnder170Actual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyUnder170);

                if (brandyUnder170Actual == null)
                {
                    Assert.IsNotNull(brandyUnder170Actual, "Brandy Under 170 object should not be null");
                }
                else
                {
                    Assert.AreEqual(0, brandyUnder170Actual.ProccessingAcct);
                    Assert.AreEqual(80, brandyUnder170Actual.StorageAcct);
                    Assert.AreEqual(80, brandyUnder170Actual.ProducedTotal);
                    Assert.AreEqual(0, brandyUnder170Actual.Recd4RedistilL17);
                    Assert.AreEqual(0, brandyUnder170Actual.Recd4RedistilaltionL15);
                }

                // Brandy Over 170
                var brandyOver170Actual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyOver170);

                if (brandyOver170Actual == null)
                {
                    Assert.IsNull(brandyOver170Actual, "Brandy Over 170 object should be null");
                }
                else
                {
                    Assert.IsNull(brandyOver170Actual, "Brandy Over 170 object should be null");
                }

                // Rum
                var rumActual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Rum);

                if (rumActual == null)
                {
                    Assert.IsNull(rumActual, "Rum object should be null");
                }
                else
                {
                    Assert.IsNull(rumActual, "Rum object should be null");
                }

                // Gin
                var ginActual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Gin);

                if (ginActual == null)
                {
                    Assert.IsNull(ginActual, "Gin object should be null");
                }
                else
                {
                    Assert.IsNull(ginActual, "Gin object should be null");
                }

                // Vodka
                var vodkaActual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Vodka);

                if (ginActual == null)
                {
                    Assert.IsNull(vodkaActual, "Vodka object should be null");
                }
                else
                {
                    Assert.IsNull(vodkaActual, "Vodka object should be null");
                }

                // Alcohol Under 190
                var alcoholUnder190Actual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholUnder190);

                if (alcoholUnder190Actual == null)
                {
                    Assert.IsNull(alcoholUnder190Actual, "Alcohol Under 190 object should be null");
                }
                else
                {
                    Assert.IsNull(alcoholUnder190Actual, "Alcohol Under 190 object should be null");
                }

                // Alcohol Over 190
                var alcoholOver190Actual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholOver190);

                if (alcoholOver190Actual == null)
                {
                    Assert.IsNull(alcoholOver190Actual, "Alcohol Over 190 object should be null");
                }
                else
                {
                    Assert.IsNull(alcoholOver190Actual, "Alcohol Over 190 object should be null");
                }

                // Other
                var otherActual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Other);

                if (otherActual == null)
                {
                    Assert.IsNull(otherActual, "Other object should be null");
                }
                else
                {
                    Assert.IsNull(otherActual, "Other object should be null");
                }

                // Wine
                var wineActual = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Wine);

                if (wineActual == null)
                {
                    Assert.IsNotNull(wineActual, "Wine object should not be null");
                }
                else
                {
                    Assert.AreEqual(0, wineActual.ProccessingAcct);
                    Assert.AreEqual(0, wineActual.StorageAcct);
                    Assert.AreEqual(0, wineActual.ProducedTotal);
                    Assert.AreEqual(0, wineActual.Recd4RedistilL17);
                    Assert.AreEqual(18, wineActual.Recd4RedistilaltionL15);
                }

                // verify Production report Part 2 trough 4

                var prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Grain);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Grain production part 2 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Grain production part 2 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Fruit);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Fruit production part 2 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Fruit production part 2 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Molasses);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Molasses production part 2 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Molasses production part 2 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.EthylSulfate);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethyl Sulfate production part 2 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethyl Sulfate production part 2 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.EthyleneGas);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethylene Gas production part 2 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethylene Gas production part 2 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.SulphiteLiquor);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Sulphite Liquor production part 2 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Sulphite Liquor production part 2 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.FromRedistillation);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "From Redistillation production part 2 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "From Redistillation production part 2 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Bourbon_New_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon New Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon New Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Bourbon_Used_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon New Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon Used Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Bourbon_Deposited_in_Tanks);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon Deposited In Tanks production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon Deposited In Tanks production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Corn_New_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn New Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn New Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Corn_Used_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Used Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Used Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Corn_Deposited_in_Tanks);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Deposited In Tanks production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Deposited In Tanks production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Rye_New_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye New Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye New Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Rye_Used_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Used Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Used Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Rye_Deposited_in_Tanks);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Deposited In Tanks production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Deposited In Tanks production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Light_New_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Light New Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Light New Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Light_Used_Cooperage);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Used Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Used Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Light_Deposited_in_Tanks);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Deposited In Tanks Cooperage production part 3 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Deposited In Tanks Cooperage production part 3 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.GrapeBrandy);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Grape Brandy production part 4 object should be null");
                }
                else
                {
                    Assert.AreEqual(80f, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.AllOtherBrandy);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Brandy production part 4 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Brandy production part 4 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.NeutralGrapeBrandy);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Neutral Grape Brandy production part 4 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "Neutral Grape Brandy production part 4 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }

                prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.AllOtherNeutralBrandy);

                if (prouctionObjectpart2Through4Expected == null)
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Neutral Grape Brandy production part 4 object should be null");
                }
                else
                {
                    Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Neutral Grape Brandy production part 4 object should be null");

                    Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                }


                #region Production Part 5
                // verify part 5
                {
                    var part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Wine");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Wine Part 5 object should be null");
                    }
                    else
                    {
                        Assert.AreEqual(18f, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "WhiskyUnder160");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Whisky Under 160 Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Whisky Under 160 Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "WhiskyOver160");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Whisky Over 160 Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Whisky Over 160 Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "BrandyUnder170");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Brandy Under 170 Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Brandy Under 170 Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "BrandyOver170");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Brandy Over 170 Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Brandy Over 170 Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Rum");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Rum Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Rum Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Vodka");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Vodka Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Vodka Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "AlcoholUnder190");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Alcohol Under 190 Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Alcohol Under 190 Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "AlcoholOver190");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Alcohol Over 190 Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Alcohol Over 190 Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }

                    part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Other");

                    if (part5Object == null)
                    {
                        Assert.IsNull(part5Object, "Other Part 5 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(part5Object, "Other Part 5 object should be null");

                        Assert.AreEqual(0, part5Object.Proof);
                    }
                }
                #endregion End Of Production Part 5

                #region Production Part 6
                // verify Production report Part 6 - no data should be present in this scenario
                {
                    var part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Cane);

                    if (part6CategoryExpected == null)
                    {
                        Assert.IsNull(part6CategoryExpected, "There should be no records for Cane category");
                    }
                    else
                    {
                        Assert.IsNull(part6CategoryExpected, "There should be no records for Cane category");

                        Assert.Equals(0, part6CategoryExpected.Weight);
                        Assert.Equals(0, part6CategoryExpected.Volume);
                    }

                    part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);

                    if (part6CategoryExpected == null)
                    {
                        Assert.IsNull(part6CategoryExpected, "There should be no records for Fruit category");
                    }
                    else
                    {
                        Assert.AreEqual(0, part6CategoryExpected.Weight);
                        Assert.AreEqual(0, part6CategoryExpected.Volume);
                    }

                    part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Grain);

                    if (part6CategoryExpected == null)
                    {
                        Assert.IsNull(part6CategoryExpected, "There should be no records for Grain category");
                    }
                    else
                    {
                        Assert.IsNull(part6CategoryExpected, "There should be no records for Grain category");

                        Assert.Equals(0, part6CategoryExpected.Weight);
                        Assert.Equals(0, part6CategoryExpected.Volume);
                    }

                    part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Other);

                    if (part6CategoryExpected == null)
                    {
                        Assert.IsNull(part6CategoryExpected, "There should be no records for Other category");
                    }
                    else
                    {
                        Assert.IsNull(part6CategoryExpected, "There should be no records for Other category");

                        Assert.Equals(0, part6CategoryExpected.Weight);
                        Assert.Equals(0, part6CategoryExpected.Volume);
                    }
                }
                #endregion End Of Production Part 6

                #endregion End of Production report before deletion

                #region Storage Report
                {
                    /* Storage report object are by default null*/
                    StorageReportObject actualStorageReportObject = new StorageReportObject();
                    actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                    // Whisky Under 160
                    var storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyUnder160);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Under 160 Object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Under 160 Object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Whisky Over 160
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyOver160);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Over 160 Object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Over 160 Object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Brandy Under 170
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyUnder170);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Brandy Under 170 object should be null");
                    }
                    else
                    {
                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(80f, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(80f, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(80f, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(80f, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Brandy Over 170
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyOver170);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Brandy Over 170 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Brandy Over 170 object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Rum
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Rum);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Rum object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Rum object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }


                    // Gin
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Gin);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Gin object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Gin object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Vodka
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Vodka);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Vodka object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Vodka object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Alcohol Under 190
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholUnder190);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Under 190 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Under 190 object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Alcohol Over 190
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholOver190);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Over 190 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Over 190 object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Other
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Other);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Other object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Other object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Wine
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Wine);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Wine object should be null");
                    }
                    else
                    {
                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(18f, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(18f, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(18f, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(18f, storageSpiritObject.r24_Lines7Through23);
                    }
                }
                #endregion End of Storage Report

                // let's verify the values in production report after we deleted gauged distillation
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = productionId;
                deleteObject.DeleteRecordType = prodO.ProductionType;
                bool DistillationDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                var amounts =
                    (from purch in _db.Purchase
                     where purch.PurchaseID == purchaseId
                     join volume in _db.Volume on purch.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on purch.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on purch.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on purch.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(purchO.Quantity, amounts.volume);
                    Assert.AreEqual(purchO.VolumeByWeight, amounts.weight);
                    Assert.AreEqual(purchO.AlcoholContent, amounts.alcohol);
                    Assert.AreEqual(purchO.ProofGallon, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }

                #region Production Report After Deletion

                #region Production Report
                {
                    actualProdReportObject = new ProductionReportingObject();

                    actualProdReportObject = _productionReport.GetProductionReportData(start, end, _userId);

                    /* Production Report 
                     Update expected values accordingly to the expected result if needed
                    */

                    /* 
                       Production report Part 1
                       Default values for Spirit Objects are to be null
                    */

                    #region Production Part 1
                    // Whisky Under 160
                    var productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyUnder160);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Whisky Under 160 Object should be null");
                    }
                    else
                    {
                        Assert.IsNull(productionPart1Object, "Whisky Under 160 Object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Whisky Over 160
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyOver160);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Whisky Over 160 Object should be null");
                    }
                    else
                    {
                        Assert.IsNull(whiskyUnder160Actual, "Whisky Over 160 Object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }
                    // Brandy Under 170
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyUnder170);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Brandy Under 170 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(productionPart1Object, "Brandy Under 170 object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Brandy Over 170
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyOver170);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Brandy Over 170 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(productionPart1Object, "Brandy Over 170 object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Rum
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Rum);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Rum object should be null");
                    }
                    else
                    {
                        Assert.IsNotNull(productionPart1Object, "Rum object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Gin
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Gin);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Gin object should be null");
                    }
                    else
                    {
                        Assert.IsNull(ginActual, "Gin object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Vodka
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Vodka);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Vodka object should be null");
                    }
                    else
                    {
                        Assert.IsNull(vodkaActual, "Vodka object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Alcohol Under 190
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholUnder190);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Alcohol Under 190 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(productionPart1Object, "Alcohol Under 190 object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Alcohol Over 190
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholOver190);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Alcohol Over 190 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(productionPart1Object, "Alcohol Over 190 object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Other
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Other);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Other object should be null");
                    }
                    else
                    {
                        Assert.IsNull(productionPart1Object, "Other object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }

                    // Wine
                    productionPart1Object = actualProdReportObject.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Wine);

                    if (productionPart1Object == null)
                    {
                        Assert.IsNull(productionPart1Object, "Wine object should be null");
                    }
                    else
                    {
                        Assert.IsNull(wineActual, "Wine object should be null");

                        Assert.AreEqual(0, productionPart1Object.SpiritCatName);
                        Assert.AreEqual(0, productionPart1Object.ProccessingAcct);
                        Assert.AreEqual(0, productionPart1Object.StorageAcct);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilaltionL15);
                        Assert.AreEqual(0, productionPart1Object.Recd4RedistilL17);
                        Assert.AreEqual(0, productionPart1Object.UnfinishedSpiritsEndOfQuarterL17);
                        Assert.AreEqual(0, productionPart1Object.ProducedTotal);
                    }
                    #endregion End of Part 1
                    /* 
                       Production report Part 2 - 4
                       Default value is 0
                    */
                    #region Production Part 2 to 4
                    {
                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Grain);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Grain production part 2 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Grain production part 2 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Fruit);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Fruit production part 2 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Fruit production part 2 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Molasses);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Molasses production part 2 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Molasses production part 2 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.EthylSulfate);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethyl Sulfate production part 2 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethyl Sulfate production part 2 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.EthyleneGas);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethylene Gas production part 2 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Ethylene Gas production part 2 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.SulphiteLiquor);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Sulphite Liquor production part 2 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Sulphite Liquor production part 2 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.FromRedistillation);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "From Redistillation production part 2 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "From Redistillation production part 2 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Bourbon_New_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon New Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon New Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Bourbon_Used_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon New Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon Used Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Bourbon_Deposited_in_Tanks);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon Deposited In Tanks production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Bourbon Deposited In Tanks production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Corn_New_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn New Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn New Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Corn_Used_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Used Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Used Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Corn_Deposited_in_Tanks);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Deposited In Tanks production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Corn Deposited In Tanks production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Rye_New_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye New Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye New Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Rye_Used_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Used Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Used Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Rye_Deposited_in_Tanks);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Deposited In Tanks production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Rye Deposited In Tanks production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Light_New_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Light New Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Light New Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Light_Used_Cooperage);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Used Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Used Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.Light_Deposited_in_Tanks);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Deposited In Tanks Cooperage production part 3 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Light Deposited In Tanks Cooperage production part 3 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.GrapeBrandy);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Grape Brandy production part 4 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Grape Brandy production part 4 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.AllOtherBrandy);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Brandy production part 4 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Brandy production part 4 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.NeutralGrapeBrandy);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Neutral Grape Brandy production part 4 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "Neutral Grape Brandy production part 4 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }

                        prouctionObjectpart2Through4Expected = actualProdReportObject.Part2Through4List.Find(x => x.MaterialKindReportingID == (int)ReportMaterialKinds.AllOtherNeutralBrandy);

                        if (prouctionObjectpart2Through4Expected == null)
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Neutral Grape Brandy production part 4 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(prouctionObjectpart2Through4Expected, "All Other Neutral Grape Brandy production part 4 object should be null");

                            Assert.AreEqual(0, prouctionObjectpart2Through4Expected.ProofGallons);
                        }
                    }
                    #endregion End of Production Part 2 to 4

                    /*
                        Production report Part 5
                        Default value is null
                     */
                    #region Production Part 5
                    {
                        var part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Wine");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Wine Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Wine Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "WhiskyUnder160");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Whisky Under 160 Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Whisky Under 160 Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "WhiskyOver160");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Whisky Over 160 Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Whisky Over 160 Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "BrandyUnder170");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Brandy Under 170 Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Brandy Under 170 Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "BrandyOver170");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Brandy Over 170 Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Brandy Over 170 Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Rum");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Rum Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Rum Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Vodka");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Vodka Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Vodka Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "AlcoholUnder190");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Alcohol Under 190 Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Alcohol Under 190 Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "AlcoholOver190");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Alcohol Over 190 Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Alcohol Over 190 Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }

                        part5Object = actualProdReportObject.part5List.Find(x => x.KindofSpirits == "Other");

                        if (part5Object == null)
                        {
                            Assert.IsNull(part5Object, "Other Part 5 object should be null");
                        }
                        else
                        {
                            Assert.IsNull(part5Object, "Other Part 5 object should be null");

                            Assert.AreEqual(0, part5Object.Proof);
                        }
                    }
                    #endregion End of Production Part 5

                    /*
                        Production report Part 6
                        Default value is null objects for all categories: Cane, Fruit, Grain and Other
                    */
                    #region Production Part 6
                    {

                        var part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Cane);

                        if (part6CategoryExpected == null)
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Cane category");
                        }
                        else
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Cane category");

                            Assert.Equals(0, part6CategoryExpected.Weight);
                            Assert.Equals(0, part6CategoryExpected.Volume);
                        }

                        part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);

                        if (part6CategoryExpected == null)
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Fruit category");
                        }
                        else
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Fruit category");

                            Assert.Equals(0, part6CategoryExpected.Weight);
                            Assert.Equals(0, part6CategoryExpected.Volume);
                        }

                        part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Grain);

                        if (part6CategoryExpected == null)
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Grain category");
                        }
                        else
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Grain category");

                            Assert.Equals(0, part6CategoryExpected.Weight);
                            Assert.Equals(0, part6CategoryExpected.Volume);
                        }

                        part6CategoryExpected = actualProdReportObject.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Other);

                        if (part6CategoryExpected == null)
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Other category");
                        }
                        else
                        {
                            Assert.IsNull(part6CategoryExpected, "There should be no records for Other category");

                            Assert.Equals(0, part6CategoryExpected.Weight);
                            Assert.Equals(0, part6CategoryExpected.Volume);
                        }
                    }
                    #endregion Production Part 6
                }
                #endregion End of Production Report
                #endregion End of Production Report After Deletion

                #region Storage Report
                {
                    /* Storage report object are by default null*/
                    StorageReportObject actualStorageReportObject = new StorageReportObject();

                    actualStorageReportObject = _storageReport.GetStorageReportData(start, end, _userId);

                    // Whisky Under 160
                    var storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyUnder160);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Under 160 Object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Under 160 Object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Whisky Over 160
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.WhiskyOver160);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Over 160 Object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Whisky Over 160 Object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Brandy Under 170
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyUnder170);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Brandy Under 170 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Brandy Under 170 object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Brandy Over 170
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.BrandyOver170);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Brandy Over 170 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Brandy Over 170 object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Rum
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Rum);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Rum object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Rum object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }


                    // Gin
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Gin);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Gin object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Gin object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Vodka
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Vodka);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Vodka object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Vodka object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Alcohol Under 190
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholUnder190);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Under 190 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Under 190 object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Alcohol Over 190
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.AlcoholOver190);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Over 190 object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Alcohol Over 190 object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Other
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Other);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Other object should be null");
                    }
                    else
                    {
                        Assert.IsNull(storageSpiritObject, "Other object should be null");

                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(0, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(0, storageSpiritObject.r24_Lines7Through23);
                    }

                    // Wine
                    storageSpiritObject = actualStorageReportObject.ReportBody.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Wine);

                    if (storageSpiritObject == null)
                    {
                        Assert.IsNull(storageSpiritObject, "Wine object should be null");
                    }
                    else
                    {
                        Assert.AreEqual(0, storageSpiritObject.r1_OnHandFirstOfMonth);
                        Assert.AreEqual(18f, storageSpiritObject.r2_DepositedInBulkStorage);
                        Assert.AreEqual(0, storageSpiritObject.r4_ReturnedToBulkStorage);
                        Assert.AreEqual(18f, storageSpiritObject.r6_TotalLines1Through5);
                        Assert.AreEqual(0, storageSpiritObject.r7_TaxPaid);
                        Assert.AreEqual(0, storageSpiritObject.r17_TransferredToProcessingAccount);
                        Assert.AreEqual(0, storageSpiritObject.r18_TransferredToProductionAccount);
                        Assert.AreEqual(0, storageSpiritObject.r19_TransferredToOtherBondedPremises);
                        Assert.AreEqual(0, storageSpiritObject.r20_Destroyed);
                        Assert.AreEqual(0, storageSpiritObject.r22_OtherLosses);
                        Assert.AreEqual(18f, storageSpiritObject.r23_OnHandEndOfMonth);
                        Assert.AreEqual(18f, storageSpiritObject.r24_Lines7Through23);
                    }
                }
                #endregion End of Storage Report
            }
            finally
            {
                // Cleanup
                foreach (var i in tupleL)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Buy 960 PFG of GNS on 06/01/2018
        /// Batch 1 : Distil 50 PFG Gin by partially burning down 100 gal of GNS on 06/02/2018
        /// Batch 2 : Distil 50 PFG Gin by partially burning down 100 gal of GNS on 06/03/2018
        /// Delete Batch 2
        /// Check Purchase record. Number of PFG should be reinstated back to 900PFG
        /// </summary>
        [TestMethod]
        public void Delete_UnGauged_GIN_From_Purchased_GNS()
        {
            // Arrange
            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tupleL = new List<Tuple<int, Table>>();
            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int purchaseId = 0;
            int productionId = 0;
            int gnsMaterialId = 0;
            int waterMaterialId = 0;

            DateTimeOffset start = new DateTimeOffset(2018, 06, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 06, 30, 0, 0, 0, TimeSpan.Zero);

            try
            {
                #region Dictionary
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Gin";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);
                tupleL.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tupleL.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tupleL.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                RawMaterialObject gnsMaterial = new RawMaterialObject
                {
                    RawMaterialName = "GNS",
                    PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Distilled = true },
                    UnitTypeId = 2, // lb
                    UnitType = "lb",
                    MaterialCategoryID = 1
                };

                gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                tupleL.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));

                // water
                RawMaterialObject waterMaterial = new RawMaterialObject
                {
                    RawMaterialName = "Water",
                    UnitType = "gal",
                    UnitTypeId = 1,
                    PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Additive = true }
                };

                waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                tupleL.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 06, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 500f;
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 96f;
                purchO.ProofGallon = 960f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 3500f;
                purchO.VendorId = vendorId;

                List<StorageObject> stoL = new List<StorageObject>();
                StorageObject sto = new StorageObject();
                sto.StorageId = storageId;
                stoL.Add(sto);
                purchO.Storage = stoL;

                purchO.SpiritTypeReportingID = 11;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tupleL.Add(Tuple.Create(purchaseId, Table.Purchase));
                #endregion

                #region Production
                // create 1st Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "test1stDistillRun";
                prodO.ProductionDate = new DateTimeOffset(2018, 6, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 6, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 6, 2, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = false;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 100f;
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 96f;
                prodO.ProofGallon = 96f; // 80pfg
                prodO.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 3; // brandy under 170
                prodO.MaterialKindReportingID = 94; // grape brandy
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 4000f;
                uMat.NewVal = 100;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";
                uMat.Proof = 768f;

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tupleL.Add(Tuple.Create(productionId, Table.Production));

                // create 2nd Production Distillation Record and don't mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "test1stDistillRun";
                prodO1.ProductionDate = new DateTimeOffset(2018, 6, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 6, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 6, 3, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = false;
                prodO1.ProductionType = "Distillation";
                prodO1.Quantity = 50f; //50 gallons of alcohol
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 96f;
                prodO1.ProofGallon = 96f; // 80pfg
                prodO1.Storage = stoL; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // brandy under 170
                prodO1.MaterialKindReportingID = 94; // grape brandy
                prodO1.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = purchaseId;
                uMat1.OldVal = 300f;
                uMat1.NewVal = 100f;
                uMat1.DistillableOrigin = "pur";
                uMat1.BurningDownMethod = "volume";
                uMat1.Proof = 576;

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tupleL.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                // let's verify the values in production report after we deleted Ungauged distillation
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = productionId;
                deleteObject.DeleteRecordType = prodO.ProductionType;
                bool DistillationDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                var amounts =
                    (from purch in _db.Purchase
                     where purch.PurchaseID == purchaseId
                     join volume in _db.Volume on purch.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on purch.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on purch.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on purch.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(400, amounts.volume);
                    Assert.AreEqual(purchO.VolumeByWeight, amounts.weight);
                    Assert.AreEqual(purchO.AlcoholContent, amounts.alcohol);
                    Assert.AreEqual(768, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }
            }
            finally
            {
                // Cleanup
                foreach (var i in tupleL)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Buy Grapes in March, 2018
        /// Ferment Wine in March, 2018
        /// Disitl don't Gauged in March, 2018
        /// Delete Un-Gauged Distil
        /// Check actual distilled record was deleted
        /// </summary>
        [TestMethod]
        public void Delete_UnGauged_Distil_From_Produced_Wine()
        {
            // Arrange
            int spiritId = 0;
            int waterMaterialId = 0;
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset start = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset end = new DateTimeOffset(2018, 03, 31, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }
                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 150f; // 150 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 10f; // %
                prodO.ProofGallon = 30f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Distillation Record and mark it as Ungauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "DistilRunAndGauged";
                prodO1.ProductionDate = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 01, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = false;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 50f;
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 50f;
                prodO1.ProofGallon = 50f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = productionId;
                uMat1.OldVal = 0f;
                uMat1.NewVal = prodO.Quantity;
                //uMat1.Proof = prodO.ProofGallon;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                // validate that the burndowns have happened
                var purchaseAfterBurndown =
                    (from purchBefore in _db.Purchase
                     where purchBefore.PurchaseID == purchaseId
                     join volume in _db.Volume on purchBefore.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on purchBefore.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on purchBefore.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on purchBefore.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }
                    ).FirstOrDefault();

                if (purchaseAfterBurndown != null)
                {
                    Assert.AreEqual(0f, purchaseAfterBurndown.volume);
                    Assert.AreEqual(0f, purchaseAfterBurndown.weight);
                    Assert.AreEqual(0f, purchaseAfterBurndown.alcohol);
                    Assert.AreEqual(0f, purchaseAfterBurndown.proof);
                }
                else
                {
                    Assert.Inconclusive("purchaseAfterBurndown query yielded no results so could not perform this part of the test");
                }

                // let's verify the values in production report after we deleted Ungauged distillation
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodO.ProductionId;
                deleteObject.DeleteRecordType = prodO.ProductionType;
                bool DistillationDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                var amounts =
                    (from purch in _db.Purchase
                     where purch.PurchaseID == purchaseId
                     join volume in _db.Volume on purch.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on purch.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on purch.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on purch.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(purchO.Quantity, amounts.volume);
                    Assert.AreEqual(purchO.VolumeByWeight, amounts.weight);
                    Assert.AreEqual(purchO.AlcoholContent, amounts.alcohol);
                    Assert.AreEqual(purchO.ProofGallon, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Buy Corn in 1, 1, 2018
        /// Ferment Corn into Corn Mash in 1, 1, 2018
        /// Disitl Gauged GNS from Corn Mash in 1, 1, 2018
        /// Delete Distilled GNS
        /// Check Fermented Corn Mash record is fully restored.
        /// </summary>
        [TestMethod]
        public void DeleteWorkflow_FermentCornMash_DistillGNS_DeleteGNS_EnsurePreviousRecords_Intact()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int materialId = 0;
            int vendorId = 0;
            int storageId = 0;
            int purchaseId = 0;
            int productionId1 = 0;
            int productionId2 = 0;

            try
            {
                #region Arrange
                //  raw material setup
                RawMaterialObject corn = new RawMaterialObject();
                corn.RawMaterialName = "Corn";
                corn.PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Fermentable = true };
                corn.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Grain;
                corn.UnitTypeId = 2;
                corn.UnitType = "lbs";

                materialId = _dictionary.CreateRawMaterial(_userId, corn);
                tablesForCleanupTupleList.Add(Tuple.Create(materialId, Table.MaterialDict));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Corn";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.VolumeByWeight = 50f; // 50 lbs
                purchO.RecordId = materialId;
                purchO.Price = 1f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Ferment Corn into a Mash
                ProductionObject prodFermentedCornMash = new ProductionObject();
                prodFermentedCornMash.BatchName = "FermentedCorn";
                prodFermentedCornMash.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.Gauged = true;
                prodFermentedCornMash.ProductionType = "Fermentation";
                prodFermentedCornMash.Quantity = 500f; // 500 gallons of alcohol
                prodFermentedCornMash.VolumeByWeight = 0f;
                prodFermentedCornMash.AlcoholContent = 50f; // 50%
                prodFermentedCornMash.ProofGallon = 500f; // 500 pg
                prodFermentedCornMash.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodFermentedCornMash.SpiritTypeReportingID = 10; // Other
                prodFermentedCornMash.ProductionTypeId = 1;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f;
                uMat.OldVal = 0f;
                uMat.Proof = 0f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodFermentedCornMash.UsedMats = usedMats;

                productionId1 = _production.CreateProduction(prodFermentedCornMash, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId1, Table.Production));

                #endregion

                #region Act

                int janDays = DateTime.DaysInMonth(2018, 1);
                var janStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                var janEnd = new DateTimeOffset(2018, 1, janDays, 0, 0, 0, TimeSpan.Zero);

                StorageReportObject janStorageReport = _storageReport.GetStorageReportData(janStart, janEnd, _userId);
                ProductionReportingObject janProductionReport = _productionReport.GetProductionReportData(janStart, janEnd, _userId);
                // Distill Corn Mash into GNS and mark it as Gauged
                ProductionObject prodGNS = new ProductionObject();
                prodGNS.BatchName = "DistillGNS";
                prodGNS.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodGNS.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodGNS.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodGNS.SpiritCutId = 11; // mixed
                prodGNS.Gauged = true;
                prodGNS.ProductionType = "Distillation";
                prodGNS.Quantity = 1000f; // 1000 gallons of alcohol
                prodGNS.VolumeByWeight = 0f;
                prodGNS.AlcoholContent = 50f; // 50%
                prodGNS.ProofGallon = 1000f; // 1000 pg
                prodGNS.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodGNS.SpiritTypeReportingID = 9; // Alcohol>190 "GNS"
                prodGNS.MaterialKindReportingID = 75; // Grain
                prodGNS.ProductionTypeId = 2;

                usedMats.Clear();
                uMat.ID = productionId1;
                uMat.NewVal = 500f;
                uMat.OldVal = 0f;
                uMat.Proof = 0f;
                uMat.DistillableOrigin = "prod";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodGNS.UsedMats = usedMats;

                productionId2 = _production.CreateProduction(prodGNS, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                // validate that the burndowns have happened
                var amounts =
                    (from prod in _db.Production
                     where prod.ProductionID == productionId1
                     join volume in _db.Volume on prod.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on prod.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on prod.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on prod.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(0f, amounts.volume);
                    Assert.AreEqual(0f, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }

                #endregion

                #region Assert

                // Delete GNS Record
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = prodGNS.ProductionId;
                deleteObject.DeleteRecordType = prodGNS.ProductionType;
                bool DistillationDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                // let's verify the values in Fermented Corn Mash record have been restored after we deleted bottling                
                amounts =
                    (from prod in _db.Production
                     where prod.ProductionID == productionId1
                     join volume in _db.Volume on prod.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on prod.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on prod.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on prod.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(500f, amounts.volume);
                    Assert.AreEqual(0f, amounts.weight);
                    Assert.AreEqual(50f, amounts.alcohol);
                    Assert.AreEqual(500f, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }
            }

            #endregion
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Buy Grapes in March, 2018
        /// Ferment Wine in March, 2018
        /// Delete Fermented record
        /// Check that Fermented record was deleted
        /// </summary>
        [TestMethod]
        public void Delete_Fermented()
        {
            // Arrange
            int spiritId = 0;
            int waterMaterialId = 0;
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "Brandy Under 170";
                spirit.ProcessingReportTypeID = 12;

                spiritId =_dictionary.CreateSpirit(_userId, spirit);
                tablesForCleanupTupleList.Add(Tuple.Create(spiritId, Table.Spirit));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "VendorTest";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }
                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 2000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 01, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 150f; // 150 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 10f; // %
                prodO.ProofGallon = 30f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                #endregion

                // validate that the burndowns have happened
                var purchaseAfterBurndown =
                    (from purchBefore in _db.Purchase
                     where purchBefore.PurchaseID == purchaseId
                     join volume in _db.Volume on purchBefore.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on purchBefore.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on purchBefore.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on purchBefore.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }
                    ).FirstOrDefault();

                if (purchaseAfterBurndown != null)
                {
                    Assert.AreEqual(0f, purchaseAfterBurndown.volume);
                    Assert.AreEqual(0f, purchaseAfterBurndown.weight);
                    Assert.AreEqual(0f, purchaseAfterBurndown.alcohol);
                    Assert.AreEqual(0f, purchaseAfterBurndown.proof);
                }
                else
                {
                    Assert.Inconclusive("purchaseAfterBurndown query yielded no results so could not perform this part of the test");
                }

                // let's verify the values Purchase records are reinstated after we deleted Fermented record
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = productionId;
                deleteObject.DeleteRecordType = prodO.ProductionType;
                bool DistillationDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                var amounts =
                    (from purch in _db.Purchase
                     where purch.PurchaseID == purchaseId
                     join volume in _db.Volume on purch.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on purch.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on purch.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on purch.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(purchO.Quantity, amounts.volume);
                    Assert.AreEqual(purchO.VolumeByWeight, amounts.weight);
                    Assert.AreEqual(purchO.AlcoholContent, amounts.alcohol);
                    Assert.AreEqual(purchO.ProofGallon, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Repro steps from the bug:
        /// 1. Purchase 4000 lbs of Red Grapes on 2/3/2018
        /// 2. Make 500 gallons of 12% ABV from those grapes on 2/10/2018
        /// 3. Distill 250 gallons of those grapes into brandy on 3/10/2018
        /// 4. Check Production report it should show 2000 pounds 
        /// 5. Distil another 125 gallons with remaining 125 out of 250 gallons
        /// Production report should show 3000 pounds of grapes
        /// </summary>
        [TestMethod]
        public void Make_Multiple_Distil_Batches_Out_Of_Single_Batch_Of_Grapes_Check_Production_Report()
        {
            // Arrange
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset startMarch = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset endMarch = new DateTimeOffset(2018, 03, 31, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset startApril = new DateTimeOffset(2018, 04, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset endApril = new DateTimeOffset(2018, 04, 30, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 03, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 4000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 03, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 03, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 03, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 500f; // 500 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 12f; // %
                prodO.ProofGallon = 120f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                var wineProdId = productionId;

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create 1st Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "Brandy";
                prodO1.ProductionDate = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 25f; // 25 gallons
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 55f;
                prodO1.ProofGallon = 27.5f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = wineProdId;
                uMat1.OldVal = 250; // remaining value
                uMat1.NewVal = 250;
                uMat1.Proof = 60;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "March 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                ProductionReportingObject actualProductionReport = new ProductionReportingObject();

                //get actual production data after first production creation
                actualProductionReport = _productionReport.GetProductionReportData(startMarch, endMarch, _userId);

                // verify Storage report Header
                Assert.AreEqual(reportHeaderE.DSP, actualProductionReport.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProductionReport.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProductionReport.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProductionReport.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProductionReport.Header.ReportDate);

                // verify Production Report Part 6
                // we should display half of the used materials since only half of the wine was used in this production
                var part6CategoryExpected = actualProductionReport.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);

                if (part6CategoryExpected == null)
                {
                    Assert.IsNotNull(part6CategoryExpected, "There should be no records for Fruit category");
                }
                else
                {
                    Assert.AreEqual(2000, part6CategoryExpected.Weight);
                    Assert.AreEqual(0, part6CategoryExpected.Volume);
                }

                // create 2nd Production Distillation Record and mark it as Gauged. Use 1/4 of the original amount of wine
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "Brandy";
                prodO2.ProductionDate = new DateTimeOffset(2018, 03, 21, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2018, 03, 21, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2018, 03, 21, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 11; // mixed
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.ProductionTypeId = 2;
                prodO2.Quantity = 12f;
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 55f;
                prodO2.ProofGallon = 13.2f;
                prodO2.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 3; // Brandy 170-
                prodO2.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats2 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat2 = new ObjInfo4Burndwn();
                uMat2.ID = wineProdId;
                uMat2.OldVal = 125; // remaining value
                uMat2.NewVal = 125;
                uMat2.Proof = 30;
                uMat2.DistillableOrigin = "prod";
                uMat2.BurningDownMethod = "volume";

                usedMats2.Add(uMat2);

                prodO2.UsedMats = usedMats2;

                productionId = _production.CreateProduction(prodO2, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                actualProductionReport = _productionReport.GetProductionReportData(startMarch, endMarch, _userId);

                // verify Production Report Part 6
                // we should display 2/3 of the used material.
                part6CategoryExpected = actualProductionReport.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);

                if (part6CategoryExpected == null)
                {
                    Assert.IsNotNull(part6CategoryExpected, "There should be no records for Fruit category");
                }
                else
                {
                    Assert.AreEqual(3000, part6CategoryExpected.Weight);
                    Assert.AreEqual(0, part6CategoryExpected.Volume);
                }

                // create 3rd Production Distillation Record and mark it as Gauged. Use 1/4 of the original amount of wine
                ProductionObject prodO3 = new ProductionObject();
                prodO3.BatchName = "Brandy";
                prodO3.ProductionDate = new DateTimeOffset(2018, 04, 05, 0, 0, 0, TimeSpan.Zero);
                prodO3.ProductionStart = new DateTimeOffset(2018, 04, 05, 0, 0, 0, TimeSpan.Zero);
                prodO3.ProductionEnd = new DateTimeOffset(2018, 04, 05, 0, 0, 0, TimeSpan.Zero);
                prodO3.SpiritCutId = 11; // mixed
                prodO3.Gauged = true;
                prodO3.ProductionType = "Distillation";
                prodO3.ProductionTypeId = 2;
                prodO3.Quantity = 12f;
                prodO3.VolumeByWeight = 0f;
                prodO3.AlcoholContent = 55f;
                prodO3.ProofGallon = 13.2f;
                prodO3.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO3.SpiritTypeReportingID = 3; // Brandy 170-
                prodO3.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats3 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat3 = new ObjInfo4Burndwn();
                uMat3.ID = wineProdId;
                uMat3.OldVal = 0; // remaining value
                uMat3.NewVal = 125;
                uMat3.Proof = 30;
                uMat3.DistillableOrigin = "prod";
                uMat3.BurningDownMethod = "volume";

                usedMats3.Add(uMat3);

                prodO3.UsedMats = usedMats3;

                productionId = _production.CreateProduction(prodO3, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                actualProductionReport = _productionReport.GetProductionReportData(startApril, endApril, _userId);

                // verify Production Report Part 6
                // we should display only the remainder of the used materials.
                part6CategoryExpected = actualProductionReport.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);

                if (part6CategoryExpected == null)
                {
                    Assert.IsNotNull(part6CategoryExpected, "There should be records for Fruit category");
                }
                else
                {
                    Assert.AreEqual(1000, part6CategoryExpected.Weight);
                    Assert.AreEqual(0, part6CategoryExpected.Volume);
                }

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Testcase:
        /// Purchase Pomace batch 1
        /// Purchase Pomace batch 2
        /// Distill and Gauge
        /// Check Production report
        /// </summary>
        [TestMethod()]
        public void BuyMultiplPomaceBatches_And_Distill()
        {
            // A tuple to log database test records for later clean-up
            List<Tuple<int, Table>> testRecords = new List<Tuple<int, Table>>();

            try
            {
                // Arrange

                // Create Spirit dictionary item
                SpiritObject spirit = new SpiritObject
                {
                    SpiritName = "PomaceBrandy",
                    ProcessingReportTypeID = 12 // BRANDY DISTILLED AT 170 AND UNDER
                };

                int spiritId = _dictionary.CreateSpirit(_userId, spirit);
                testRecords.Add(Tuple.Create(spiritId, Table.Spirit));

                // Create Raw Material dictionary item
                RawMaterialObject rawMaterial = new RawMaterialObject
                {
                    RawMaterialName = "FermentedPomace",
                    PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Fermented = true },
                    UnitTypeId = 2,
                    MaterialCategoryID = 2,
                    UnitType = "lb"
                };

                int rawMaterialId = _dictionary.CreateRawMaterial(_userId, rawMaterial);
                testRecords.Add(Tuple.Create(rawMaterialId, Table.MaterialDict));

                // Create Vendor dictionary item
                VendorObject vendor = new VendorObject
                {
                    VendorName = "BigGrapesWinery"
                };

                int vendorId = _dictionary.CreateVendor(_userId, vendor);
                testRecords.Add(Tuple.Create(vendorId, Table.Vendor));

                // Create Storage dictionary item
                StorageObject storage = new StorageObject
                {
                    StorageName = "TheTank"
                };

                int storageId = _dictionary.CreateStorage(_userId, storage);
                testRecords.Add(Tuple.Create(storageId, Table.Storage));

                // Create Fermented Purchase record 1
                PurchaseObject purchase = new PurchaseObject
                {
                    PurBatchName = "FermentedPomaceFromBigGrapesWinery",
                    PurchaseType = "Fermented",
                    PurchaseDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    VolumeByWeight = 1000f,
                    RecordId = rawMaterialId,
                    Price = 2000f,
                    VendorId = vendorId,
                    Gauged = true,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    }
                };

                int purchaseId = _purchase.CreatePurchase(purchase, _userId);
                testRecords.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Create Fermented Purchase record 2
                PurchaseObject purchase2 = new PurchaseObject
                {
                    PurBatchName = "FermentedPomaceFromBigGrapesWinery2",
                    PurchaseType = "Fermented",
                    PurchaseDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    VolumeByWeight = 1000f,
                    RecordId = rawMaterialId,
                    Price = 2000f,
                    VendorId = vendorId,
                    Gauged = true,
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    }
                };

                int purchaseId2 = _purchase.CreatePurchase(purchase2, _userId);
                testRecords.Add(Tuple.Create(purchaseId2, Table.Purchase));

                // Create Production Distillation record and Gauged to true
                ProductionObject production = new ProductionObject
                {
                    BatchName = "PomaceDistillation",
                    ProductionDate = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionStart = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    ProductionEnd = new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    Gauged = true,
                    ProductionType = "Distillation",
                    Quantity = 100f,
                    AlcoholContent = 50f,
                    ProofGallon = 100f,
                    SpiritTypeReportingID = 3, // Brandy Under 170
                    ProductionTypeId = 2,
                    SpiritId = spiritId,
                    SpiritCutId = 11, // mixed
                    MaterialKindReportingID = 95, // All Other Brandy
                    Storage = new List<StorageObject>
                    {
                        new StorageObject { StorageId = storageId }
                    },
                    UsedMats = new List<ObjInfo4Burndwn>
                    {
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId,
                            OldVal = 0f,
                            NewVal = purchase.VolumeByWeight,
                            DistillableOrigin = "pur",
                            BurningDownMethod = "weight"
                        },
                        new ObjInfo4Burndwn
                        {
                            ID = purchaseId2,
                            OldVal = 0f,
                            NewVal = purchase2.VolumeByWeight,
                            DistillableOrigin = "pur",
                            BurningDownMethod = "weight"
                        }
                    }
                };

                int productionId = _production.CreateProduction(production, _userId);
                testRecords.Add(Tuple.Create(productionId, Table.Production));

                // Act
                ProductionReportingObject actualProductionReport = _productionReport.GetProductionReportData(new DateTimeOffset(2017, 1, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2017, 1, 31, 0, 0, 0, TimeSpan.Zero), _userId);

                // verify Production Report Part 6
                // we should display only the remainder of the used materials.
                var part6CategoryExpected = actualProductionReport.ProdReportPart6List.Find(x => x.ProdReportMaterialCategoryID == (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit);

                if (part6CategoryExpected == null)
                {
                    Assert.IsNotNull(part6CategoryExpected, "There should be records for Fruit category");
                }
                else
                {
                    Assert.AreEqual(2000, part6CategoryExpected.Weight);
                    Assert.AreEqual(0, part6CategoryExpected.Volume);
                    Assert.AreEqual(2, part6CategoryExpected.ProdReportMaterialCategoryID);
                }

                // verify that we supply values for totals columns
                var part1Total = actualProductionReport.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Total);

                if (part1Total == null)
                {
                    Assert.IsNotNull(part1Total, "There should be a value in Total column in the Production report");
                }
                else
                {
                    Assert.AreEqual(100, part1Total.StorageAcct);
                    Assert.AreEqual(100, part1Total.ProducedTotal);
                }
            }
            finally
            {
                // Perform table cleanup
                foreach (var rec in testRecords)
                {
                    TestRecordCleanup(rec.Item1, rec.Item2);
                }
            }
        }

        [TestMethod]
        public void CreateMultipleDistils_Varying_SpiritTypes_And_Check_Totals_Column()
        {
            int vendorId = 0;
            int storageId = 0;
            int grapeMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            // reporting time range
            DateTimeOffset startMarch = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset endMarch = new DateTimeOffset(2018, 03, 31, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset startApril = new DateTimeOffset(2018, 04, 01, 0, 0, 0, TimeSpan.Zero);
            DateTimeOffset endApril = new DateTimeOffset(2018, 04, 30, 0, 0, 0, TimeSpan.Zero);

            List<Tuple<int/*recordId*/, Table/*table enum vaue*/>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            try
            {
                //  dictionary setup
                #region Dictionary

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // grapes
                {
                    RawMaterialObject grapeMaterial = new RawMaterialObject();
                    grapeMaterial.RawMaterialName = "Grapes";
                    grapeMaterial.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Fruit;
                    grapeMaterial.UnitType = "lb";
                    grapeMaterial.UnitTypeId = 2;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Fermentable = true;
                    grapeMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    grapeMaterialId = _dictionary.CreateRawMaterial(_userId, grapeMaterial);

                    tablesForCleanupTupleList.Add(Tuple.Create(grapeMaterialId, Table.MaterialDict));
                }

                #endregion

                #region Purchase
                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Riesling Grapes ";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 03, 03, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 0f;
                purchO.VolumeByWeight = 4000f;
                purchO.RecordId = grapeMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                #endregion

                #region Production
                // create Fermented record
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "Riesling Wine";
                prodO.ProductionDate = new DateTimeOffset(2018, 03, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 03, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 03, 15, 0, 0, 0, TimeSpan.Zero);
                prodO.Gauged = true;
                prodO.ProductionType = "Fermentation";
                prodO.ProductionTypeId = 1;
                prodO.Quantity = 500f; // 500 gallons of wine
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 12f; // %
                prodO.ProofGallon = 120f; // pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 11; // Wine
                prodO.MaterialKindReportingID = 0;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 0f;
                uMat.NewVal = purchO.VolumeByWeight;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                var wineProdId = productionId;

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create 1st Production Distillation Record and mark it as Gauged
                ProductionObject prodO1 = new ProductionObject();
                prodO1.BatchName = "Brandy";
                prodO1.ProductionDate = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionStart = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.ProductionEnd = new DateTimeOffset(2018, 03, 20, 0, 0, 0, TimeSpan.Zero);
                prodO1.SpiritCutId = 11; // mixed
                prodO1.Gauged = true;
                prodO1.ProductionType = "Distillation";
                prodO1.ProductionTypeId = 2;
                prodO1.Quantity = 25f; // 25 gallons
                prodO1.VolumeByWeight = 0f;
                prodO1.AlcoholContent = 55f;
                prodO1.ProofGallon = 27.5f;
                prodO1.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO1.SpiritTypeReportingID = 3; // Brandy 170-
                prodO1.MaterialKindReportingID = 94; // grape brandy

                List<ObjInfo4Burndwn> usedMats1 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat1 = new ObjInfo4Burndwn();
                uMat1.ID = wineProdId;
                uMat1.OldVal = 250; // remaining value
                uMat1.NewVal = 250;
                uMat1.Proof = 60;
                uMat1.DistillableOrigin = "prod";
                uMat1.BurningDownMethod = "volume";

                usedMats1.Add(uMat1);

                prodO1.UsedMats = usedMats1;

                productionId = _production.CreateProduction(prodO1, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));


                // create 2nd Production Distillation Record and mark it as Gauged. Use 1/4 of the original amount of wine
                ProductionObject prodO2 = new ProductionObject();
                prodO2.BatchName = "Whisky";
                prodO2.ProductionDate = new DateTimeOffset(2018, 03, 21, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionStart = new DateTimeOffset(2018, 03, 21, 0, 0, 0, TimeSpan.Zero);
                prodO2.ProductionEnd = new DateTimeOffset(2018, 03, 21, 0, 0, 0, TimeSpan.Zero);
                prodO2.SpiritCutId = 11; // mixed
                prodO2.Gauged = true;
                prodO2.ProductionType = "Distillation";
                prodO2.ProductionTypeId = 2;
                prodO2.Quantity = 12f;
                prodO2.VolumeByWeight = 0f;
                prodO2.AlcoholContent = 55f;
                prodO2.ProofGallon = 13.2f;
                prodO2.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO2.SpiritTypeReportingID = 2; // Whisky Over 160
                prodO2.MaterialKindReportingID = 76; // fruit

                List<ObjInfo4Burndwn> usedMats2 = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat2 = new ObjInfo4Burndwn();
                uMat2.ID = wineProdId;
                uMat2.OldVal = 125; // remaining value
                uMat2.NewVal = 125;
                uMat2.Proof = 30;
                uMat2.DistillableOrigin = "prod";
                uMat2.BurningDownMethod = "volume";

                usedMats2.Add(uMat2);

                prodO2.UsedMats = usedMats2;

                productionId = _production.CreateProduction(prodO2, _userId);

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                ProductionReportingObject actualProductionReport = new ProductionReportingObject();

                actualProductionReport = _productionReport.GetProductionReportData(startMarch, endMarch, _userId);

                // verify that we supply values for totals columns
                var part1Total = actualProductionReport.Part1List.Find(x => x.SpiritTypeReportingID == (int)ReportSpiritTypes.Total);

                if (part1Total == null)
                {
                    Assert.IsNotNull(part1Total, "There should be a value in Total column in the Production report");
                }
                else
                {
                    Assert.AreEqual(40.7f, part1Total.StorageAcct);
                    Assert.AreEqual(90f, part1Total.Recd4RedistilaltionL15);
                    Assert.AreEqual(40.7f, part1Total.ProducedTotal);
                }

                #endregion
            }
            finally
            {
                // Cleanup created records
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// Buy Corn in 1, 1, 2018
        /// Ferment Corn into Corn Mash in 1, 1, 2018
        /// Disitl Gauged GNS from Corn Mash in 1, 1, 2018
        /// Delete Distilled GNS
        /// Delete Corn Mash
        /// Expected: Should not get an exception when deleting Corn Mash
        /// </summary>
        [TestMethod]
        public void BackwardsDelete_FermentCornMash_DistillGNS_DeleteGNS_DeleteFermented_MakeSureWeCanDeleteFermented()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int materialId = 0;
            int vendorId = 0;
            int storageId = 0;
            int purchaseId = 0;
            int productionId1 = 0;
            int productionId2 = 0;

            try
            {
                #region Arrange
                //  raw material setup
                RawMaterialObject corn = new RawMaterialObject();
                corn.RawMaterialName = "Corn";
                corn.PurchaseMaterialTypes = new PurchaseMaterialBooleanTypes { Fermentable = true };
                corn.MaterialCategoryID = (int)Persistence.BusinessLogicEnums.ProductionReportMaterialCategory.Grain;
                corn.UnitTypeId = 2;
                corn.UnitType = "lbs";

                materialId = _dictionary.CreateRawMaterial(_userId, corn);
                tablesForCleanupTupleList.Add(Tuple.Create(materialId, Table.MaterialDict));

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "Corn";
                purchO.PurchaseType = "Fermentable";
                purchO.PurchaseDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                purchO.VolumeByWeight = 100f; // 100 lbs
                purchO.RecordId = materialId;
                purchO.Price = 1f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Ferment Corn into a Mash
                ProductionObject prodFermentedCornMash = new ProductionObject();
                prodFermentedCornMash.BatchName = "FermentedCorn";
                prodFermentedCornMash.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodFermentedCornMash.Gauged = true;
                prodFermentedCornMash.ProductionType = "Fermentation";
                prodFermentedCornMash.Quantity = 50f; // 50 gallons of alcohol
                prodFermentedCornMash.VolumeByWeight = 0f;
                prodFermentedCornMash.AlcoholContent = 50f; // 50%
                prodFermentedCornMash.ProofGallon = 50f; // 500 pg
                prodFermentedCornMash.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodFermentedCornMash.SpiritTypeReportingID = 10; // Other
                prodFermentedCornMash.ProductionTypeId = 1;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.NewVal = 50f;
                uMat.OldVal = 50f;
                uMat.Proof = 0f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "weight";

                usedMats.Add(uMat);

                prodFermentedCornMash.UsedMats = usedMats;

                productionId1 = _production.CreateProduction(prodFermentedCornMash, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId1, Table.Production));

                #endregion

                #region Act

                // Distill Corn Mash into GNS and mark it as Gauged
                ProductionObject prodGNS = new ProductionObject();
                prodGNS.BatchName = "DistillGNS";
                prodGNS.ProductionDate = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodGNS.ProductionStart = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodGNS.ProductionEnd = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero);
                prodGNS.SpiritCutId = 11; // mixed
                prodGNS.Gauged = true;
                prodGNS.ProductionType = "Distillation";
                prodGNS.Quantity = 10f; // 10 gallons of alcohol
                prodGNS.VolumeByWeight = 0f;
                prodGNS.AlcoholContent = 50f; // 50%
                prodGNS.ProofGallon = 10f; // 1000 pg
                prodGNS.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodGNS.SpiritTypeReportingID = 9; // Alcohol>190 "GNS"
                prodGNS.MaterialKindReportingID = 75; // Grain
                prodGNS.ProductionTypeId = 2;

                usedMats.Clear();
                uMat.ID = productionId1;
                uMat.NewVal = 10f;
                uMat.OldVal = 40f;
                uMat.Proof = 0f;
                uMat.DistillableOrigin = "prod";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodGNS.UsedMats = usedMats;

                productionId2 = _production.CreateProduction(prodGNS, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId2, Table.Production));

                // validate that the burndowns have happened
                var amounts =
                    (from prod in _db.Production
                     where prod.ProductionID == productionId1
                     join volume in _db.Volume on prod.VolumeID equals volume.VolumeID into volume_join
                     from volume in volume_join.DefaultIfEmpty()
                     join weight in _db.Weight on prod.WeightID equals weight.WeightID into weight_join
                     from weight in weight_join.DefaultIfEmpty()
                     join alcohol in _db.Alcohol on prod.AlcoholID equals alcohol.AlcoholID into alcohol_join
                     from alcohol in alcohol_join.DefaultIfEmpty()
                     join proof in _db.Proof on prod.ProofID equals proof.ProofID into proof_join
                     from proof in proof_join.DefaultIfEmpty()
                     select new
                     {
                         volume = (float?)volume.Value ?? (float?)0,
                         weight = (float?)weight.Value ?? (float?)0,
                         alcohol = (float?)alcohol.Value ?? (float?)0,
                         proof = (float?)proof.Value ?? (float?)0
                     }).FirstOrDefault();

                if (amounts != null)
                {
                    Assert.AreEqual(40f, amounts.volume);
                    Assert.AreEqual(0f, amounts.proof);
                }
                else
                {
                    Assert.Inconclusive("amounts query yielded no results so could not perform this part of the test");
                }

                #endregion

                #region Assert

                // Delete GNS Record
                DeleteRecordObject deleteObject = new DeleteRecordObject();
                deleteObject.DeleteRecordID = productionId2;
                deleteObject.DeleteRecordType = prodGNS.ProductionType;
                bool distillationDeleted = _production.DeleteProductionExecute(deleteObject, _userId);

                // Delete Corn Mash Record
                deleteObject.DeleteRecordID = productionId1;
                deleteObject.DeleteRecordType = prodFermentedCornMash.ProductionType;

                ReturnObject delReturn = new ReturnObject();

                delReturn = _production.DeleteProductionRecord(_userId, deleteObject);

                // let's verify the values in Fermented Corn Mash was successfully deleted
                Assert.IsTrue(delReturn.ExecuteResult);
            }

            #endregion
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// 1. Purchase 100(100@50) proof gallons of GNS on 3/1/2018
        /// 2. Redistill inro 98 (50@98) proof gallons GIN on 4/2/2018, Gauged
        /// 3. Blend 98 (100@49%) pfg of Gin on 5/2/2018
        /// 4. Bottle 97.5 (150@32.5%) pfg of Gin on 6/4/2018
        /// 5. Withdraw 50 pfg as sold on 6/10/2018
        /// 6 .Check Processing Report
        /// Expected: 
        /// Line 28 = 97.5
        /// Line 31 = 97.5
        /// Line 33 = 50
        /// Line 46 = 47.5
        /// Line 47 = 97.5
        /// Author: Grisha
        /// </summary>
        public void BuyGNS_RedistilHalfIntoGin_Blend_Bottle_CheckProcessingTotals()
        {
            // Tuple<recordId, table enum value>
            List<Tuple<int, Table>> tablesForCleanupTupleList = new List<Tuple<int, Table>>();

            int spiritId = 0;
            int vendorId = 0;
            int storageId = 0;
            int gnsMaterialId = 0;
            int waterMaterialId = 0;
            int purchaseId = 0;
            int productionId = 0;

            try
            {
                #region Arrange
                //  dictionary setup
                SpiritObject spirit = new SpiritObject();
                spirit.SpiritName = "GIN";
                spirit.ProcessingReportTypeID = 18;

                spiritId = _dictionary.CreateSpirit(_userId, spirit);

                // setup Vendor object
                VendorObject vendor = new VendorObject();
                vendor.VendorName = "testVendor";

                vendorId = _dictionary.CreateVendor(_userId, vendor);
                tablesForCleanupTupleList.Add(Tuple.Create(vendorId, Table.Vendor));

                // setup Storage Object
                StorageObject storage = new StorageObject();
                storage.StorageName = "testStorage";
                storage.SerialNumber = "2H29NNS";

                storageId = _dictionary.CreateStorage(_userId, storage);
                tablesForCleanupTupleList.Add(Tuple.Create(storageId, Table.Storage));

                // setup Material Object
                // GNS
                {
                    RawMaterialObject gnsMaterial = new RawMaterialObject();
                    gnsMaterial.RawMaterialName = "GNS for GIN";
                    gnsMaterial.UnitType = "gal";
                    gnsMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Distilled = true;
                    gnsMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    gnsMaterialId = _dictionary.CreateRawMaterial(_userId, gnsMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(gnsMaterialId, Table.MaterialDict));
                }

                // water
                {
                    RawMaterialObject waterMaterial = new RawMaterialObject();
                    waterMaterial.RawMaterialName = "Water";
                    waterMaterial.UnitType = "gal";
                    waterMaterial.UnitTypeId = 1;
                    PurchaseMaterialBooleanTypes materialBoolTypes = new PurchaseMaterialBooleanTypes();
                    materialBoolTypes.Additive = true;
                    waterMaterial.PurchaseMaterialTypes = materialBoolTypes;

                    waterMaterialId = _dictionary.CreateRawMaterial(_userId, waterMaterial);
                    tablesForCleanupTupleList.Add(Tuple.Create(waterMaterialId, Table.MaterialDict));
                }

                // create Purchase Record (minimal required fields)
                PurchaseObject purchO = new PurchaseObject();
                purchO.PurBatchName = "GNS";
                purchO.PurchaseType = "Distilled";
                purchO.PurchaseDate = new DateTimeOffset(2018, 03, 01, 0, 0, 0, TimeSpan.Zero);
                purchO.Quantity = 100f; // 100 gallons
                purchO.VolumeByWeight = 0f;
                purchO.AlcoholContent = 98f;
                purchO.ProofGallon = 196f;
                purchO.RecordId = gnsMaterialId;
                purchO.Price = 350f;
                purchO.VendorId = vendorId;
                purchO.Gauged = true;

                List<StorageObject> storageList = new List<StorageObject>();
                StorageObject storageObject = new StorageObject();
                storageObject.StorageId = storageId;
                storageList.Add(storageObject);
                purchO.Storage = storageList;

                purchO.SpiritTypeReportingID = 9;
                purchO.Gauged = true;

                purchaseId = _purchase.CreatePurchase(purchO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(purchaseId, Table.Purchase));

                // Redistil GNS into GIN and mark it as Gauged
                ProductionObject prodO = new ProductionObject();
                prodO.BatchName = "RedistilledGns";
                prodO.ProductionDate = new DateTimeOffset(2018, 04, 02, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionStart = new DateTimeOffset(2018, 04, 02, 0, 0, 0, TimeSpan.Zero);
                prodO.ProductionEnd = new DateTimeOffset(2018, 04, 02, 0, 0, 0, TimeSpan.Zero);
                prodO.SpiritCutId = 11; // mixed
                prodO.Gauged = true;
                prodO.ProductionType = "Distillation";
                prodO.Quantity = 50f; // 50 gallons of alcohol
                prodO.VolumeByWeight = 0f;
                prodO.AlcoholContent = 98f; // 98%
                prodO.ProofGallon = 98f; // 98 pfg
                prodO.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodO.SpiritTypeReportingID = 6; // Gin
                prodO.ProductionTypeId = 2;

                List<ObjInfo4Burndwn> usedMats = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat = new ObjInfo4Burndwn();
                uMat.ID = purchaseId;
                uMat.OldVal = 50f;
                uMat.NewVal = 50f;
                uMat.Proof = 98f;
                uMat.DistillableOrigin = "pur";
                uMat.BurningDownMethod = "volume";

                usedMats.Add(uMat);

                prodO.UsedMats = usedMats;

                productionId = _production.CreateProduction(prodO, _userId);
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Blending Record
                ProductionObject prodBlend = new ProductionObject();
                prodBlend.BatchName = "Gin";
                prodBlend.ProductionDate = new DateTimeOffset(2018, 05, 03, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionStart = new DateTimeOffset(2018, 05, 03, 0, 0, 0, TimeSpan.Zero);
                prodBlend.ProductionEnd = new DateTimeOffset(2018, 05, 03, 0, 0, 0, TimeSpan.Zero);
                prodBlend.Gauged = true;
                prodBlend.ProductionType = "Blending";
                prodBlend.Quantity = 100f; // 100 gallons of alcohol
                prodBlend.VolumeByWeight = 0f;
                prodBlend.AlcoholContent = 49f; // 49%
                prodBlend.ProofGallon = 98f; // 98pfg
                prodBlend.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBlend.SpiritTypeReportingID = 6; // GIN
                prodBlend.SpiritId = spiritId;
                prodBlend.ProductionTypeId = 3;

                List<ObjInfo4Burndwn> usedMats4Blend = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Blend = new ObjInfo4Burndwn();
                uMat4Blend.ID = productionId;
                uMat4Blend.OldVal = 0f;
                uMat4Blend.NewVal = 50f;
                uMat4Blend.DistillableOrigin = "prod";
                uMat4Blend.BurningDownMethod = "volume";

                usedMats4Blend.Add(uMat4Blend);
                prodBlend.UsedMats = usedMats4Blend;

                List<BlendingAdditive> blendAdditives = new List<BlendingAdditive>();
                BlendingAdditive blendAd = new BlendingAdditive();
                blendAd.RawMaterialId = waterMaterialId;
                blendAd.RawMaterialQuantity = 50f;
                blendAd.RawMaterialName = "Water";
                blendAd.UnitOfMeasurement = "gal";

                blendAdditives.Add(blendAd);

                prodBlend.BlendingAdditives = blendAdditives;

                productionId = _production.CreateProduction(prodBlend, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // create Production Bottling Record
                ProductionObject prodBottl = new ProductionObject();
                prodBottl.BatchName = "GIN Bottling Test ";
                prodBottl.ProductionDate = new DateTimeOffset(2018, 06, 4, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionStart = new DateTimeOffset(2018, 06, 4, 0, 0, 0, TimeSpan.Zero);
                prodBottl.ProductionEnd = new DateTimeOffset(2018, 06, 4, 0, 0, 0, TimeSpan.Zero);
                prodBottl.Gauged = true;
                prodBottl.ProductionType = "Bottling";
                prodBottl.Quantity = 150f; // 150 gallons of alcohol
                prodBottl.VolumeByWeight = 0f;
                prodBottl.AlcoholContent = 32.5f; // 45%
                prodBottl.ProofGallon = 97.5f; // 97.5 pfg
                prodBottl.Storage = storageList; // we are using the same storage id as we use for Purchase to keep things simple
                prodBottl.SpiritTypeReportingID = 6; // Gin
                prodBottl.SpiritId = spiritId;
                prodO.ProductionTypeId = 4;
                // BUG?

                List<ObjInfo4Burndwn> usedMats4Bottl = new List<ObjInfo4Burndwn>();
                ObjInfo4Burndwn uMat4Bottl = new ObjInfo4Burndwn();
                uMat4Bottl.ID = productionId;
                uMat4Bottl.OldVal = 0f;
                uMat4Bottl.NewVal = prodBlend.Quantity;
                uMat4Bottl.DistillableOrigin = "prod";
                uMat4Bottl.BurningDownMethod = "volume";

                usedMats4Bottl.Add(uMat4Bottl);
                prodBottl.UsedMats = usedMats4Bottl;

                BottlingObject bottlingObj = new BottlingObject();
                bottlingObj.CaseCapacity = 10;
                bottlingObj.CaseQuantity = 113f;
                bottlingObj.BottleCapacity = 500f;
                bottlingObj.BottleQuantity = 1130;

                prodBottl.BottlingInfo = bottlingObj;

                prodBottl.GainLoss = .4f;

                prodBottl.FillTestList = null;

                productionId = _production.CreateProduction(prodBottl, _userId); // here productionId is overriden with a new productionId of the new Gauged record
                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.Production));

                // Widrawn For Tax update:
                TaxWithdrawn taxes = new TaxWithdrawn();
                taxes.DateOfSaleOffset = new DateTimeOffset(2018, 06, 10, 0, 0, 0, TimeSpan.Zero);
                taxes.DateRecordedOffset = new DateTimeOffset(DateTime.UtcNow); //  hmm, I am not sure why we need this. We do store withdrawal date. in any case, we have to be carefull with this date as it is stored in UTC format so possible adjustment would be needed
                taxes.ProductionID = productionId;
                taxes.Value = 50f;

                _db.TaxWithdrawn.Add(taxes);
                _db.SaveChanges();

                tablesForCleanupTupleList.Add(Tuple.Create(productionId, Table.TaxWithdrawn));


                #endregion

                #region Processing Report
                // Report Header
                ReportHeader reportHeaderE = new ReportHeader();
                reportHeaderE.ProprietorName = "Test Distillery";
                reportHeaderE.EIN = "12-3456789";
                reportHeaderE.ReportDate = "June 2018";
                reportHeaderE.PlantAddress = "123 Cognac Drive Renton WASHINGTON 98059";
                reportHeaderE.DSP = "DSP-WA-21086";

                DateTimeOffset start = new DateTimeOffset(2018, 06, 01, 0, 0, 0, TimeSpan.Zero);
                DateTimeOffset end = new DateTimeOffset(2018, 06, 30, 0, 0, 0, TimeSpan.Zero);

                ProcessingReportingObject actualProcessingReportObject = new ProcessingReportingObject();

                actualProcessingReportObject = _processingReport.GetProcessingReportData(start, end, _userId);

                Assert.AreEqual(reportHeaderE.DSP, actualProcessingReportObject.Header.DSP);
                Assert.AreEqual(reportHeaderE.EIN, actualProcessingReportObject.Header.EIN);
                Assert.AreEqual(reportHeaderE.PlantAddress, actualProcessingReportObject.Header.PlantAddress);
                Assert.AreEqual(reportHeaderE.ProprietorName, actualProcessingReportObject.Header.ProprietorName);
                Assert.AreEqual(reportHeaderE.ReportDate, actualProcessingReportObject.Header.ReportDate);

                Assert.AreEqual(97.5f, actualProcessingReportObject.Part1.AmtBottledPackaged);
                Assert.AreEqual("spirit", actualProcessingReportObject.Part1.BulkIngredients);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Destroyed);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Dumped4Processing);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Gains);
                Assert.AreEqual(0.4f, actualProcessingReportObject.Part1.Losses);
                Assert.AreEqual(0.1f, actualProcessingReportObject.Part1.OnHandEndofMonth);
                Assert.AreEqual(98f, actualProcessingReportObject.Part1.OnHandFirstofMonth);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Recd4Process);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Transf2Prod4Redistil);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.Used4Redistil);
                Assert.AreEqual(0f, actualProcessingReportObject.Part1.WineMixedWithSpirit);

                Assert.AreEqual(97.5f, actualProcessingReportObject.Part2.AmtBottledPackaged);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Destroyed);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Dumped4Processing);
                Assert.AreEqual("bottled", actualProcessingReportObject.Part2.FinishedProduct);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.InventoryOverage);
                Assert.AreEqual(97.5f, actualProcessingReportObject.Part2.TotalLine31); // line 31
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.InventoryShortage);
                Assert.AreEqual(47.5f, actualProcessingReportObject.Part2.OnHandEndofMonth);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.OnHandFirstofMonth);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Recd4Process);
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.RecordedLosses);
                Assert.AreEqual(50f, actualProcessingReportObject.Part2.TaxWithdrawn); // line 33
                Assert.AreEqual(0f, actualProcessingReportObject.Part2.Transf2Prod4Redistil);
                Assert.AreEqual(97.5f, actualProcessingReportObject.Part2.TotalLine47); // line 47
                #endregion
            }
            finally
            {
                // Cleanup
                foreach (var i in tablesForCleanupTupleList)
                {
                    TestRecordCleanup(i.Item1, i.Item2);
                }
            }
        }

        /// <summary>
        /// This test checks to see that onHandFirstMonth in Processing report is not reduced by the amount of Tax Withdrawn
        /// 1. Purchase 100 Gallons of GNS @96% with PfG totalling to be 196 on January 1st, 2018
        /// 2. Purchase Water on January 1st, 2018 to be used in Blending
        /// 3. Blend 195.75 into GIN on January 2nd
        /// 4. Bottle 194.57 into Gin on January 3rd
        /// 5. Check Processing report for mutliple months to ensure proper values are being reported/
        /// 6. Expected:
        /// 6.1 losses occured during distil->blending shoud occur in part 1 of processing report
        /// 6.2 losses occured during blending->bottling shoud occur in part 2 of processing report
        /// 6.3 Values in processing report should persist on a month to month basis.
        /// </summary>
        [TestMethod()]
        public void Full_Production_Cycle_Withdraw_For_Tax_In_Consequent_Months_Check_MakeSure_OnHandFirst_Of_Month_In_Processing_Is_Correct_For_Each_Month()
        {
            // Arrange
            PurchaseDistilled(name: "GnsPurchase",
                date: new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 100f,
                weight: 0f,
                alcoholContent: 98f,
                proof: 196f,
                materialDictId: _rawMaterials["Gns"].RawMaterialId,
                spiritTypeReportingId: (int)ReportSpiritTypes.AlcoholUnder190,
                price: 1000f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            PurchaseAdditive(name: "WaterPurchase",
                date: new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                volume: 1000f,
                weight: 0f,
                alcoholContent: 0f,
                proof: 0f,
                materialDictId: _rawMaterials["DistilledWater"].RawMaterialId,
                price: 0f,
                vendorId: _vendors["Vendor"].VendorId,
                storageId: _storages["Storage"].StorageId);

            ProduceBlend(name: "Gin",
                start: new DateTimeOffset(2018, 1, 2, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 1, 2, 0, 0, 0, TimeSpan.Zero),
                volume: 217.5f,
                weight: 0f,
                alcoholContent: 45f,
                proof: 195.75f,
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Gin,
                spiritId: _spirits["Gin"].SpiritId,
                gainLoss: -0.25f,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID =_purchases["GnsPurchase"].PurchaseId,
                        OldVal = 0f,
                        NewVal = 100f,
                        DistillableOrigin = "purch",
                        BurningDownMethod = "volume"
                    }
                },
                blendingAdditives: new List<BlendingAdditive>
                {
                    new BlendingAdditive
                    {
                        RawMaterialId = _rawMaterials["DistilledWater"].RawMaterialId,
                        RawMaterialQuantity = 125f,
                        RawMaterialName = "DistilledWater",
                        UnitOfMeasurement = "gal"
                    }
                });

            ProduceBottle(name: "GinBottling",
                start: new DateTimeOffset(2018, 1, 3, 0, 0, 0, TimeSpan.Zero),
                end: new DateTimeOffset(2018, 1, 3, 0, 0, 0, TimeSpan.Zero),
                volume: 216.2f, // Use bottling UI workflow to calculate desired volume for given number of cases/bottles
                weight: 0f,
                alcoholContent: 45f,
                proof: 194.57f, // Use bottling UI workflow to calculate desired proof for given number of cases/bottles
                storageId: _storages["Storage"].StorageId,
                spiritTypeReportingId: (int)ReportSpiritTypes.Gin,
                spiritId: _spirits["Gin"].SpiritId,
                gainLoss: -1.18f,
                gauged: true,
                materialsUsed: new List<ObjInfo4Burndwn> {
                    new ObjInfo4Burndwn {
                        ID = _productions["Gin"].ProductionId,
                        OldVal = 0f,
                        NewVal = 217.5f,
                        DistillableOrigin = "prod",
                        BurningDownMethod = "volume"
                    }
                },
                bottlingInfo: new BottlingObject
                {
                    CaseCapacity = 12,
                    CaseQuantity = 124f,
                    BottleQuantity = 120,
                    BottleCapacity = 1488f,
                });


            // withdraw taxes in January
            _production.UpdateProduction(
                new ProductionObject
                {
                    ProductionType = "Bottling",
                    ProductionId = _productions["GinBottling"].ProductionId,
                    BatchName = null,
                    WithdrawalDate = new DateTimeOffset(2018, 01, 1, 0, 0, 0, TimeSpan.Zero),
                    TaxedProof = 34.57f,
                    ProofGallon = 194.57f - 34.57f
                },
                _userId
                );

            // Act
            var processingReport = GetProcessingReport(new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2018, 1, 31, 0, 0, 0, TimeSpan.Zero));

            AssertProcessing(processingReport,
                new ReportHeader
                {
                    ReportDate = "January 2018"
                },
                new ProcessReportingPart1
                {
                    OnHandFirstofMonth = 0f, // line 1
                    Recd4Process = 196f, // line 2
                    Gains = 0f, // line 7
                    TotalLine8 = 0f/*OnHandFirstofMonth*/ + 196f/*Recd4Process*/ + 0/*Gains*/,
                    AmtBottledPackaged = 195.75f, // line 9
                    BulkIngredients = "spirit", // column (b) or (c)
                    Losses = .25f, // line 24
                    OnHandEndofMonth = 196f/*TotalLine8*/ - 196f/*TotalLine26*/, // line 25
                    TotalLine26 = 196f
                },
                new ProcessReportingPart2
                {
                    AmtBottledPackaged = 195.75f,
                    FinishedProduct = "bottled",
                    TaxWithdrawn = 34.57f,
                    OnHandEndofMonth = 160f,
                    TotalLine31 = 195.75f,
                    RecordedLosses = 1.18f,
                    TotalLine47 = 1.18f/*Line 44 Losses*/ + 34.57f/*Tax withdrawn */ + 160f /*On Hand End Of Month*/
                },
                new List<ProcessReportingPart4>
                {
                    new ProcessReportingPart4
                    {
                        Gin = 195.75f,
                        ProcessingSpirits = "bulkSpiritDumped",
                        ProcessingTypeID = (int)Persistence.BusinessLogicEnums.ProcessingReportType.Gin,
                        StateID = 4
                    },
                    new ProcessReportingPart4
                    {
                        Gin = 216.2f,
                        ProcessingSpirits = "bottled",
                        ProcessingTypeID = (int)Persistence.BusinessLogicEnums.ProcessingReportType.Gin,
                        StateID = 5
                    }
                });

            // withdraw taxes in February and check processing report
            _production.UpdateProduction(
                new ProductionObject
                {
                    ProductionType = "Bottling",
                    ProductionId = _productions["GinBottling"].ProductionId,
                    BatchName = null,
                    WithdrawalDate = new DateTimeOffset(2018, 02, 1, 0, 0, 0, TimeSpan.Zero),
                    TaxedProof = 40f,
                    ProofGallon = 160f - 40f
                },
                _userId
                );

            // check processing report
            processingReport = null;

            processingReport = GetProcessingReport(new DateTimeOffset(2018, 2, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2018, 2, 28, 0, 0, 0, TimeSpan.Zero));

            AssertProcessing(processingReport,
                new ReportHeader
                {
                    ReportDate = "February 2018"
                },
                new ProcessReportingPart1
                {
                    OnHandFirstofMonth = 0f, // line 1
                    Recd4Process = 0, // line 2
                    Gains = 0f, // line 7
                    TotalLine8 = 0f/*OnHandFirstofMonth*/ + 0/*Recd4Process*/ + 0/*Gains*/,
                    AmtBottledPackaged = 0, // line 9
                    BulkIngredients = "spirit", // column (b) or (c)
                    Losses = 0, // line 24
                    OnHandEndofMonth = 0/*TotalLine8*/ - 0/*TotalLine26*/, // line 25
                    TotalLine26 = 0
                },
                new ProcessReportingPart2
                {
                    OnHandFirstofMonth = 160f, // line 27
                    AmtBottledPackaged = 0,
                    FinishedProduct = "bottled",
                    TaxWithdrawn = 40f,
                    OnHandEndofMonth = 120f,
                    TotalLine31 = 160f,
                    RecordedLosses = 0,
                    TotalLine47 = 0/*Line 44 Losses*/ + 40f/*Tax withdrawn */ + 120f /*On Hand End Of Month*/
                });

            // withdraw taxes in March
            _production.UpdateProduction(
                new ProductionObject
                {
                    ProductionType = "Bottling",
                    ProductionId = _productions["GinBottling"].ProductionId,
                    BatchName = null,
                    WithdrawalDate = new DateTimeOffset(2018, 03, 1, 0, 0, 0, TimeSpan.Zero),
                    TaxedProof = 30f,
                    ProofGallon = 120f - 30f
                },
                _userId
                );

            processingReport = GetProcessingReport(new DateTimeOffset(2018, 3, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2018, 3, 28, 0, 0, 0, TimeSpan.Zero));

            AssertProcessing(processingReport,
                new ReportHeader
                {
                    ReportDate = "March 2018"
                },
                new ProcessReportingPart1
                {
                    OnHandFirstofMonth = 0f, // line 1
                    Recd4Process = 0, // line 2
                    Gains = 0f, // line 7
                    TotalLine8 = 0f/*OnHandFirstofMonth*/ + 0/*Recd4Process*/ + 0/*Gains*/,
                    AmtBottledPackaged = 0, // line 9
                    BulkIngredients = "spirit", // column (b) or (c)
                    Losses = 0, // line 24
                    OnHandEndofMonth = 0/*TotalLine8*/ - 0/*TotalLine26*/, // line 25
                    TotalLine26 = 0
                },
                new ProcessReportingPart2
                {
                    OnHandFirstofMonth = 120f, // line 27
                    AmtBottledPackaged = 0,
                    FinishedProduct = "bottled",
                    TaxWithdrawn = 30f,
                    OnHandEndofMonth = 90f,
                    TotalLine31 = 120f,
                    RecordedLosses = 0,
                    TotalLine47 = 0/*Line 44 Losses*/ + 30f/*Tax withdrawn */ + 90f /*On Hand End Of Month*/
                });

            // Now let's go in the past to ensure all values persist
            // Check January
            processingReport = GetProcessingReport(new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2018, 1, 31, 0, 0, 0, TimeSpan.Zero));
            AssertProcessing(processingReport,
                new ReportHeader
                {
                    ReportDate = "January 2018"
                },
                new ProcessReportingPart1
                {
                    OnHandFirstofMonth = 0f, // line 1
                    Recd4Process = 196f, // line 2
                    Gains = 0f, // line 7
                    TotalLine8 = 0f/*OnHandFirstofMonth*/ + 196f/*Recd4Process*/ + 0/*Gains*/,
                    AmtBottledPackaged = 195.75f, // line 9
                    BulkIngredients = "spirit", // column (b) or (c)
                    Losses = .25f, // line 24
                    OnHandEndofMonth = 196f/*TotalLine8*/ - 196f/*TotalLine26*/, // line 25
                    TotalLine26 = 196f
                },
                new ProcessReportingPart2
                {
                    AmtBottledPackaged = 195.75f,
                    FinishedProduct = "bottled",
                    TaxWithdrawn = 34.57f,
                    OnHandEndofMonth = 160f,
                    TotalLine31 = 195.75f,
                    RecordedLosses = 1.18f,
                    TotalLine47 = 1.18f/*Line 44 Losses*/ + 34.57f/*Tax withdrawn */ + 160f /*On Hand End Of Month*/
                },
                new List<ProcessReportingPart4>
                {
                    new ProcessReportingPart4
                    {
                        Gin = 195.75f,
                        ProcessingSpirits = "bulkSpiritDumped",
                        ProcessingTypeID = (int)Persistence.BusinessLogicEnums.ProcessingReportType.Gin,
                        StateID = 4
                    },
                    new ProcessReportingPart4
                    {
                        Gin = 216.2f,
                        ProcessingSpirits = "bottled",
                        ProcessingTypeID = (int)Persistence.BusinessLogicEnums.ProcessingReportType.Gin,
                        StateID = 5
                    }
                });

            // Check February
            processingReport = GetProcessingReport(new DateTimeOffset(2018, 2, 1, 0, 0, 0, TimeSpan.Zero), new DateTimeOffset(2018, 2, 28, 0, 0, 0, TimeSpan.Zero));

            AssertProcessing(processingReport,
                new ReportHeader
                {
                    ReportDate = "February 2018"
                },
                new ProcessReportingPart1
                {
                    OnHandFirstofMonth = 0f, // line 1
                    Recd4Process = 0, // line 2
                    Gains = 0f, // line 7
                    TotalLine8 = 0f/*OnHandFirstofMonth*/ + 0/*Recd4Process*/ + 0/*Gains*/,
                    AmtBottledPackaged = 0, // line 9
                    BulkIngredients = "spirit", // column (b) or (c)
                    Losses = 0, // line 24
                    OnHandEndofMonth = 0/*TotalLine8*/ - 0/*TotalLine26*/, // line 25
                    TotalLine26 = 0
                },
                new ProcessReportingPart2
                {
                    OnHandFirstofMonth = 160f, // line 27
                    AmtBottledPackaged = 0,
                    FinishedProduct = "bottled",
                    TaxWithdrawn = 40f,
                    OnHandEndofMonth = 120f,
                    TotalLine31 = 160f,
                    RecordedLosses = 0,
                    TotalLine47 = 0/*Line 44 Losses*/ + 40f/*Tax withdrawn */ + 120f /*On Hand End Of Month*/
                });
        }

        /// <summary>
        /// TestRecordCleanup method cleans up test data from tables
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tableIdent"></param>
        /// <returns></returns>
        private bool TestRecordCleanup(int id, Table tableIdent)
        {
            bool success = false;

            // Arrange
            int distillerId = _dl.GetDistillerId(_userId);

            switch (tableIdent)
            {
                case Table.Spirit:
                    {
                        try
                        {
                            var rec =
                            (from res in _db.Spirit
                             where res.SpiritID == id
                             select res).ToList();

                            if (rec != null)
                            {
                                _db.Spirit.RemoveRange(rec);
                            }

                            _db.SaveChanges();

                            success = true;
                        }
                        catch (Exception e)
                        {
                            throw e;
                        }

                        break;
                    }

                case Table.Vendor:
                    {
                        try
                        {
                            var rec =
                            (from res in _db.Vendor
                             where res.VendorID == id
                             select res).FirstOrDefault();

                            if (rec != null)
                            {
                                _db.Vendor.Remove(rec);
                            }

                            var rec1 =
                            (from res in _db.VendorDetail
                             where res.VendorID == id
                             select res).FirstOrDefault();

                            if (rec1 != null)
                            {
                                _db.VendorDetail.Remove(rec1);
                                _db.SaveChanges();

                                success = true;
                            }
                        }
                        catch(Exception e)
                        {
                            throw e;
                        }

                        break;
                    }

                case Table.Storage:
                    {
                        try
                        {
                            var rec =
                            (from res in _db.Storage
                             where res.StorageID == id
                             select res).ToList();

                            if (rec != null)
                            {
                                _db.Storage.RemoveRange(rec);
                            }

                            var rec1 =
                            (from res in _db.StorageState
                             where res.StorageID == id
                             select res).ToList();

                            if (rec1 != null)
                            {
                                _db.StorageState.RemoveRange(rec1);
                            }

                            var sto2Rec =
                                    (from res in _db.StorageToRecord
                                     where res.StorageID == id
                                     select res);

                            if (sto2Rec != null)
                            {
                                _db.StorageToRecord.RemoveRange(sto2Rec);
                            }

                            _db.SaveChanges();

                            success = true;
                        }
                        catch (Exception e)
                        {
                            throw e;
                        }

                        break;
                    }

                case Table.MaterialDict:
                    {
                        try
                        {
                            var rec =
                            (from res in _db.MaterialDict
                             where res.MaterialDictID == id
                             select res).ToList();

                            if (rec != null)
                            {
                                _db.MaterialDict.RemoveRange(rec);
                            }

                            var rec1 =
                            (from res in _db.MaterialType
                             where res.MaterialDictID == id
                             select res).ToList();

                            if (rec1 != null)
                            {
                                _db.MaterialType.RemoveRange(rec1);
                            }

                            var rec2 =
                            (from res in _db.MaterialDict2MaterialCategory
                             where res.MaterialDictID == id
                             select res);

                            if (rec2 != null)
                            {
                                _db.MaterialDict2MaterialCategory.RemoveRange(rec2);
                            }

                            _db.SaveChanges();

                            success = true;
                        }
                        catch (Exception e)
                        {
                            throw e;
                        }

                        break;
                    }
                case Table.Purchase:
                    {
                        try
                        {
                            var pur =
                                (from rec in _db.Purchase
                                 where rec.PurchaseID == id
                                 select rec).FirstOrDefault();

                            if (pur != null)
                            {
                                var vol =
                                    (from rec in _db.Volume
                                     where rec.VolumeID == pur.VolumeID
                                     select rec).ToList();

                                if (vol != null)
                                {
                                    _db.Volume.RemoveRange(vol);
                                }

                                var weight =
                                    (from rec in _db.Weight
                                     where rec.WeightID == pur.WeightID
                                     select rec).ToList();

                                if (weight != null)
                                {
                                    _db.Weight.RemoveRange(weight);
                                }

                                var alc =
                                    (from rec in _db.Alcohol
                                     where rec.AlcoholID == pur.AlcoholID
                                     select rec).ToList();

                                if (alc != null)
                                {
                                    _db.Alcohol.RemoveRange(alc);
                                }

                                var prf =
                                    (from rec in _db.Proof
                                     where rec.ProofID == pur.ProofID
                                     select rec).ToList();

                                if (prf != null)
                                {
                                    _db.Proof.RemoveRange(prf);
                                }

                                var pur2SpiTRep =
                                    (from rec in _db.PurchaseToSpiritTypeReporting
                                     where rec.PurchaseID == pur.PurchaseID
                                     select rec).ToList();

                                if (pur2SpiTRep != null)
                                {
                                    _db.PurchaseToSpiritTypeReporting.RemoveRange(pur2SpiTRep);
                                }

                                var sto2Rec =
                                    (from rec in _db.StorageToRecord
                                     where rec.RecordId == pur.PurchaseID && rec.TableIdentifier == "pur"
                                     select rec).ToList();

                                if (sto2Rec != null)
                                {
                                    _db.StorageToRecord.RemoveRange(sto2Rec);
                                }

                                var pur4Rep =
                                    (from rec in _db.Purchase4Reporting
                                     where rec.PurchaseID == pur.PurchaseID
                                     select rec).ToList();

                                if (pur4Rep != null)
                                {
                                    _db.Purchase4Reporting.RemoveRange(pur4Rep);
                                }

                                var purH =
                                    (from rec in _db.PurchaseHistory
                                     where rec.PurchaseID == pur.PurchaseID
                                     select rec).ToList();

                                if (purH != null)
                                {
                                    _db.PurchaseHistory.RemoveRange(purH);
                                }

                                _db.Purchase.Remove(pur);
                            }

                            _db.SaveChanges();
                        }
                        catch (Exception e)
                        {
                            throw e;
                        }

                        break;
                    }
                case Table.Production:
                    {
                        try
                        {
                            var prod =
                                (from rec in _db.Production
                                 where rec.ProductionID == id
                                 select rec).FirstOrDefault();

                            var prod2Spi =
                                (from rec in _db.ProductionToSpirit
                                 where rec.ProductionID == id
                                 select rec).FirstOrDefault();

                            if (prod2Spi != null)
                            {
                                var spirit =
                                    (from res in _db.Spirit
                                     where res.SpiritID == prod2Spi.SpiritID
                                     select res).FirstOrDefault();

                                if (spirit != null)
                                {
                                    _db.Spirit.Remove(spirit);
                                }

                                _db.ProductionToSpirit.Remove(prod2Spi);
                            }

                            if (prod != null)
                            {
                                var vol =
                                    (from rec in _db.Volume
                                     where rec.VolumeID == prod.VolumeID
                                     select rec).FirstOrDefault();

                                if (vol != null)
                                {
                                    _db.Volume.Remove(vol);
                                }

                                var weight =
                                    (from rec in _db.Weight
                                     where rec.WeightID == prod.WeightID
                                     select rec).FirstOrDefault();

                                if (weight != null)
                                {
                                    _db.Weight.Remove(weight);
                                }

                                var alc =
                                    (from rec in _db.Alcohol
                                     where rec.AlcoholID == prod.AlcoholID
                                     select rec).FirstOrDefault();

                                if (alc != null)
                                {
                                    _db.Alcohol.Remove(alc);
                                }

                                var prf =
                                    (from rec in _db.Proof
                                     where rec.ProofID == prod.ProofID
                                     select rec).FirstOrDefault();

                                if (prf != null)
                                {
                                    _db.Proof.Remove(prf);
                                }

                                var sto2Rec =
                                    (from rec in _db.StorageToRecord
                                     where rec.RecordId == prod.ProductionID && rec.TableIdentifier == "prod"
                                     select rec);

                                if (sto2Rec != null)
                                {
                                    foreach (var i in sto2Rec)
                                    {
                                        _db.StorageToRecord.Remove(i);
                                    }
                                }

                                var prod2SpiritTRep =
                                    (from rec in _db.ProductionToSpiritTypeReporting
                                     where rec.ProductionID == prod.ProductionID
                                     select rec).FirstOrDefault();

                                if (prod2SpiritTRep != null)
                                {
                                    _db.ProductionToSpiritTypeReporting.Remove(prod2SpiritTRep);
                                }

                                var prod2SpiCut =
                                    (from rec in _db.ProductionToSpiritCut
                                     where rec.ProductionID == prod.ProductionID
                                     select rec).FirstOrDefault();

                                if (prod2SpiCut != null)
                                {
                                    _db.ProductionToSpiritCut.Remove(prod2SpiCut);
                                }

                                var prodCont =
                                    (from rec in _db.ProductionContent
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (prodCont != null)
                                {
                                    foreach (var l in prodCont)
                                    {
                                        _db.ProductionContent.Remove(l);
                                    }
                                }

                                var prodHist =
                                    (from rec in _db.ProductionHistory
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (prodHist != null)
                                {
                                    foreach (var l in prodHist)
                                    {
                                        _db.ProductionHistory.Remove(l);
                                    }
                                }

                                var prod4Rep =
                                    (from rec in _db.Production4Reporting
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (prod4Rep != null)
                                {
                                    foreach (var i in prod4Rep)
                                    {
                                        _db.Production4Reporting.Remove(i);
                                    }
                                }

                                var prod2Pur =
                                    (from rec in _db.ProductionToPurchase
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (prod2Pur != null)
                                {
                                    foreach (var l in prod2Pur)
                                    {
                                        _db.ProductionToPurchase.Remove(l);
                                    }
                                }

                                var blendedComp =
                                    (from rec in _db.BlendedComponent
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (blendedComp != null)
                                {
                                    foreach (var l in blendedComp)
                                    {
                                        _db.BlendedComponent.Remove(l);
                                    }
                                }

                                var bottlI =
                                    (from rec in _db.BottlingInfo
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (bottlI != null)
                                {
                                    foreach (var l in bottlI)
                                    {
                                        _db.BottlingInfo.Remove(l);
                                    }
                                }

                                var fillTest =
                                    (from rec in _db.FillTest
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (fillTest != null)
                                {
                                    foreach (var l in fillTest)
                                    {
                                        _db.FillTest.Remove(l);
                                    }
                                }

                                var gainsLosses =
                                    (from rec in _db.GainLoss
                                     where rec.ProductionId == prod.ProductionID
                                     select rec);

                                if (gainsLosses != null)
                                {
                                    foreach (var l in gainsLosses)
                                    {
                                        _db.GainLoss.Remove(l);
                                    }
                                }

                                var spiritCut =
                                    (from rec in _db.ProductionToSpiritCut
                                     where rec.ProductionID == prod.ProductionID
                                     select rec);

                                if (spiritCut != null)
                                {
                                    foreach (var l in spiritCut)
                                    {
                                        _db.ProductionToSpiritCut.Remove(l);
                                    }
                                }

                                // remove tax withdrawal records
                                var tax = (from rec in _db.TaxWithdrawn
                                        where rec.ProductionID == prod.ProductionID
                                        select rec).ToList();

                                if (tax != null)
                                {
                                    _db.TaxWithdrawn.RemoveRange(tax);
                                }

                                _db.Production.Remove(prod);
                            }
                            _db.SaveChanges();
                        }
                        catch (Exception e)
                        {
                            throw e;
                        }
                        break;
                    }
            }

            return success;
        }
    }
}